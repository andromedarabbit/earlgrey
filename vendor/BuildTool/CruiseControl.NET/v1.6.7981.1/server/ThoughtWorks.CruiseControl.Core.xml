<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ThoughtWorks.CruiseControl.Core</name>
    </assembly>
    <members>
        <member name="T:ThoughtWorks.CruiseControl.Core.Config.ConfigurationTrace">
            <summary>
            Defines a trace through the configuration settings.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.ConfigurationTrace.#ctor(System.Object,ThoughtWorks.CruiseControl.Core.Config.ConfigurationTrace)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Config.ConfigurationTrace"/> class.
            </summary>
            <param name="value">The value.</param>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.ConfigurationTrace.GetAncestorValue``1">
            <summary>
            Gets the value of an ancestor of a type.
            </summary>
            <typeparam name="TType">The type of the ancestor.</typeparam>
            <returns>The value of the ancestor if found, null otherwise.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.ConfigurationTrace.FindAncestor``1">
            <summary>
            Finds the first ancestor of a type.
            </summary>
            <typeparam name="TType">The type of the ancestor.</typeparam>
            <returns>The trace for the ancestor if found, null otherwise.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.ConfigurationTrace.Wrap(System.Object)">
            <summary>
            Wraps a configuration value in the trace.
            </summary>
            <param name="value">The value.</param>
            <returns>The wrapped value.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.ConfigurationTrace.Start(System.Object)">
            <summary>
            Starts a new configuration trace.
            </summary>
            <param name="value">The value for the root.</param>
            <returns>The new <see cref="T:ThoughtWorks.CruiseControl.Core.Config.ConfigurationTrace"/>.</returns>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Config.ConfigurationTrace.Value">
            <summary>
            Gets the configuration value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Config.ConfigurationTrace.Parent">
            <summary>
            Gets the parent trace.
            </summary>
            <value>The trace.</value>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Config.ConfigurationValidationUtils">
            <summary>
            Helper methods for validating configuration settings.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.ConfigurationValidationUtils.GenerateResultForProject(ThoughtWorks.CruiseControl.Core.Project)">
            <summary>
            Generates a mock result for a project.
            </summary>
            <param name="project">The project.</param>
            <returns>The mock <see cref="T:ThoughtWorks.CruiseControl.Core.IIntegrationResult"/>.</returns>
            <remarks>
            This will only set the basic properties for the result, including project name, working directory and artifect directory.
            </remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.Evaluator.StringAsLiteral(System.String)">
            <summary>
            Strings as literal.	
            </summary>
            <param name="theString">The string.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.DebuggingWriter">
            <summary>
            	
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.DebuggingWriter.#ctor(System.Xml.XmlWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.DebuggingWriter"/> class.	
            </summary>
            <param name="realWriter">The real_writer.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.DebuggingWriter.WriteStartDocument">
            <summary>
            Writes the start document.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.DebuggingWriter.WriteStartDocument(System.Boolean)">
            <summary>
            Writes the start document.	
            </summary>
            <param name="standalone">The standalone.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.DebuggingWriter.WriteEndDocument">
            <summary>
            Writes the end document.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.DebuggingWriter.WriteDocType(System.String,System.String,System.String,System.String)">
            <summary>
            Writes the type of the doc.	
            </summary>
            <param name="name">The name.</param>
            <param name="pubid">The pubid.</param>
            <param name="sysid">The sysid.</param>
            <param name="subset">The subset.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.DebuggingWriter.WriteStartElement(System.String,System.String,System.String)">
            <summary>
            Writes the start element.	
            </summary>
            <param name="prefix">The prefix.</param>
            <param name="localName">Name of the local.</param>
            <param name="ns">The ns.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.DebuggingWriter.WriteEndElement">
            <summary>
            Writes the end element.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.DebuggingWriter.WriteFullEndElement">
            <summary>
            Writes the full end element.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.DebuggingWriter.WriteStartAttribute(System.String,System.String,System.String)">
            <summary>
            Writes the start attribute.	
            </summary>
            <param name="prefix">The prefix.</param>
            <param name="localName">Name of the local.</param>
            <param name="ns">The ns.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.DebuggingWriter.WriteEndAttribute">
            <summary>
            Writes the end attribute.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.DebuggingWriter.WriteCData(System.String)">
            <summary>
            Writes the C data.	
            </summary>
            <param name="text">The text.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.DebuggingWriter.WriteComment(System.String)">
            <summary>
            Writes the comment.	
            </summary>
            <param name="text">The text.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.DebuggingWriter.WriteProcessingInstruction(System.String,System.String)">
            <summary>
            Writes the processing instruction.	
            </summary>
            <param name="name">The name.</param>
            <param name="text">The text.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.DebuggingWriter.WriteEntityRef(System.String)">
            <summary>
            Writes the entity ref.	
            </summary>
            <param name="name">The name.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.DebuggingWriter.WriteCharEntity(System.Char)">
            <summary>
            Writes the char entity.	
            </summary>
            <param name="ch">The ch.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.DebuggingWriter.WriteWhitespace(System.String)">
            <summary>
            Writes the whitespace.	
            </summary>
            <param name="ws">The ws.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.DebuggingWriter.WriteString(System.String)">
            <summary>
            Writes the string.	
            </summary>
            <param name="text">The text.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.DebuggingWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
            <summary>
            Writes the surrogate char entity.	
            </summary>
            <param name="lowChar">The low char.</param>
            <param name="highChar">The high char.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.DebuggingWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
            <summary>
            Writes the chars.	
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="index">The index.</param>
            <param name="count">The count.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.DebuggingWriter.WriteRaw(System.Char[],System.Int32,System.Int32)">
            <summary>
            Writes the raw.	
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="index">The index.</param>
            <param name="count">The count.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.DebuggingWriter.WriteRaw(System.String)">
            <summary>
            Writes the raw.	
            </summary>
            <param name="data">The data.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.DebuggingWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes the base64.	
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="index">The index.</param>
            <param name="count">The count.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.DebuggingWriter.Close">
            <summary>
            Closes this instance.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.DebuggingWriter.Flush">
            <summary>
            Flushes this instance.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.DebuggingWriter.LookupPrefix(System.String)">
            <summary>
            Lookups the prefix.	
            </summary>
            <param name="ns">The ns.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.DebuggingWriter.WriteState">
            <summary>
            Gets the state of the write.	
            </summary>
            <value>The state of the write.</value>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.ElementProcessors.ElementProcessor">
            <summary>
            Abstract base class for node processors
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.ElementProcessors.IElementProcessor">
            <summary>
            Interface that node processors must implement
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.ElementProcessors.IElementProcessor.Process(System.Xml.Linq.XNode)">
            <summary>
            Called by the preprocessor to process a node.
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.ElementProcessors.IElementProcessor.TargetElementName">
            <summary>
            Retrieve the name of the element that this processor processes.
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.ElementProcessors.ElementProcessor._space_matcher">
            <summary>
            Regex matches 2 or more contiguous whitespace characters
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.ElementProcessors.ElementProcessor.#ctor(System.Xml.Linq.XName,ThoughtWorks.CruiseControl.Core.Config.Preprocessor.PreprocessorEnvironment)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.ElementProcessors.ElementProcessor"/> class.	
            </summary>
            <param name="targetElementName">The target_element_name.</param>
            <param name="env">The env.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.ElementProcessors.ElementProcessor.Process(System.Xml.Linq.XNode)">
            <summary>
            Processes the specified node.	
            </summary>
            <param name="node">The node.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.ElementProcessors.ElementProcessor._ProcessNodes(System.Collections.Generic.IEnumerable{System.Xml.Linq.XNode})">
            <summary>
            Perform default preprocessing on the given nodes
            </summary>
            <param name="nodes"></param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.ElementProcessors.ElementProcessor._ProcessText(System.String)">
            <summary>
            _s the process text.	
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.ElementProcessors.ElementProcessor._DefineFromAttributes(System.Xml.Linq.XElement)">
            <summary>
            _s the define from attributes.	
            </summary>
            <param name="element">The element.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.ElementProcessors.ElementProcessor._AssumeElement(System.Xml.Linq.XNode)">
            <summary>
            _s the assume element.	
            </summary>
            <param name="node">The node.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.ElementProcessors.ElementProcessor._Env">
            <summary>
            Gets or sets the _ env.	
            </summary>
            <value>The _ env.</value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.ElementProcessors.ElementProcessor.TargetElementName">
            <summary>
            Gets or sets the name of the target element.	
            </summary>
            <value>The name of the target element.</value>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.ElementProcessors.ConditionalProcessor._ProcessConditional(System.Xml.Linq.XElement,System.Boolean)">
            <summary>
             Common logic for if/ifdef/ifndef/else constructs
            </summary>
            <param name="conditionalElement"></param>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.ElementProcessors.DefaultProcessor._ProcessNonPpElement(System.Xml.Linq.XElement)">
            <summary>
            Process an element which is not in the preprocessor's namespace.
            Copies the element, attributes, and recursively processes the content
            nodes.
            </summary>
            <param name="element"></param>
            <returns>Cloned element with processed content</returns>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.ElementProcessors.ForProcessor">
            <summary>
            Processor for the "for" looping element
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.ElementProcessors.ImportProcessor">
            <summary>
            Import external node processors types
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.ElementProcessors.IncludeProcessor">
            <summary>
            Processes the preprocessor "include" directive.
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.UndefinedSymbolException">
            <summary>
            	
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.EvaluationException">
            <summary>
            Exception for preprocessor constant evaluation problems
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.PreprocessorException">
            <summary>
            Base preprocessor exception class
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.PreprocessorException.Context">
            <summary>
            Gets or sets the context.	
            </summary>
            <value>The context.</value>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.PreprocessorException.XmlContext">
            <summary>
            	
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.PreprocessorException.XmlContext.ToString">
            <summary>
            Toes the string.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.PreprocessorException.XmlContext.LineInfo">
            <summary>
            Gets or sets the line info.	
            </summary>
            <value>The line info.</value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.PreprocessorException.XmlContext.Path">
            <summary>
            Gets or sets the path.	
            </summary>
            <value>The path.</value>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.CyclicalEvaluationException">
            <summary>
            	
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.ExplicitDefinitionRequiredException">
            <summary>
            	
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.ExplicitDefinitionRequiredException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.ExplicitDefinitionRequiredException"/> class.	
            </summary>
            <param name="msg">The MSG.</param>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.ImportException">
            <summary>
            	
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.ImportException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.ImportException"/> class.	
            </summary>
            <param name="msg">The MSG.</param>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.DefinitionException">
            <summary>
            Exception for preprocessor constant definition problems
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.InvalidMarkupException">
            <summary>
            	
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.InvalidMarkupException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.InvalidMarkupException"/> class.	
            </summary>
            <param name="msg">The MSG.</param>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.MissingIncludeException">
            <summary>
            	
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.MissingIncludeException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.MissingIncludeException"/> class.	
            </summary>
            <param name="msg">The MSG.</param>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.ExceptionFactory">
            <summary>
            Exception factory delegate
            </summary>
            <param name="msg"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.ConfigPreprocessor">
            <summary>
            The preprocessor
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.ConfigPreprocessor.#ctor(ThoughtWorks.CruiseControl.Core.Config.Preprocessor.PreprocessorSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.ConfigPreprocessor"/> class.	
            </summary>
            <param name="settings">The settings.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.ConfigPreprocessor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.ConfigPreprocessor"/> class.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.ConfigPreprocessor.PreProcess(System.Xml.XmlReader,System.Xml.XmlWriter,System.Xml.XmlUrlResolver,System.Uri)">
            <summary>
            Pres the process.	
            </summary>
            <param name="input">The input.</param>
            <param name="output">The output.</param>
            <param name="resolver">The resolver.</param>
            <param name="inputUri">The input_uri.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="E:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.ConfigPreprocessor.SubfileLoaded">
            <summary>
            Occurs when [subfile loaded].	
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.PreprocessorEnvironment">
            <summary>
            The execution environment for the preprocessor.  This environment stores and manages
            symbolic definitions and evaluations, as well as providing document include facilities.
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.PreprocessorEnvironment._symbol_ref_matcher">
            <summary>
            Matches symbolic_def references in strings.
            symbolic_def references are of the form $(sym_name)
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.PreprocessorEnvironment._define_stack">
            <summary>
            Stack that represents the call stack.  Each stack frame contains a map of
            symbol names to SymbolicDef objects.  Only one such definiton is permitted
            per stack frame.
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.PreprocessorEnvironment._evaluated_symbols">
            <summary>
            Keeps track of symbol names already evaluated on the current stack frame,
            to detect cyclic expansions which would loop infinitely
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.PreprocessorEnvironment._fileset">
            <summary>
            Keeps track of input files processed by the preprocessor
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.PreprocessorEnvironment._include_stack">
            <summary>
            Stack of included files.
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.PreprocessorEnvironment._resolver">
            <summary>
            For resolving relative include paths
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.PreprocessorEnvironment.#ctor(ThoughtWorks.CruiseControl.Core.Config.Preprocessor.PreprocessorSettings,System.Uri,System.Xml.XmlUrlResolver)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.PreprocessorEnvironment"/> class.	
            </summary>
            <param name="settings">The settings.</param>
            <param name="inputFilePath">The input_file_path.</param>
            <param name="resolver">The resolver.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.PreprocessorEnvironment._CanonicalizeName(System.String)">
            <summary>
            Canonicalize the given symbol name, removing JScript flags (if present) and
            converting to lower case if the settings dictate case-insensitivity.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.PreprocessorEnvironment._GetAsNodeSet(System.Collections.IEnumerable)">
            <summary>
            _s the get as node set.	
            </summary>
            <param name="values">The values.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.PreprocessorEnvironment._GetAsNodeSet(System.String[])">
            <summary>
            _s the get as node set.	
            </summary>
            <param name="values">The values.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.PreprocessorEnvironment.GetSymbolDef(System.String)">
            <summary>
            Retrieve the SymbolicDef bound to the given name.  If the name occurs multiple times
            in the stack, returns the highest (most-local) definition.
            </summary>
            <param name="name">symbol name</param>
            <returns>SymbolicDef</returns>
            <exception cref="T:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.EvaluationException">Symbol was not defined</exception>
            <exception cref="T:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.ExplicitDefinitionRequiredException">Symbol was defined in the 
            environment, but preprocess is in "explicit definition required" mode.</exception>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.PreprocessorEnvironment._HasJsFlag(System.String)">
            <summary>
            Is the given name qualified with the :js 
            flag, signalling that it is to be emitted as a
            JScript string literal (and properly escaped for
            processing by the JScript engine)
            </summary>         
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.PreprocessorEnvironment._InternalGetSymbolDef(System.String)">
            <summary>
            Search for the given symbol definition in the environment.
            </summary>
            <param name="symbolName"></param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.PreprocessorEnvironment._IsDefined(System.String)">
            <summary>
            Is the given symbol defined in this environment?
            </summary>
            <param name="symbolName"></param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.PreprocessorEnvironment._IsDefinedInCurrentFrame(System.String)">
            <summary>
            Is the symbol defined in the current stack frame?
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.PreprocessorEnvironment._IsJScriptExpression(System.String)">
            <summary>
            Is the given string a JScript Expression?  Note that this 
            method only tests for the presence of enclosing {} characters,
            not that the contained text is actually well-formed JScript.
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.PreprocessorEnvironment._DefineSymbolOnStack(ThoughtWorks.CruiseControl.Core.Config.Preprocessor.SymbolicDef)">
            <summary>
            Define the given symbol on the current stack frame.
            </summary>        
            <param name="symbolicDef"></param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.PreprocessorEnvironment.AddToFileset(System.Uri)">
            <summary>
            Add the given url to the set of processed files.
            </summary>
            <param name="url"></param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.PreprocessorEnvironment.DefineNodesetSymbol(System.String,System.Collections.Generic.IEnumerable{System.Xml.Linq.XNode})">
            <summary>
            XSLT extension method, called to define a notset symbolic_def in the preprocessor
            environment.  The symbolic_def can be referred to symbolically in subsequent 
            definitions or expansions.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.PreprocessorEnvironment.DefineTextSymbol(System.String,System.String)">
            <summary>
            XSLT extension method, called to define a text symbolic_def in the 
            preprocessor environment.  The symbolic_def can be referred to symbolically
            in subsequent definitions or expansions.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.PreprocessorEnvironment.EvalBool(System.String)">
            <summary>
            Evaluates the given boolean JScript.NET expression, returns the result.
            </summary>
            <returns>comparison evaluation</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.PreprocessorEnvironment.EvalSymbol(System.String)">
            <summary>
            XSLT extension method
            Retrieve the value of the named symbolic_def.  
            </summary>
            <param name="name">name.</param>
            <returns>String or nodeset, depending on 
            how the symbolic_def was defined</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.PreprocessorEnvironment._Process(System.Collections.Generic.IEnumerable{System.Xml.Linq.XNode})">
            <summary>
            _s the process.	
            </summary>
            <param name="nodes">The nodes.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.PreprocessorEnvironment.EvalExpr(System.String)">
            <summary>
            Evaluate the given JScript.NET expression, return the result
            as a text node.
            </summary>
            <param name="expr"></param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.PreprocessorEnvironment.EvalExprAsString(System.String)">
            <summary>
            Evaluate the given JScript expression, returning the evaluation result
            as a string.
            </summary>
            <param name="expr">JScript expression</param>
            <exception cref="T:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.EvaluationException"/>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.PreprocessorEnvironment._IsPureText(System.Collections.Generic.IEnumerable{System.Xml.Linq.XNode})">
            <summary>
            Is the given nodeset either empty or entirely text nodes?
            </summary>
            <param name="nodes"></param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.PreprocessorEnvironment.EvalTextSymbols(System.String)">
            <summary>        
            Evaluate any symbol references contained in the given string. References
            are in the form ($sym_name).
            </summary>
            <param name="input">Text value, possibliy containing symbolic
            references of the form $(sym_name)</param>
            <returns>A nodeset containing the input with symbolic references replaced by their
            current values in the execution environment.  All other text is converted to text nodes
            at the proper locations in the nodeset. If the input string is enclosed entirely in curly braces,
            the input will be run through the JScript evaluator after the symbolic references are resolved.
            Example 1:
            input string: "xxx$(var1)yyy"
            If  the current value of $(var1) is the XML &lt;content/&gt;, the output will be the following nodeset
            XText("xxx),XElement("content"),XText("yyy")
            Example 2:
            input string:{$(x)+$(y)}
            If x is bound to the text node "1" and y is bound to the text node "2", the result will be...
            {1+2}
            ...which will be run throught the JScript processor, producing an ultimate result of 
            XText("3")
            </returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.PreprocessorEnvironment.IsDefined(System.String)">
            <summary>
            XSLT extension method that determines whether the given symbol has
            been defined in the preprocessor environment.
            </summary>
            <param name="symbolName"></param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.PreprocessorEnvironment.PopCall">
            <summary>
            Pop a frame from the Call stack.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.PreprocessorEnvironment.PopInclude">
            <summary>
            Pops the current item on the include stack
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.PreprocessorEnvironment.Call``1(System.Func{``0})">
            <summary>
            Convenience method to safely execute any code inside a 
            push/pop pair.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.PreprocessorEnvironment.PushCall">
            <summary>
            Push a frame onto the Call stack
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.PreprocessorEnvironment.PushInclude(System.String)">
            <summary>
            Loads the XML include at the given path and returns the XContainer representing it.
            The location is pushed onto the include stack so that any nested include directives can 
            be resolved relative to the path of the including file.
            </summary>
            <param name="href"></param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.PreprocessorEnvironment.ThrowInvalidMarkup(System.String)">
            <summary>
            XSLT extension method to halt processing based on a structural error
            in the markup.
            </summary>
            <param name="message"></param>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.PreprocessorEnvironment._Settings">
            <summary>
            Preprocessor settings
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.PreprocessorEnvironment.Fileset">
            <summary>
            Get the of all files seen by the preprocessor.  This includes the
            main file being processed as well as any included files.
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.PreprocessorEnvironment._DefaultNodeProcessor">
            <summary>
            Processor used for recursing into nested symbolic definitions.
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.PreprocessorSettings">
            <summary>
            	
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.PreprocessorSettings.ExplicitDeclarationRequired">
            <summary>
            Are explicit symbol declarations required?
            If true, it is an error to attempt to evaluate a symbol
            which has not been defined by the input file via the 
            <c>define</c> or <c>default</c> statement.
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.PreprocessorSettings.InitialDefinitions">
            <summary>
            Name/value pairs of variables which are turned into preprocessor
            definitions at global scope.  If <c>ExplicitDeclarationRequired</c> is true,
            these definitions may not be used.
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.PreprocessorSettings.NamesAreCaseSensitve">
            <summary>
            Should constant names be case-sensitive?
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.PreprocessorSettings.UseOsEnvironment">
            <summary>
            If true, operating system environment variables
            may be referenced as if they were declared by the 
            input file.  If ExplicitDeclarationRequired is true,
            this flag may not be used.
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.PreprocessorSettings.Namespace">
            <summary>
            XML Namespace to be used for built-in commands.
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.PreprocessorSettings.IgnoreWhitespace">
            <summary>
            Ignore semantically-insignificant whitespace
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.SymbolicDef">
            <summary>
            Represents a name bound to a constant value in
            the context of the preprocessor environment.
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.SymbolicDef.IsExplicitlyDefined">
            <summary>
            Was the constant defined explicitly in the input document?
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.SymbolicDef.Name">
            <summary>
            Constant name
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.SymbolicDef.Value">
            <summary>
            Constant value
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.SymbolicDef.StackFrame">
            <summary>
            Stack frame on which the definition lives.
            -1 is the system environment table, 
            0 is the top of the stack,
            1 is the next frame, etc...
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.Validation">
            <summary>
            XML Validation helpers
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.Validation.RequireAttributes(System.Xml.Linq.XElement,System.Xml.Linq.XName[])">
            <summary>
            Asserts that each of the given attributes exist on the given element.
            </summary>
            <param name="element">Element</param>
            <param name="attrNames">Names of attributes to check for</param>
            <exception cref="T:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.InvalidMarkupException">Thrown if one or more attributes are not present</exception>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.XHelpers">
            <summary>
            Extension methods for System.Xml.Linq
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.XHelpers.HasAttribute(System.Xml.Linq.XElement,System.Xml.Linq.XName)">
            <summary>
            Does the element have an attribute of the given name?
            </summary>
            <param name="element">element to check</param>
            <param name="attrName">attribute to check for</param>
            <returns>true/false</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.XHelpers.NextSiblingElement(System.Xml.Linq.XElement)">
            <summary>
            Returns the first sibling that follows the given element.
             </summary>
            <param name="element">Element whose sibling is returned</param>
            <returns>First following sibling element, or null if no siblings exist</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.XHelpers.ErrorContext(System.Xml.Linq.XObject)">
            <summary>
            Extracts file and line/position information from the given object, in displayable form,
            for use in error messages.
            </summary>
            <param name="obj">Xml object for whom to return the context</param>
            <returns>A string of the form "File: [file_path] line XXX, pos YYY"</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.XHelpers.GetAttributeValue(System.Xml.Linq.XElement,System.Xml.Linq.XName)">
            <summary>
            Returns the given element's named attribute value as a string 
            </summary>
            <param name="element">Element whose value is returned</param>
            <param name="attrName">Name of attribute to return</param>
            <returns>Attribute value, or empty string if no such attribute exists</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.XHelpers.GetTextValue(System.Collections.Generic.IEnumerable{System.Xml.Linq.XNode})">
            <summary>
            Returns the concatenated text values of the given nodeset
            </summary>
            <param name="nodes">Nodeset whose values are returned</param>
            <returns>Untrimmed, concatenated text values of the given nodeset</returns>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.XmlNs">
            <summary>
            	
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.XmlNs.PreProcessor">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.ConsoleRunnerArguments">
            <summary>
            	
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.ConsoleRunnerArguments.DEFAULT_CONFIG_PATH">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.ConsoleRunnerArguments.UseRemoting">
            <summary>
            Gets or sets the use remoting.	
            </summary>
            <value>The use remoting.</value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.ConsoleRunnerArguments.Project">
            <summary>
            Gets or sets the project.	
            </summary>
            <value>The project.</value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.ConsoleRunnerArguments.ConfigFile">
            <summary>
            Gets or sets the config file.	
            </summary>
            <value>The config file.</value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.ConsoleRunnerArguments.ValidateConfigOnly">
            <summary>
            Gets or sets the validate config only.	
            </summary>
            <value>The validate config only.</value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.ConsoleRunnerArguments.ShowHelp">
            <summary>
            Gets or sets the show help.	
            </summary>
            <value>The show help.</value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.ConsoleRunnerArguments.LaunchDebugger">
            <summary>
            Gets or sets the launch debugger.	
            </summary>
            <value>The launch debugger.</value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.ConsoleRunnerArguments.Logging">
            <summary>
            Gets or sets the logging.	
            </summary>
            <value>The logging.</value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.ConsoleRunnerArguments.PauseOnError">
            <summary>
            Gets or sets the pause on error.	
            </summary>
            <value>The pause on error.</value>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Config.CachingConfigurationService">
            <summary>
            	
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Config.IConfigurationService">
            <summary>
            	
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.IConfigurationService.Load">
            <summary>
            Loads this instance.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.IConfigurationService.Save(ThoughtWorks.CruiseControl.Core.IConfiguration)">
            <summary>
            Saves the specified configuration.	
            </summary>
            <param name="configuration">The configuration.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.IConfigurationService.AddConfigurationUpdateHandler(ThoughtWorks.CruiseControl.Core.Config.ConfigurationUpdateHandler)">
            <summary>
            Adds the configuration update handler.	
            </summary>
            <param name="handler">The handler.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.IConfigurationService.AddConfigurationSubfileLoadedHandler(ThoughtWorks.CruiseControl.Core.Config.ConfigurationSubfileLoadedHandler)">
            <summary>
            Adds the configuration subfile loaded handler.	
            </summary>
            <param name="handler">The handler.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.CachingConfigurationService.#ctor(ThoughtWorks.CruiseControl.Core.Config.IConfigurationService)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Config.CachingConfigurationService"/> class.	
            </summary>
            <param name="slaveService">The slave service.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.CachingConfigurationService.Load">
            <summary>
            Loads this instance.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.CachingConfigurationService.Save(ThoughtWorks.CruiseControl.Core.IConfiguration)">
            <summary>
            Saves the specified configuration.	
            </summary>
            <param name="configuration">The configuration.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.CachingConfigurationService.AddConfigurationUpdateHandler(ThoughtWorks.CruiseControl.Core.Config.ConfigurationUpdateHandler)">
            <summary>
            Adds the configuration update handler.	
            </summary>
            <param name="handler">The handler.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.CachingConfigurationService.AddConfigurationSubfileLoadedHandler(ThoughtWorks.CruiseControl.Core.Config.ConfigurationSubfileLoadedHandler)">
            <summary>
            Adds the configuration subfile loaded handler.	
            </summary>
            <param name="handler">The handler.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.CachingConfigurationService.InvalidateCache">
            <summary>
            Invalidates the cache.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Config.DefaultQueueConfiguration">
            <summary>
            Configure the behaviour of the build queues.
            </summary>
            <title>Queue Configuration Element</title>
            <version>1.4.2</version>
            <example>
            <code title="Full Example">
            &lt;queue name="Q1" duplicates="UseFirst" lockqueues="Q2,Q3" /&gt;
            </code>
            <para>See the notes for additional examples.</para>
            </example>
            <remarks>
            <heading>Duplicate Handling</heading>
            <para>
            There are three different settings that can be used to specify how force build requests should be handled.
            </para>
            <para>
            The default behaviour is to not allow force build requests to update the queue and use the first request that was added.
            </para>
            <para>
            The following example shows how to explicitly configure the default behavior.
            </para>
            <code>
            &lt;cruisecontrol&gt;
              &lt;queue name="Q1" duplicates="UseFirst"/&gt;
              &lt;project name="MyFirstProject" queue="Q1" queuePriority="1"&gt;
                ...
              &lt;/project&gt;
            &lt;/cruisecontrol&gt;
            </code>
            <para>
            The following example shows how to configure a queue so that force build requests will replace existing requests of the interval trigger without changing the position of the request in the queue.
            </para>
            <code>
            &lt;cruisecontrol&gt;
              &lt;queue name="Q1" duplicates="ApplyForceBuildsReplace"/&gt;
              &lt;project name="MyFirstProject" queue="Q1" queuePriority="1"&gt;
                ...
              &lt;/project&gt;
            &lt;/cruisecontrol&gt;
            </code>
            <para>
            The following example shows how to configure a queue so that force build requests will remove existing requests of the interval trigger and re-add a force build request. This is changing the position of the request in the queue.
            </para>
            <code>
            &lt;cruisecontrol&gt;
              &lt;queue name="Q1" duplicates="ApplyForceBuildsReAdd"/&gt;
              &lt;project name="MyFirstProject" queue="Q1" queuePriority="1"&gt;
                ...
              &lt;/project&gt;
            &lt;/cruisecontrol&gt;
            </code>
            <heading>Locking</heading>
            <para>
            The following example shows how to configure two queues, Q1 and Q2, that acquire a lock against each other. That means that while the queue Q1 is building a project the queue Q2 is locked. While Q2 is building Q1 is locked. To specify more than one queue that should be locked use commas to separate the queue names within the lockqueues attribute. Of course the lockqueues attribute can be used together with the duplicates attribute explained above.
            </para>
            <code>
            &lt;cruisecontrol&gt;
              &lt;queue name="Q1" lockqueues="Q2"/&gt;
              &lt;queue name="Q2" lockqueues="Q1"/&gt;
              &lt;project name="MyFirstProject" queue="Q1" queuePriority="1"&gt;
                ...
              &lt;/project&gt;
              &lt;project name="MySecondProject" queue="Q2" queuePriority="1"&gt;
                ...
              &lt;/project&gt;
            &lt;/cruisecontrol&gt;
            </code>
            </remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Config.IQueueConfiguration">
            <summary>
            Defines the configuration settings for a queue.
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Config.IQueueConfiguration.Name">
            <summary>
            The name of the queue.
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Config.IQueueConfiguration.HandlingMode">
            <summary>
            Defines how duplicates should be handled.
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Config.IQueueConfiguration.LockQueueNames">
            <summary>
            A list of the names of any other queues which should be locked when a project in this queue is building.
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Config.IQueueConfiguration.Projects">
            <summary>
            Gets or sets the projects.
            </summary>
            <value>The projects in this queue.</value>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Config.IConfigurationValidation">
            <summary>
            Allows a configuration item to perform any internal validation checks.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.IConfigurationValidation.Validate(ThoughtWorks.CruiseControl.Core.IConfiguration,ThoughtWorks.CruiseControl.Core.Config.ConfigurationTrace,ThoughtWorks.CruiseControl.Core.Config.IConfigurationErrorProcesser)">
            <summary>
            Checks the internal validation of the item.
            </summary>
            <param name="configuration">The entire configuration.</param>
            <param name="parent">The parent item for the item being validated.</param>
            <param name="errorProcesser">The error processer to use.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.DefaultQueueConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Config.DefaultQueueConfiguration"/> class.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.DefaultQueueConfiguration.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Config.DefaultQueueConfiguration"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.DefaultQueueConfiguration.Validate(ThoughtWorks.CruiseControl.Core.IConfiguration,ThoughtWorks.CruiseControl.Core.Config.ConfigurationTrace,ThoughtWorks.CruiseControl.Core.Config.IConfigurationErrorProcesser)">
            <summary>
            Checks the internal validation of the item.
            </summary>
            <param name="configuration">The entire configuration.</param>
            <param name="parent">The parent item for the item being validated.</param>
            <param name="errorProcesser"></param>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Config.DefaultQueueConfiguration.Name">
            <summary>
            The name of the queue.
            </summary>
            <default>n/a</default>
            <version>1.4.2</version>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Config.DefaultQueueConfiguration.HandlingMode">
            <summary>
            Defines how duplicates should be handled.
            </summary>
            <default>UseFirst</default>
            <version>1.4.2</version>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Config.DefaultQueueConfiguration.LockQueueNames">
            <summary>
            A comma sperated list of queue names that the queue should acquire a lock against.
            </summary>
            <default>none</default>
            <version>1.4.2</version>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Config.DefaultQueueConfiguration.Projects">
            <summary>
            The list of projects for the queue.
            </summary>
            <default>none</default>
            <version>1.6</version>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Config.IConfigurationErrorProcesser">
            <summary>
            Defines how to handle errors and warnings from the configuration file.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.IConfigurationErrorProcesser.ProcessError(System.String)">
            <summary>
            Process an error message.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.IConfigurationErrorProcesser.ProcessError(System.String,System.Object[])">
            <summary>
            Process an error message.
            </summary>
            <param name="message">The error message.</param>
            <param name="args">arguments of the message</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.IConfigurationErrorProcesser.ProcessError(System.Exception)">
            <summary>
            Process an exception.
            </summary>
            <param name="error">The exception.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.IConfigurationErrorProcesser.ProcessWarning(System.String)">
            <summary>
            Process a warning message.
            </summary>
            <param name="message">The warning message.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.IConfigurationErrorProcesser.ProcessWarning(System.String,System.Object[])">
            <summary>
            Process a warning message.
            </summary>
            <param name="message">The warning message.</param>
            <param name="args">arguments of the message</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.IConfigurationErrorProcesser.ProcessUnhandledNode(System.Xml.XmlNode)">
            <summary>
            Process an unhandled node.
            </summary>
            <param name="node">The unhandled node.</param>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.IDataStore">
            <summary>
            Defines a mechanism for storing data from a project.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IDataStore.StoreProjectSnapshot(ThoughtWorks.CruiseControl.Core.IIntegrationResult,ThoughtWorks.CruiseControl.Remote.ItemStatus)">
            <summary>
            Stores a snapshot of a project build.
            </summary>
            <param name="result">The result that the snapshot is for.</param>
            <param name="snapshot">The project snapshot.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IDataStore.LoadProjectSnapshot(ThoughtWorks.CruiseControl.Core.IProject,System.String)">
            <summary>
            Loads the project snapshot for a build.
            </summary>
            <param name="project">The project.</param>
            <param name="buildName">Name of the build.</param>
            <returns>The project snapshot.</returns>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.INetReflectorConfigurationReader">
            <summary>
            Performs a read of a config file using NetReflector.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.INetReflectorConfigurationReader.Read(System.Xml.XmlDocument,ThoughtWorks.CruiseControl.Core.Config.IConfigurationErrorProcesser)">
            <summary>
            Reads an XML config document.
            </summary>
            <param name="document">The document to read.</param>
            <param name="errorProcesser">The error processer to use (can be null).</param>
            <returns>The loaded configuration.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.INetReflectorConfigurationReader.ParseElement(System.Xml.XmlNode)">
            <summary>
            Parses an element.
            </summary>
            <param name="node">The element to parse.</param>
            <returns>The parsed element.</returns>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Config.QueueDuplicateHandlingMode">
            <summary>
            Defines the different ways duplicates can be handled in a queue.
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Config.QueueDuplicateHandlingMode.UseFirst">
            <summary>
            If a duplicate is found, then it should be ignored.
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Config.QueueDuplicateHandlingMode.ApplyForceBuildsReAdd">
            <summary>
            If a duplicate is found and it is not a force build, then the initial item should be removed and the 
            new item added to the end of the queue (position of the item may change.)
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Config.QueueDuplicateHandlingMode.ApplyForceBuildsReAddTop">
            <summary>
            If a duplicate is found and it is not a force build, then the initial item should be removed and the 
            new item added to the beginning of the queue (position of the item may change.)
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Config.QueueDuplicateHandlingMode.ApplyForceBuildsReplace">
            <summary>
            If a duplicate is found and it is not a force build, then the initial item should be replaced with
            the new item (position of the item won't change).
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Config.Configuration">
            <summary>
            The configuration for a server.
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.IConfiguration">
            <summary>
            The configuration for a server.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IConfiguration.FindQueueConfiguration(System.String)">
            <summary>
            Finds the queue configuration by name.
            </summary>
            <param name="name">The name of the configuration to find.</param>
            <returns>The queue configuration if found, or a default instance of the queue configuration.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IConfiguration.AddProject(ThoughtWorks.CruiseControl.Core.IProject)">
            <summary>
            Adds a project.
            </summary>
            <param name="project">The project.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IConfiguration.DeleteProject(System.String)">
            <summary>
            Deletes a project.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IConfiguration.Projects">
            <summary>
            Gets the projects.
            </summary>
            <value>The projects.</value>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IConfiguration.QueueConfigurations">
            <summary>
            Store any custom queue configurations.
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IConfiguration.SecurityManager">
            <summary>
            Store the security manager that is being used.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.Configuration.AddProject(ThoughtWorks.CruiseControl.Core.IProject)">
            <summary>
            Adds a project.
            </summary>
            <param name="project">The project.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.Configuration.FindQueueConfiguration(System.String)">
            <summary>
            Finds the queue configuration by name.
            </summary>
            <param name="name">The name of the configuration to find.</param>
            <returns>The queue configuration if found, or a default instance of the queue configuration.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.Configuration.DeleteProject(System.String)">
            <summary>
            Deletes a project.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Config.Configuration.SecurityManager">
            <summary>
            Store the security manager that is being used.
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Config.Configuration.QueueConfigurations">
            <summary>
            Store any custom queue configurations.
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Config.Configuration.Projects">
            <summary>
            Gets the projects.
            </summary>
            <value>The projects.</value>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Config.ConfigurationException">
            <summary>
            Typed exception for use within CruiseControl configuration.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.ConfigurationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Config.ConfigurationException"/> class.	
            </summary>
            <param name="message">The message.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.ConfigurationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Config.ConfigurationException"/> class.	
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.ConfigurationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Config.ConfigurationException"/> class.	
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Config.ConfigurationFileMissingException">
            <summary>
            Exception thrown if configuration file (ccnet.config) could not be found.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.ConfigurationFileMissingException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Config.ConfigurationFileMissingException"/> class.	
            </summary>
            <param name="message">The message.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.ConfigurationFileMissingException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Config.ConfigurationFileMissingException"/> class.	
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.ConfigurationFileMissingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Config.ConfigurationFileMissingException"/> class.	
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Config.CruiseControlConfigSectionHandler">
            <summary>
            	
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.CruiseControlConfigSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            Creates the specified parent.	
            </summary>
            <param name="parent">The parent.</param>
            <param name="configContext">The config context.</param>
            <param name="section">The section.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Config.DefaultConfigurationFileLoader">
            <summary>
            	
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Config.IConfigurationFileLoader">
            <summary>
            	
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.IConfigurationFileLoader.Load(System.IO.FileInfo)">
            <summary>
            Loads the specified file.	
            </summary>
            <param name="file">The file.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.IConfigurationFileLoader.AddSubfileLoadedHandler(ThoughtWorks.CruiseControl.Core.Config.ConfigurationSubfileLoadedHandler)">
            <summary>
            Adds the subfile loaded handler.	
            </summary>
            <param name="handler">The handler.</param>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Config.DefaultConfigurationFileLoader.XsdSchemaResourceName">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Config.DefaultConfigurationFileLoader.PreprocessorXsltResourceName">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.DefaultConfigurationFileLoader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Config.DefaultConfigurationFileLoader"/> class.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.DefaultConfigurationFileLoader.#ctor(ThoughtWorks.CruiseControl.Core.INetReflectorConfigurationReader)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Config.DefaultConfigurationFileLoader"/> class.	
            </summary>
            <param name="reader">The reader.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.DefaultConfigurationFileLoader.Load(System.IO.FileInfo)">
            <summary>
            Loads the specified config file.	
            </summary>
            <param name="configFile">The config file.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.DefaultConfigurationFileLoader.AddSubfileLoadedHandler(ThoughtWorks.CruiseControl.Core.Config.ConfigurationSubfileLoadedHandler)">
            <summary>
            Adds the subfile loaded handler.	
            </summary>
            <param name="handler">The handler.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.DefaultConfigurationFileLoader.LoadConfiguration(System.IO.FileInfo)">
            <summary>
            Loads the configuration.	
            </summary>
            <param name="configFile">The config file.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Config.DefaultConfigurationFileSaver">
            <summary>
            	
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Config.IConfigurationFileSaver">
            <summary>
            	
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.IConfigurationFileSaver.Save(ThoughtWorks.CruiseControl.Core.IConfiguration,System.IO.FileInfo)">
            <summary>
            Saves the specified configuration.	
            </summary>
            <param name="configuration">The configuration.</param>
            <param name="file">The file.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.DefaultConfigurationFileSaver.#ctor(ThoughtWorks.CruiseControl.Core.IProjectSerializer)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Config.DefaultConfigurationFileSaver"/> class.	
            </summary>
            <param name="projectSerializer">The project serializer.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.DefaultConfigurationFileSaver.Save(ThoughtWorks.CruiseControl.Core.IConfiguration,System.IO.FileInfo)">
            <summary>
            Saves the specified config.	
            </summary>
            <param name="config">The config.</param>
            <param name="configFile">The config file.</param>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Config.FileConfigurationService">
            <summary>
            	
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.FileConfigurationService.#ctor(ThoughtWorks.CruiseControl.Core.Config.IConfigurationFileLoader,ThoughtWorks.CruiseControl.Core.Config.IConfigurationFileSaver,System.IO.FileInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Config.FileConfigurationService"/> class.	
            </summary>
            <param name="loader">The loader.</param>
            <param name="saver">The saver.</param>
            <param name="configFile">The config file.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.FileConfigurationService.Load">
            <summary>
            Loads this instance.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.FileConfigurationService.Save(ThoughtWorks.CruiseControl.Core.IConfiguration)">
            <summary>
            Saves the specified configuration.	
            </summary>
            <param name="configuration">The configuration.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.FileConfigurationService.AddConfigurationUpdateHandler(ThoughtWorks.CruiseControl.Core.Config.ConfigurationUpdateHandler)">
            <summary>
            Adds the configuration update handler.	
            </summary>
            <param name="handler">The handler.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.FileConfigurationService.AddConfigurationSubfileLoadedHandler(ThoughtWorks.CruiseControl.Core.Config.ConfigurationSubfileLoadedHandler)">
            <summary>
            Adds the configuration subfile loaded handler.	
            </summary>
            <param name="handler">The handler.</param>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Config.FileWatcherConfigurationService">
            <summary>
            	
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.FileWatcherConfigurationService.#ctor(ThoughtWorks.CruiseControl.Core.Config.IConfigurationService,ThoughtWorks.CruiseControl.Core.Util.IFileWatcher)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Config.FileWatcherConfigurationService"/> class.	
            </summary>
            <param name="decoratedService">The decorated service.</param>
            <param name="fileWatcher">The file watcher.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.FileWatcherConfigurationService.Load">
            <summary>
            Loads this instance.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.FileWatcherConfigurationService.Save(ThoughtWorks.CruiseControl.Core.IConfiguration)">
            <summary>
            Saves the specified configuration.	
            </summary>
            <param name="configuration">The configuration.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.FileWatcherConfigurationService.AddConfigurationUpdateHandler(ThoughtWorks.CruiseControl.Core.Config.ConfigurationUpdateHandler)">
            <summary>
            Adds the configuration update handler.	
            </summary>
            <param name="handler">The handler.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.FileWatcherConfigurationService.AddConfigurationSubfileLoadedHandler(ThoughtWorks.CruiseControl.Core.Config.ConfigurationSubfileLoadedHandler)">
            <summary>
            Adds the configuration subfile loaded handler.	
            </summary>
            <param name="handler">The handler.</param>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Config.ConfigurationUpdateHandler">
            <summary>
            	
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Config.ConfigurationSubfileLoadedHandler">
            <summary>
            	
            </summary>
            <param name="subfile_uri">The subfile_uri.</param>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Config.NetReflectorConfigurationReader">
            <summary>
            Load a configuration file using NetReflector.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.NetReflectorConfigurationReader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Config.NetReflectorConfigurationReader"/> class.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.NetReflectorConfigurationReader.Read(System.Xml.XmlDocument,ThoughtWorks.CruiseControl.Core.Config.IConfigurationErrorProcesser)">
            <summary>
            Reads an XML config document.
            </summary>
            <param name="document">The document to read.</param>
            <param name="errorProcesser">The error processer to use (can be null).</param>
            <returns>The loaded configuration.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.NetReflectorConfigurationReader.ParseElement(System.Xml.XmlNode)">
            <summary>
            Parses an element.
            </summary>
            <param name="node">The element to parse.</param>
            <returns>The parsed element.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.NetReflectorConfigurationReader.LoadAndValidateQueue(ThoughtWorks.CruiseControl.Core.Config.Configuration,System.Object)">
            <summary>
            Loads and validates a queue.
            </summary>
            <param name="configuration">The configuration.</param>
            <param name="loadedItem">The loaded item.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.NetReflectorConfigurationReader.ValidateConfiguration(ThoughtWorks.CruiseControl.Core.Config.Configuration,ThoughtWorks.CruiseControl.Core.Config.IConfigurationErrorProcesser)">
            <summary>
            Validate the internal consistency of the configuration.
            </summary>
            <param name="value">The configuration to check.</param>
            <param name="errorProcesser">The error processer to use.</param>
            <remarks>
            <para>
            This will add the following internal consistency checks:
            </para>
            <list type="bullet">
            <item>
            <description>Each queue definitition is used by at least one project.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.Utils">
            <summary>
            Internal static utility methods
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.Utils.CreateWriter(System.String)">
            <summary>
            Create a XML writer with the following settings:
            Indent = true;
            UTF-8 encoding
            Auto conformance level
            NewlineChars = "\n"
            NewlineHandling = Replace
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.Utils.ThrowAppException(System.String,System.Object[])">
            <summary>
            Throws an ApplicationException with a message constructed from the
            given formatting arguments
            </summary>
            <param name="fmt"></param>
            <param name="args"></param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.Utils.ThrowException(ThoughtWorks.CruiseControl.Core.Config.Preprocessor.ExceptionFactory,System.String,System.Object[])">
            <summary>
            Construct an exception from the given factory, using the message constructed from the given
            formatting arguments.
            </summary>
            <param name="factory"></param>
            <param name="fmt"></param>
            <param name="args"></param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.Utils.TransformToDocument(System.Xml.XmlReader,System.Xml.Xsl.XslCompiledTransform,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlResolver)">
            <summary>
            Transforms <paramref name="input"/> using the supplied XSLT and associated support objects.  Result is returned as
            a XmlDocument DOM object.
            </summary>
            <param name="input">Document to transform</param>
            <param name="transform">The XSLT to apply</param>
            <param name="args">The XSLT arguments</param>
            <param name="resolver">The XmlResolver used during the transform</param>
            <returns>The transformed document as a DOM</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.Utils.GetAssemblyResourceStream(System.Type,System.String)">
            <summary>
            Returns manifest resource stream qualified by the given type and name.
            </summary>
            <param name="type">Qualifying type</param>
            <param name="resourceName">Resource name</param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.Preprocessor.Utils.GetAssemblyResourceStream(System.String)">
            <summary>
            Returns the manifest resource stream with the given name.
            </summary>
            <param name="resourceName"></param>
            <returns></returns>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Config.ServerConfiguration">
            <summary>
            The configuration options for the server.
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Config.ServerConfiguration.Extensions">
            <summary>
            The extensions to load.
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Config.ServerConfigurationHandler">
            <summary>
            Provides additional configuration settings for the server.
            </summary>
            <remarks>
            Currently this only retrieves a list of type names, but it could be extended in future
            to load additional settings (perhaps in the same way as the custom builders work).
            </remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.ServerConfigurationHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            Retrieve the list of extensions to load.
            </summary>
            <param name="parent">The parent.</param>
            <param name="configContext">The context.</param>
            <param name="section">The section that is being loaded.</param>
            <returns>An array of strings containing the type names.</returns>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Config.XmlValidatingLoader">
            <summary>
            	
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.XmlValidatingLoader.#ctor(System.Xml.XmlReader)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Config.XmlValidatingLoader"/> class.	
            </summary>
            <param name="innerReader">The inner reader.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.XmlValidatingLoader.AddSchema(System.Xml.Schema.XmlSchema)">
            <summary>
            Adds the schema.	
            </summary>
            <param name="schema">The schema.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.XmlValidatingLoader.Load">
            <summary>
            Loads this instance.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="E:ThoughtWorks.CruiseControl.Core.Config.XmlValidatingLoader.ValidationEventHandler">
            <summary>
            Occurs when [validation event handler].	
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Config.XslFilesSectionHandler">
            <summary>
            	
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Config.XslFilesSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            Creates the specified parent.	
            </summary>
            <param name="parent">The parent.</param>
            <param name="configContext">The config context.</param>
            <param name="section">The section.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.ConsoleEventHandler">
            <summary>
            Intercepts events raised by the command console.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.ConsoleEventHandler.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.ConsoleEventHandler"/> class.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="E:ThoughtWorks.CruiseControl.Core.ConsoleEventHandler.OnConsoleEvent">
            <summary>
            Occurs when [on console event].	
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.ConsoleRunner">
            <summary>
            	
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.ConsoleRunner.#ctor(ThoughtWorks.CruiseControl.Core.ConsoleRunnerArguments,ThoughtWorks.CruiseControl.Core.ICruiseServerFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.ConsoleRunner"/> class.	
            </summary>
            <param name="args">The args.</param>
            <param name="serverFactory">The server factory.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.ConsoleRunner.Run">
            <summary>
            Runs this instance.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.ConsoleRunner.Stop">
            <summary>
            Stops this instance.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.ConsoleRunner.ValidateResponse(ThoughtWorks.CruiseControl.Remote.Messages.Response)">
            <summary>
            Validates that the request processed ok.
            </summary>
            <param name="value">The response to check.</param>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.CruiseControlRemotingException">
            <summary>
            	
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseControlRemotingException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.CruiseControlRemotingException"/> class.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseControlRemotingException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.CruiseControlRemotingException"/> class.	
            </summary>
            <param name="message">The message.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseControlRemotingException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.CruiseControlRemotingException"/> class.	
            </summary>
            <param name="message">The message.</param>
            <param name="url">The URL.</param>
            <param name="e">The e.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseControlRemotingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.CruiseControlRemotingException"/> class.	
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.CruiseManager">
            <summary>
            Exposes project management functionality (start, stop, status) via remoting.  
            The CCTray is one such example of an application that may make use of this remote interface.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseManager.#ctor(ThoughtWorks.CruiseControl.Remote.ICruiseServer)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.CruiseManager"/> class.	
            </summary>
            <param name="cruiseServer">The cruise server.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseManager.InitializeLifetimeService">
            <summary>
            Initializes the lifetime service.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseManager.GetProjectStatus">
            <summary>
            Gets information about the last build status, current activity and project name.
            for all projects on a cruise server
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseManager.ForceBuild(System.String,System.String)">
            <summary>
            Forces a build for the named project.
            </summary>
            <param name="projectName">project to force</param>
            <param name="enforcerName">ID of trigger/action forcing the build</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseManager.AbortBuild(System.String,System.String)">
            <summary>
            Aborts the build.	
            </summary>
            <param name="projectName">Name of the project.</param>
            <param name="enforcerName">Name of the enforcer.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseManager.Request(System.String,ThoughtWorks.CruiseControl.Remote.IntegrationRequest)">
            <summary>
            Requests the specified project name.	
            </summary>
            <param name="projectName">Name of the project.</param>
            <param name="integrationRequest">The integration request.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseManager.Start(System.String)">
            <summary>
            Starts the specified project.	
            </summary>
            <param name="project">The project.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseManager.Stop(System.String)">
            <summary>
            Stops the specified project.	
            </summary>
            <param name="project">The project.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseManager.SendMessage(System.String,ThoughtWorks.CruiseControl.Remote.Message)">
            <summary>
            Sends the message.	
            </summary>
            <param name="projectName">Name of the project.</param>
            <param name="message">The message.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseManager.WaitForExit(System.String)">
            <summary>
            Waits for exit.	
            </summary>
            <param name="projectName">Name of the project.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseManager.CancelPendingRequest(System.String)">
            <summary>
            Cancel a pending project integration request from the integration queue.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseManager.GetCruiseServerSnapshot">
            <summary>
            Gets the projects and integration queues snapshot from this server.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseManager.GetLatestBuildName(System.String)">
            <summary>
            Returns the name of the most recent build for the specified project
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseManager.GetBuildNames(System.String)">
            <summary>
            Returns the names of all builds for the specified project, sorted s.t. the newest build is first in the array
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseManager.GetMostRecentBuildNames(System.String,System.Int32)">
            <summary>
            Returns the names of the buildCount most recent builds for the specified project, sorted s.t. the newest build is first in the array
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseManager.GetLog(System.String,System.String)">
            <summary>
            Returns the build log contents for requested project and build name
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseManager.GetServerLog">
            <summary>
            Returns a log of recent build server activity. How much information that is returned is configured on the build server.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseManager.GetServerLog(System.String)">
            <summary>
            Returns a log of recent build server activity for a specific project. How much information that is returned is configured on the build server.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseManager.GetServerVersion">
            <summary>
            Returns the version of the server
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseManager.AddProject(System.String)">
            <summary>
            Adds a project to the server
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseManager.DeleteProject(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Deletes the specified project from the server
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseManager.GetProject(System.String)">
            <summary>
            Returns the serialized form of the requested project from the server
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseManager.UpdateProject(System.String,System.String)">
            <summary>
            Updates the selected project on the server
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseManager.GetExternalLinks(System.String)">
            <summary>
            Gets the external links.	
            </summary>
            <param name="projectName">Name of the project.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseManager.GetArtifactDirectory(System.String)">
            <summary>
            Gets the artifact directory.	
            </summary>
            <param name="projectName">Name of the project.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseManager.GetStatisticsDocument(System.String)">
            <summary>
            Gets the statistics document.	
            </summary>
            <param name="projectName">Name of the project.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseManager.GetModificationHistoryDocument(System.String)">
            <summary>
            Gets the modification history document.	
            </summary>
            <param name="projectName">Name of the project.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseManager.GetRSSFeed(System.String)">
            <summary>
            Gets the RSS feed.	
            </summary>
            <param name="projectName">Name of the project.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseManager.GetFreeDiskSpace">
            <summary>
            Retrieves the amount of free disk space.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseManager.RetrieveFileTransfer(System.String,System.String)">
            <summary>
            Retrieve a file transfer object.
            </summary>
            <param name="project">The project to retrieve the file for.</param>
            <param name="fileName">The name of the file.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseManager.GenerateServerRequest">
            <summary>
            Generate a server request.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseManager.GenerateProjectRequest(System.String)">
            <summary>
            Generate a project request.
            </summary>
            <param name="projectName"></param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseManager.ValidateResponse(ThoughtWorks.CruiseControl.Remote.Messages.Response)">
            <summary>
            Validate the response from the server.
            </summary>
            <param name="response"></param>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.CruiseManager.ActualServer">
            <summary>
            Gets the actual server.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.CruiseServer">
            <summary>
            The Continuous Integration server.
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.CruiseServerEventsBase">
            <summary>
            Provides a base implementation of all the events required for <see cref="T:ThoughtWorks.CruiseControl.Remote.ICruiseServer"/>.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServerEventsBase.FireProjectStarting(System.String)">
            <summary>
            Fires the ProjectStarting event.
            </summary>
            <param name="projectName">The name of the project.</param>
            <returns>Whether this event was canceled or not.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServerEventsBase.FireProjectStarted(System.String)">
            <summary>
            Fires the ProjectStarted event.
            </summary>
            <param name="projectName">The name of the project.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServerEventsBase.FireProjectStopping(System.String)">
            <summary>
            Fires the ProjectStopping event.
            </summary>
            <param name="projectName">The name of the project.</param>
            <returns>Whether this event was canceled or not.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServerEventsBase.FireProjectStopped(System.String)">
            <summary>
            Fires the ProjectStopped event.
            </summary>
            <param name="projectName">The name of the project.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServerEventsBase.FireForceBuildReceived(System.String,System.String)">
            <summary>
            Fires the ForceBuildReceived event.
            </summary>
            <param name="projectName">The name of the project.</param>
            <param name="enforcerName">The name of the person forcing the build.</param>
            <returns>Whether this event was canceled or not.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServerEventsBase.FireForceBuildProcessed(System.String,System.String)">
            <summary>
            Fires the ForceBuildProcessed event.
            </summary>
            <param name="projectName">The name of the project.</param>
            <param name="enforcerName">The name of the person forcing the build.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServerEventsBase.FireAbortBuildReceived(System.String,System.String)">
            <summary>
            Fires the AbortBuildReceived event.
            </summary>
            <param name="projectName">The name of the project.</param>
            <param name="enforcerName">The name of the person aborting the build.</param>
            <returns>Whether this event was canceled or not.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServerEventsBase.FireAbortBuildProcessed(System.String,System.String)">
            <summary>
            Fires the AbortBuildProcessed event.
            </summary>
            <param name="projectName">The name of the project.</param>
            <param name="enforcerName">The name of the person aborting the build.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServerEventsBase.FireSendMessageReceived(System.String,ThoughtWorks.CruiseControl.Remote.Message)">
            <summary>
            Fires the SendMessageReceived event.
            </summary>
            <param name="projectName">The name of the project.</param>
            <param name="message">The message to be sent.</param>
            <returns>Whether this event was canceled or not.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServerEventsBase.FireSendMessageProcessed(System.String,ThoughtWorks.CruiseControl.Remote.Message)">
            <summary>
            Fires the SendMessageProcessed event.
            </summary>
            <param name="projectName">The name of the project.</param>
            <param name="message">The message that was sent.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServerEventsBase.FireIntegrationStarted(ThoughtWorks.CruiseControl.Remote.IntegrationRequest,System.String)">
            <summary>
            Fires the IntegrationStarted event.
            </summary>
            <param name="request">The integration request.</param>
            <param name="projectName"></param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServerEventsBase.FireIntegrationCompleted(ThoughtWorks.CruiseControl.Remote.IntegrationRequest,System.String,ThoughtWorks.CruiseControl.Remote.IntegrationStatus)">
            <summary>
            Fires the IntegrationCompleted event.
            </summary>
            <param name="request">The integration request.</param>
            <param name="projectName">The name of the project.</param>
            <param name="status">The outcome of the integration.</param>
        </member>
        <member name="E:ThoughtWorks.CruiseControl.Core.CruiseServerEventsBase.ProjectStarting">
            <summary>
            A project is starting.
            </summary>
        </member>
        <member name="E:ThoughtWorks.CruiseControl.Core.CruiseServerEventsBase.ProjectStarted">
            <summary>
            A project has started.
            </summary>
        </member>
        <member name="E:ThoughtWorks.CruiseControl.Core.CruiseServerEventsBase.ProjectStopping">
            <summary>
            A project is stopping.
            </summary>
        </member>
        <member name="E:ThoughtWorks.CruiseControl.Core.CruiseServerEventsBase.ProjectStopped">
            <summary>
            A project has stopped.
            </summary>
        </member>
        <member name="E:ThoughtWorks.CruiseControl.Core.CruiseServerEventsBase.ForceBuildReceived">
            <summary>
            A force build has been received.
            </summary>
        </member>
        <member name="E:ThoughtWorks.CruiseControl.Core.CruiseServerEventsBase.ForceBuildProcessed">
            <summary>
            A force build has been processed.
            </summary>
        </member>
        <member name="E:ThoughtWorks.CruiseControl.Core.CruiseServerEventsBase.AbortBuildReceived">
            <summary>
            An abort build has been received.
            </summary>
        </member>
        <member name="E:ThoughtWorks.CruiseControl.Core.CruiseServerEventsBase.AbortBuildProcessed">
            <summary>
            An abort build has been processed.
            </summary>
        </member>
        <member name="E:ThoughtWorks.CruiseControl.Core.CruiseServerEventsBase.SendMessageReceived">
            <summary>
            A send message has been received.
            </summary>
        </member>
        <member name="E:ThoughtWorks.CruiseControl.Core.CruiseServerEventsBase.SendMessageProcessed">
            <summary>
            A send message has been processed.
            </summary>
        </member>
        <member name="E:ThoughtWorks.CruiseControl.Core.CruiseServerEventsBase.IntegrationStarted">
            <summary>
            A project integrator is starting an integration.
            </summary>
        </member>
        <member name="E:ThoughtWorks.CruiseControl.Core.CruiseServerEventsBase.IntegrationCompleted">
            <summary>
            A project integrator has completed an integration.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServer.#ctor(ThoughtWorks.CruiseControl.Core.Config.IConfigurationService,ThoughtWorks.CruiseControl.Core.IProjectIntegratorListFactory,ThoughtWorks.CruiseControl.Core.IProjectSerializer,ThoughtWorks.CruiseControl.Core.State.IProjectStateManager,ThoughtWorks.CruiseControl.Core.Util.IFileSystem,ThoughtWorks.CruiseControl.Core.Util.IExecutionEnvironment,System.Collections.Generic.List{ThoughtWorks.CruiseControl.Remote.ExtensionConfiguration})">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.CruiseServer"/> class.	
            </summary>
            <param name="configurationService">The configuration service.</param>
            <param name="projectIntegratorListFactory">The project integrator list factory.</param>
            <param name="projectSerializer">The project serializer.</param>
            <param name="stateManager">The state manager.</param>
            <param name="fileSystem">The file system.</param>
            <param name="executionEnvironment">The execution environment.</param>
            <param name="extensionList">The extension list.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServer.InitialiseServices">
            <summary>
            Initialise the default services that are provided.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServer.Start">
            <summary>
            Start the server.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServer.Start(ThoughtWorks.CruiseControl.Remote.Messages.ProjectRequest)">
            <summary>
            Attempts to start a project.
            </summary>
            <param name="request">A <see cref="T:ThoughtWorks.CruiseControl.Remote.Messages.ProjectRequest"/> containing the request details.</param>
            <returns>A <see cref="T:ThoughtWorks.CruiseControl.Remote.Messages.Response"/> containing the results of the request.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServer.Stop">
            <summary>
            Stop all integrators, waiting until each integrator has completely stopped, before releasing any threads blocked by WaitForExit. 
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServer.Stop(ThoughtWorks.CruiseControl.Remote.Messages.ProjectRequest)">
            <summary>
            Attempts to stop a project.
            </summary>
            <param name="request">A <see cref="T:ThoughtWorks.CruiseControl.Remote.Messages.ProjectRequest"/> containing the request details.</param>
            <returns>A <see cref="T:ThoughtWorks.CruiseControl.Remote.Messages.Response"/> containing the results of the request.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServer.Abort">
            <summary>
            Abort all integrators, waiting until each integrator has completely stopped, before releasing any threads blocked by WaitForExit. 
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServer.Restart">
            <summary>
            Restart server by stopping all integrators, creating a new set of integrators from Configuration and then starting them.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServer.WaitForExit">
            <summary>
            Block thread until all integrators to have been stopped or aborted.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServer.WaitForExit(ThoughtWorks.CruiseControl.Remote.Messages.ProjectRequest)">
            <summary>
            Waits for the project thread to finish processing.
            </summary>
            <param name="request"></param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServer.ForceBuild(ThoughtWorks.CruiseControl.Remote.Messages.ProjectRequest)">
            <summary>
            Forces a build for the named project.
            </summary>
            <param name="request">A <see cref="T:ThoughtWorks.CruiseControl.Remote.Messages.ProjectRequest"/> containing the request details.</param>
            <returns>A <see cref="T:ThoughtWorks.CruiseControl.Remote.Messages.Response"/> containing the results of the request.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServer.AbortBuild(ThoughtWorks.CruiseControl.Remote.Messages.ProjectRequest)">
            <summary>
            Aborts the build of the selected project.
            </summary>
            <param name="request">A <see cref="T:ThoughtWorks.CruiseControl.Remote.Messages.ProjectRequest"/> containing the request details.</param>
            <returns>A <see cref="T:ThoughtWorks.CruiseControl.Remote.Messages.Response"/> containing the results of the request.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServer.CancelPendingRequest(ThoughtWorks.CruiseControl.Remote.Messages.ProjectRequest)">
            <summary>
            Cancel a pending project integration request from the integration queue.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServer.GetCruiseServerSnapshot(ThoughtWorks.CruiseControl.Remote.Messages.ServerRequest)">
            <summary>
            Gets the projects and integration queues snapshot from this server.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServer.GetProjectStatus(ThoughtWorks.CruiseControl.Remote.Messages.ServerRequest)">
            <summary>
            Gets information about the last build status, current activity and project name.
            for all projects on a cruise server
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServer.SendMessage(ThoughtWorks.CruiseControl.Remote.Messages.MessageRequest)">
            <summary>
            Send a text message to the server.
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServer.GetLatestBuildName(ThoughtWorks.CruiseControl.Remote.Messages.ProjectRequest)">
            <summary>
            Returns the name of the most recent build for the specified project
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServer.GetMostRecentBuildNames(ThoughtWorks.CruiseControl.Remote.Messages.BuildListRequest)">
            <summary>
            Returns the names of the buildCount most recent builds for the specified project, sorted s.t. the newest build is first in the array
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServer.GetBuildNames(ThoughtWorks.CruiseControl.Remote.Messages.ProjectRequest)">
            <summary>
            Returns the names of all builds for the specified project, sorted s.t. the newest build is first in the array
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServer.GetLog(ThoughtWorks.CruiseControl.Remote.Messages.BuildRequest)">
            <summary>
            Returns the build log contents for requested project and build name
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServer.GetFinalBuildStatus(ThoughtWorks.CruiseControl.Remote.Messages.BuildRequest)">
            <summary>
            Gets the final status for a build.
            </summary>
            <param name="request">The request.</param>
            <returns>The <see cref="T:ThoughtWorks.CruiseControl.Remote.Messages.SnapshotResponse"/> for the build.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServer.GetServerLog(ThoughtWorks.CruiseControl.Remote.Messages.ServerRequest)">
            <summary>
            Retrieves the server log.
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServer.AddProject(ThoughtWorks.CruiseControl.Remote.Messages.ChangeConfigurationRequest)">
            <summary>
            Adds a project to the server
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServer.DeleteProject(ThoughtWorks.CruiseControl.Remote.Messages.ChangeConfigurationRequest)">
            <summary>
            Deletes the specified project from the server
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServer.UpdateProject(ThoughtWorks.CruiseControl.Remote.Messages.ChangeConfigurationRequest)">
            <summary>
            Updates the selected project on the server
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServer.GetProject(ThoughtWorks.CruiseControl.Remote.Messages.ProjectRequest)">
            <summary>
            Gets the project.	
            </summary>
            <param name="request">The request.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServer.GetServerVersion(ThoughtWorks.CruiseControl.Remote.Messages.ServerRequest)">
            <summary>
            Gets the server version.	
            </summary>
            <param name="request">The request.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServer.GetExternalLinks(ThoughtWorks.CruiseControl.Remote.Messages.ProjectRequest)">
            <summary>
            Gets the external links.	
            </summary>
            <param name="request">The request.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServer.GetArtifactDirectory(ThoughtWorks.CruiseControl.Remote.Messages.ProjectRequest)">
            <summary>
            Gets the artifact directory.	
            </summary>
            <param name="request">The request.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServer.GetStatisticsDocument(ThoughtWorks.CruiseControl.Remote.Messages.ProjectRequest)">
            <summary>
            Gets the statistics document.	
            </summary>
            <param name="request">The request.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServer.GetModificationHistoryDocument(ThoughtWorks.CruiseControl.Remote.Messages.ProjectRequest)">
            <summary>
            Gets the modification history document.	
            </summary>
            <param name="request">The request.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServer.GetRSSFeed(ThoughtWorks.CruiseControl.Remote.Messages.ProjectRequest)">
            <summary>
            Gets the RSS feed.	
            </summary>
            <param name="request">The request.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServer.Dispose">
            <summary>
            Dispose this object.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServer.GetFreeDiskSpace(ThoughtWorks.CruiseControl.Remote.Messages.ServerRequest)">
            <summary>
            Retrieves the amount of free disk space.
            </summary>
            <param name="request"></param>
            <returns>The amount of free space in bytes.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServer.TakeStatusSnapshot(ThoughtWorks.CruiseControl.Remote.Messages.ProjectRequest)">
            <summary>
            Takes a status snapshot of a project.
            </summary>
            <param name="request"></param>
            <returns>The snapshot of the current status.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServer.RetrievePackageList(ThoughtWorks.CruiseControl.Remote.Messages.ProjectRequest)">
            <summary>
            Retrieves the latest list of packages for a project.
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServer.RetrieveFileTransfer(ThoughtWorks.CruiseControl.Remote.Messages.FileTransferRequest)">
            <summary>
            Retrieve a file transfer object.
            </summary>
            <param name="request"></param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServer.Login(ThoughtWorks.CruiseControl.Remote.Messages.LoginRequest)">
            <summary>
            Logs a user into the session and generates a session.
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServer.Logout(ThoughtWorks.CruiseControl.Remote.Messages.ServerRequest)">
            <summary>
            Logs a user out of the system and removes their session.
            </summary>
            <param name="request"></param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServer.GetSecurityConfiguration(ThoughtWorks.CruiseControl.Remote.Messages.ServerRequest)">
            <summary>
            Retrieves the security configuration.
            </summary>
            <param name="request"></param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServer.ListUsers(ThoughtWorks.CruiseControl.Remote.Messages.ServerRequest)">
            <summary>
            Lists all the users who have been defined in the system.
            </summary>
            <param name="request"></param>
            <returns>
            A list of <see cref="T:ThoughtWorks.CruiseControl.Remote.Messages.ListUsersResponse"/> containing the details on all the users
            who have been defined.
            </returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServer.DiagnoseSecurityPermissions(ThoughtWorks.CruiseControl.Remote.Messages.DiagnoseSecurityRequest)">
            <summary>
            Checks the security permissions for a user against one or more projects.
            </summary>
            <param name="request"></param>
            <returns>A set of diagnostics information.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServer.ReadAuditRecords(ThoughtWorks.CruiseControl.Remote.Messages.ReadAuditRequest)">
            <summary>
            Reads the specified number of filtered audit events.
            </summary>
            <param name="request"></param>
            <returns>A list of <see cref="T:ThoughtWorks.CruiseControl.Remote.Security.AuditRecord"/>s containing the audit details that match the filter.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServer.ChangePassword(ThoughtWorks.CruiseControl.Remote.Messages.ChangePasswordRequest)">
            <summary>
            Changes the password of the user.
            </summary>
            <param name="request"></param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServer.ResetPassword(ThoughtWorks.CruiseControl.Remote.Messages.ChangePasswordRequest)">
            <summary>
            Resets the password for a user.
            </summary>
            <param name="request"></param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServer.ListBuildParameters(ThoughtWorks.CruiseControl.Remote.Messages.ProjectRequest)">
            <summary>
            Lists the build parameters for a project.
            </summary>
            <param name="request"></param>
            <returns>The list of parameters (if any).</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServer.RetrieveService(System.Type)">
            <summary>
            Retrieves a service.
            </summary>
            <param name="serviceType">The type of service to add.</param>
            <returns>A valid service, if found, null otherwise.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServer.AddService(System.Type,System.Object)">
            <summary>
            Adds a service.
            </summary>
            <param name="serviceType">The type of service.</param>
            <param name="service">The service to add.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServer.ValidateRequest(ThoughtWorks.CruiseControl.Remote.Messages.ServerRequest)">
            <summary>
            Validates an incoming request.
            </summary>
            <param name="request"></param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServer.RunProjectRequest(ThoughtWorks.CruiseControl.Remote.Messages.ProjectRequest,System.Nullable{ThoughtWorks.CruiseControl.Core.Security.SecurityPermission},System.Nullable{ThoughtWorks.CruiseControl.Remote.Security.SecurityEvent},ThoughtWorks.CruiseControl.Core.CruiseServer.ProjectRequestAction)">
            <summary>
            Encapsulates the code to process a request.
            </summary>
            <param name="request"></param>
            <param name="permission"></param>
            <param name="eventType"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServer.RunServerRequest(ThoughtWorks.CruiseControl.Remote.Messages.ServerRequest,System.Nullable{ThoughtWorks.CruiseControl.Core.Security.SecurityPermission},System.Nullable{ThoughtWorks.CruiseControl.Remote.Security.SecurityEvent},System.Action{ThoughtWorks.CruiseControl.Remote.Messages.ServerRequest})">
            <summary>
            Encapsulates the code to process a request.
            </summary>
            <param name="request"></param>
            <param name="permission"></param>
            <param name="eventType"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServer.FilterProjects(System.String,ThoughtWorks.CruiseControl.Remote.ProjectStatus[])">
            <summary>
            Filters a list of projects and only returns the projects that a user is allowed to view.
            </summary>
            <param name="sessionToken">The session token to use in filtering.</param>
            <param name="projects">The projects to filter.</param>
            <returns>The filtered projects.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServer.OnIntegrationStarted(System.Object,ThoughtWorks.CruiseControl.Remote.Events.IntegrationStartedEventArgs)">
            <summary>
            Pass this event onto any listeners.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServer.OnIntegrationCompleted(System.Object,ThoughtWorks.CruiseControl.Remote.Events.IntegrationCompletedEventArgs)">
            <summary>
            Pass this event onto any listeners.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServer.InitialiseExtensions(System.Collections.Generic.List{ThoughtWorks.CruiseControl.Remote.ExtensionConfiguration})">
            <summary>
            Initialise all the extensions for the server.
            </summary>
            <param name="extensionList">The extensions to load.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServer.DiagnosePermission(System.String,System.String,ThoughtWorks.CruiseControl.Core.Security.SecurityPermission)">
            <summary>
            Checks to see if a session has the required right to perform a permission.
            </summary>
            <param name="userName">The user to check.</param>
            <param name="projectName">The project the permission is for.</param>
            <param name="permission">The permission being checked.</param>
            <returns>True if the permission is allowed, false otherwise.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServer.CheckSecurity(System.String,System.String,ThoughtWorks.CruiseControl.Core.Security.SecurityPermission,System.Nullable{ThoughtWorks.CruiseControl.Remote.Security.SecurityEvent})">
            <summary>
            Checks to see if a session has the required right to perform a permission.
            </summary>
            <param name="sessionToken">The session to check.</param>
            <param name="projectName">The project the permission is for.</param>
            <param name="permission">The permission being checked.</param>
            <param name="eventType">The event type for logging.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServer.GetLinkedSiteId(ThoughtWorks.CruiseControl.Remote.Messages.ProjectItemRequest)">
            <summary>
            Retrieve the identifer for this project on a linked site.
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServer.RetrieveLogData(System.String,System.String,System.Boolean)">
            <summary>
            Retrieves the log data.
            </summary>
            <param name="projectName">The name of the project.</param>
            <param name="buildName">The name of the build.</param>
            <param name="compress">If set to <c>true</c> then compress the log data.</param>
            <returns>The data for the log.</returns>
            <exception cref="T:System.ApplicationException">Thrown if the data for the log could not be retrieved.</exception>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServer.CompressLogData(System.String)">
            <summary>
            Compresses the log data.
            </summary>
            <param name="logData">The log data to compress.</param>
            <returns>The compressed log data.</returns>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.CruiseServer.CruiseManager">
            <summary>
            Retrieve CruiseManager interface for the server
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.CruiseServer.CruiseServerClient">
            <summary>
            Client for communicating with the server.
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.CruiseServer.SecurityManager">
            <summary>
            The underlying security manager.
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.CruiseServer.CompressionService">
            <summary>
            Gets or sets the compression service.
            </summary>
            <value>The compression service.</value>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.CruiseServer.ProjectRequestAction">
            <summary>
            Processes a project request.
            </summary>
            <param name="request">The request to process.</param>
            <param name="response">The response to use.</param>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.CruiseServerClient">
            <summary>
            Client for connecting to a remote server instance.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServerClient.#ctor(ThoughtWorks.CruiseControl.Remote.ICruiseServer)">
            <summary>
            Initialise a new <see cref="T:ThoughtWorks.CruiseControl.Core.CruiseServerClient"/>.
            </summary>
            <param name="cruiseServer"></param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServerClient.GetProjectStatus(ThoughtWorks.CruiseControl.Remote.Messages.ServerRequest)">
            <summary>
            Gets information about the last build status, current activity and project name.
            for all projects on a cruise server
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServerClient.Start(ThoughtWorks.CruiseControl.Remote.Messages.ProjectRequest)">
            <summary>
            Attempts to start a project.
            </summary>
            <param name="request">A <see cref="T:ThoughtWorks.CruiseControl.Remote.Messages.ProjectRequest"/> containing the request details.</param>
            <returns>A <see cref="T:ThoughtWorks.CruiseControl.Remote.Messages.Response"/> containing the results of the request.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServerClient.Stop(ThoughtWorks.CruiseControl.Remote.Messages.ProjectRequest)">
            <summary>
            Attempts to stop a project.
            </summary>
            <param name="request">A <see cref="T:ThoughtWorks.CruiseControl.Remote.Messages.ProjectRequest"/> containing the request details.</param>
            <returns>A <see cref="T:ThoughtWorks.CruiseControl.Remote.Messages.Response"/> containing the results of the request.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServerClient.ForceBuild(ThoughtWorks.CruiseControl.Remote.Messages.ProjectRequest)">
            <summary>
            Forces a build for the named project.
            </summary>
            <param name="request">A <see cref="T:ThoughtWorks.CruiseControl.Remote.Messages.ProjectRequest"/> containing the request details.</param>
            <returns>A <see cref="T:ThoughtWorks.CruiseControl.Remote.Messages.Response"/> containing the results of the request.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServerClient.AbortBuild(ThoughtWorks.CruiseControl.Remote.Messages.ProjectRequest)">
            <summary>
            Aborts the build of the selected project.
            </summary>
            <param name="request">A <see cref="T:ThoughtWorks.CruiseControl.Remote.Messages.ProjectRequest"/> containing the request details.</param>
            <returns>A <see cref="T:ThoughtWorks.CruiseControl.Remote.Messages.Response"/> containing the results of the request.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServerClient.CancelPendingRequest(ThoughtWorks.CruiseControl.Remote.Messages.ProjectRequest)">
            <summary>
            Cancel a pending project integration request from the integration queue.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServerClient.SendMessage(ThoughtWorks.CruiseControl.Remote.Messages.MessageRequest)">
            <summary>
            Send a text message to the server.
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServerClient.WaitForExit(ThoughtWorks.CruiseControl.Remote.Messages.ProjectRequest)">
            <summary>
            Waits for the project to exit.
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServerClient.GetCruiseServerSnapshot(ThoughtWorks.CruiseControl.Remote.Messages.ServerRequest)">
            <summary>
            Gets the projects and integration queues snapshot from this server.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServerClient.GetLatestBuildName(ThoughtWorks.CruiseControl.Remote.Messages.ProjectRequest)">
            <summary>
            Returns the name of the most recent build for the specified project
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServerClient.GetBuildNames(ThoughtWorks.CruiseControl.Remote.Messages.ProjectRequest)">
            <summary>
            Returns the names of all builds for the specified project, sorted s.t. the newest build is first in the array
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServerClient.GetMostRecentBuildNames(ThoughtWorks.CruiseControl.Remote.Messages.BuildListRequest)">
            <summary>
            Returns the names of the buildCount most recent builds for the specified project, sorted s.t. the newest build is first in the array
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServerClient.GetLog(ThoughtWorks.CruiseControl.Remote.Messages.BuildRequest)">
            <summary>
            Returns the build log contents for requested project and build name
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServerClient.GetFinalBuildStatus(ThoughtWorks.CruiseControl.Remote.Messages.BuildRequest)">
            <summary>
            Gets the final status for a build.
            </summary>
            <param name="request">The request.</param>
            <returns>The <see cref="T:ThoughtWorks.CruiseControl.Remote.Messages.SnapshotResponse"/> for the build.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServerClient.GetServerLog(ThoughtWorks.CruiseControl.Remote.Messages.ServerRequest)">
            <summary>
            Returns a log of recent build server activity. How much information that is returned is configured on the build server.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServerClient.AddProject(ThoughtWorks.CruiseControl.Remote.Messages.ChangeConfigurationRequest)">
            <summary>
            Adds a project to the server
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServerClient.DeleteProject(ThoughtWorks.CruiseControl.Remote.Messages.ChangeConfigurationRequest)">
            <summary>
            Deletes the specified project from the server
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServerClient.UpdateProject(ThoughtWorks.CruiseControl.Remote.Messages.ChangeConfigurationRequest)">
            <summary>
            Updates the selected project on the server
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServerClient.GetProject(ThoughtWorks.CruiseControl.Remote.Messages.ProjectRequest)">
            <summary>
            Returns the serialized form of the requested project from the server
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServerClient.GetExternalLinks(ThoughtWorks.CruiseControl.Remote.Messages.ProjectRequest)">
            <summary>
            Gets the external links.	
            </summary>
            <param name="request">The request.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServerClient.GetArtifactDirectory(ThoughtWorks.CruiseControl.Remote.Messages.ProjectRequest)">
            <summary>
            Gets the artifact directory.	
            </summary>
            <param name="request">The request.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServerClient.GetStatisticsDocument(ThoughtWorks.CruiseControl.Remote.Messages.ProjectRequest)">
            <summary>
            Gets the statistics document.	
            </summary>
            <param name="request">The request.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServerClient.GetModificationHistoryDocument(ThoughtWorks.CruiseControl.Remote.Messages.ProjectRequest)">
            <summary>
            Gets the modification history document.	
            </summary>
            <param name="request">The request.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServerClient.GetRSSFeed(ThoughtWorks.CruiseControl.Remote.Messages.ProjectRequest)">
            <summary>
            Gets the RSS feed.	
            </summary>
            <param name="request">The request.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServerClient.GetServerVersion(ThoughtWorks.CruiseControl.Remote.Messages.ServerRequest)">
            <summary>
            Returns the version of the server
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServerClient.Login(ThoughtWorks.CruiseControl.Remote.Messages.LoginRequest)">
            <summary>
            Logs a user into the session and generates a session.
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServerClient.Logout(ThoughtWorks.CruiseControl.Remote.Messages.ServerRequest)">
            <summary>
            Logs a user out of the system and removes their session.
            </summary>
            <param name="request"></param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServerClient.GetSecurityConfiguration(ThoughtWorks.CruiseControl.Remote.Messages.ServerRequest)">
            <summary>
            Retrieves the security configuration.
            </summary>
            <param name="request"></param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServerClient.ListUsers(ThoughtWorks.CruiseControl.Remote.Messages.ServerRequest)">
            <summary>
            Lists all the users who have been defined in the system.
            </summary>
            <param name="request"></param>
            <returns>
            A list of <see cref="T:ThoughtWorks.CruiseControl.Remote.Messages.ListUsersResponse"/> containing the details on all the users
            who have been defined.
            </returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServerClient.DiagnoseSecurityPermissions(ThoughtWorks.CruiseControl.Remote.Messages.DiagnoseSecurityRequest)">
            <summary>
            Checks the security permissions for a user against one or more projects.
            </summary>
            <param name="request"></param>
            <returns>A set of diagnostics information.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServerClient.ReadAuditRecords(ThoughtWorks.CruiseControl.Remote.Messages.ReadAuditRequest)">
            <summary>
            Reads the specified number of filtered audit events.
            </summary>
            <param name="request"></param>
            <returns>A list of <see cref="T:ThoughtWorks.CruiseControl.Remote.Messages.ReadAuditResponse"/>s containing the audit details that match the filter.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServerClient.ListBuildParameters(ThoughtWorks.CruiseControl.Remote.Messages.ProjectRequest)">
            <summary>
            Lists the build parameters for a project.
            </summary>
            <param name="request">The project to retrieve the parameters for.</param>
            <returns>The list of parameters (if any).</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServerClient.ChangePassword(ThoughtWorks.CruiseControl.Remote.Messages.ChangePasswordRequest)">
            <summary>
            Changes the password of the user.
            </summary>
            <param name="request"></param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServerClient.ResetPassword(ThoughtWorks.CruiseControl.Remote.Messages.ChangePasswordRequest)">
            <summary>
            Resets the password for a user.
            </summary>
            <param name="request"></param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServerClient.ProcessMessage(System.String,System.String)">
            <summary>
            Processes a message.
            </summary>
            <param name="action">The action to use.</param>
            <param name="message">The request message in an XML format.</param>
            <returns>The response message in an XML format.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServerClient.ProcessMessage(System.String,ThoughtWorks.CruiseControl.Remote.Messages.ServerRequest)">
            <summary>
            Processes a message.
            </summary>
            <param name="action">The action to use.</param>
            <param name="message">The request message.</param>
            <returns>The response message.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServerClient.InitializeLifetimeService">
            <summary>
            Initialise the lifetime service.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServerClient.GetFreeDiskSpace(ThoughtWorks.CruiseControl.Remote.Messages.ServerRequest)">
            <summary>
            Retrieve the amount of free disk space.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServerClient.TakeStatusSnapshot(ThoughtWorks.CruiseControl.Remote.Messages.ProjectRequest)">
            <summary>
            Takes a status snapshot of a project.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServerClient.RetrievePackageList(ThoughtWorks.CruiseControl.Remote.Messages.ProjectRequest)">
            <summary>
            Retrieves a list of packages for a project.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServerClient.RetrieveFileTransfer(ThoughtWorks.CruiseControl.Remote.Messages.FileTransferRequest)">
            <summary>
            Retrieve a file transfer object.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServerClient.GetLinkedSiteId(ThoughtWorks.CruiseControl.Remote.Messages.ProjectItemRequest)">
            <summary>
            Retrieve the identifer for this project on a linked site.
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServerClient.ProcessSecureRequest(ThoughtWorks.CruiseControl.Remote.Messages.ServerRequest)">
            <summary>
            Processes an encrypted request.
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServerClient.RetrievePublicKey(ThoughtWorks.CruiseControl.Remote.Messages.ServerRequest)">
            <summary>
            Retrieve the public key for the server.
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServerClient.InitialiseSecureConnection(ThoughtWorks.CruiseControl.Remote.Messages.LoginRequest)">
            <summary>
            Initialise a secure communications connection.
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServerClient.TerminateSecureConnection(ThoughtWorks.CruiseControl.Remote.Messages.ServerRequest)">
            <summary>
            Terminate a secure communications connection.
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServerClient.ListServers(ThoughtWorks.CruiseControl.Remote.Messages.ServerRequest)">
            <summary>
            Lists the available servers that can be monitored.
            </summary>
            <param name="request">The request.</param>
            <returns>
            A list containing one server - local.
            </returns>
            <remarks>
            This message is not secured at all.
            </remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServerClient.FindMessageType(System.String)">
            <summary>
            Finds the type of object that a message is.
            </summary>
            <param name="messageName">The name of the message.</param>
            <returns>The message type, if found, null otherwise.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServerClient.ConvertXmlToObject(System.Type,System.String)">
            <summary>
            Converts a message string into an object.
            </summary>
            <param name="messageType">The type of message.</param>
            <param name="message">The XML of the message.</param>
            <returns>The object of the message.</returns>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.CruiseServerClient.SecureConnection">
            <summary>
            Stores the details on a secure connection.
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.CruiseServerClient.SecureConnection.Key">
            <summary>
            The key.
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.CruiseServerClient.SecureConnection.IV">
            <summary>
            The IV.
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.CruiseServerClient.SecureConnection.Expiry">
            <summary>
            The expiry time.
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.CruiseServerFactory">
            <summary>
            	
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.ICruiseServerFactory">
            <summary>
            	
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.ICruiseServerFactory.Create(System.Boolean,System.String)">
            <summary>
            Creates the specified remote.	
            </summary>
            <param name="remote">The remote.</param>
            <param name="configFile">The config file.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseServerFactory.Create(System.Boolean,System.String)">
            <summary>
            Creates the specified remote.	
            </summary>
            <param name="remote">The remote.</param>
            <param name="configFile">The config file.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.CruiseXmlWriter">
            <summary>
            	
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseXmlWriter.Write(System.Collections.Generic.IEnumerable{ThoughtWorks.CruiseControl.Remote.CruiseServerSnapshot})">
            <summary>
            Writes the specified cruise server snapshots.	
            </summary>
            <param name="cruiseServerSnapshots">The cruise server snapshots.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.CruiseXmlWriter.Write(ThoughtWorks.CruiseControl.Remote.ProjectStatus)">
            <summary>
            Writes the specified project status.	
            </summary>
            <param name="projectStatus">The project status.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Extensions.DiskSpaceMonitorExtension">
            <summary>
            An extension to prevent integrations from happening if the available disk space is
            insufficient.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Extensions.DiskSpaceMonitorExtension.Initialise(ThoughtWorks.CruiseControl.Remote.ICruiseServer,ThoughtWorks.CruiseControl.Remote.ExtensionConfiguration)">
            <summary>
            Initialises the extension.
            </summary>
            <param name="server">The server that this extension is for.</param>
            <param name="extensionConfig"></param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Extensions.DiskSpaceMonitorExtension.Start">
            <summary>
            Starts the extension.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Extensions.DiskSpaceMonitorExtension.Stop">
            <summary>
            Stops the extension.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Extensions.DiskSpaceMonitorExtension.Abort">
            <summary>
            Terminates the extension immediately.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Extensions.DiskSpaceMonitorExtension.RetrieveMinimumSpaceRequired(System.String)">
            <summary>
            Retrieve the minimum amount of free space required (in bytes) for a drive.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Extensions.DiskSpaceMonitorExtension.AddDriveSpace(System.String,System.String,System.String)">
            <summary>
            Adds a new drive space.
            </summary>
            <param name="driveName"></param>
            <param name="unit"></param>
            <param name="amount"></param>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Extensions.IntegrationRequestThrottleExtension">
            <summary>
            A server extension to throttle the number of concurrent integrations.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Extensions.IntegrationRequestThrottleExtension.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Extensions.IntegrationRequestThrottleExtension"/> class.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Extensions.IntegrationRequestThrottleExtension.Initialise(ThoughtWorks.CruiseControl.Remote.ICruiseServer,ThoughtWorks.CruiseControl.Remote.ExtensionConfiguration)">
            <summary>
            Initialises the extension.
            </summary>
            <param name="extensionConfig"></param>
            <param name="server">The server that this extension is for.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Extensions.IntegrationRequestThrottleExtension.Start">
            <summary>
            Starts the extension.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Extensions.IntegrationRequestThrottleExtension.Stop">
            <summary>
            Stops the extension.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Extensions.IntegrationRequestThrottleExtension.Abort">
            <summary>
            Terminates the extension immediately.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Extensions.IntegrationRequestThrottleExtension.server_IntegrationCompleted(System.Object,ThoughtWorks.CruiseControl.Remote.Events.IntegrationCompletedEventArgs)">
            <summary>
            Handles the IntegrationCompleted event of the server control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:ThoughtWorks.CruiseControl.Remote.Events.IntegrationCompletedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Extensions.IntegrationRequestThrottleExtension.server_IntegrationStarted(System.Object,ThoughtWorks.CruiseControl.Remote.Events.IntegrationStartedEventArgs)">
            <summary>
            Handles the IntegrationStarted event of the server control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:ThoughtWorks.CruiseControl.Remote.Events.IntegrationStartedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Extensions.IntegrationRequestThrottleExtension.NumberOfRequestsAllowed">
            <summary>
            Gets or sets the number of requests allowed.
            </summary>
            <value>The number of requests allowed.</value>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Extensions.IntegrationPerformanceCountersExtension">
            <summary>
            A server extension to provide performance counters.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Extensions.IntegrationPerformanceCountersExtension.Initialise(ThoughtWorks.CruiseControl.Remote.ICruiseServer,ThoughtWorks.CruiseControl.Remote.ExtensionConfiguration)">
            <summary>
            Initialises the extension.
            </summary>
            <param name="extensionConfig"></param>
            <param name="server">The server that this extension is for.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Extensions.IntegrationPerformanceCountersExtension.Start">
            <summary>
            Starts the extension.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Extensions.IntegrationPerformanceCountersExtension.Stop">
            <summary>
            Stops the extension.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Extensions.IntegrationPerformanceCountersExtension.Abort">
            <summary>
            Terminates the extension immediately.
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Extensions.IntegrationPerformanceCountersExtension.PerformanceCounters">
            <summary>
            Gets or sets the performance counters.
            </summary>
            <value>The performance counters.</value>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.IIntegratable">
            <summary>
            	
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IIntegratable.StartNewIntegration(ThoughtWorks.CruiseControl.Remote.IntegrationRequest)">
            <summary>
            Starts a new integration result.
            </summary>
            <param name="request">The request.</param>
            <returns>
            The new <see cref="T:ThoughtWorks.CruiseControl.Core.IIntegrationResult"/>.
            </returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IIntegratable.Integrate(ThoughtWorks.CruiseControl.Remote.IntegrationRequest)">
            <summary>
            Runs an integration of this project.
            </summary>
            <param name="request"></param>
            <returns>The result of the integration, or null if no integration took place.</returns>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.IIntegrationRepository">
            <summary>
            	
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IIntegrationRepository.GetBuildLog(System.String)">
            <summary>
            Gets the build log.	
            </summary>
            <param name="buildName">Name of the build.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IIntegrationRepository.GetBuildNames">
            <summary>
            Gets the build names.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IIntegrationRepository.GetMostRecentBuildNames(System.Int32)">
            <summary>
            Gets the most recent build names.	
            </summary>
            <param name="buildCount">The build count.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IIntegrationRepository.GetLatestBuildName">
            <summary>
            Gets the name of the latest build.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.IIntegrationResult">
            <summary>
            	
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IIntegrationResult.BaseFromArtifactsDirectory(System.String)">
            <summary>
            Bases from artifacts directory.	
            </summary>
            <param name="pathToBase">The path to base.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IIntegrationResult.BaseFromWorkingDirectory(System.String)">
            <summary>
            Bases from working directory.	
            </summary>
            <param name="pathToBase">The path to base.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IIntegrationResult.MarkStartTime">
            <summary>
            Marks the start time.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IIntegrationResult.MarkEndTime">
            <summary>
            Marks the end time.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IIntegrationResult.IsInitial">
            <summary>
            Determines whether this instance is initial.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IIntegrationResult.AddTaskResult(System.String)">
            <summary>
            Adds the task result.	
            </summary>
            <param name="result">The result.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IIntegrationResult.AddTaskResult(ThoughtWorks.CruiseControl.Core.ITaskResult)">
            <summary>
            Adds the task result.	
            </summary>
            <param name="result">The result.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IIntegrationResult.HasModifications">
            <summary>
            Determines whether this instance has modifications.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IIntegrationResult.ShouldRunBuild">
            <summary>
            Shoulds the run build.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IIntegrationResult.Clone">
            <summary>
            Clones this integration result.
            </summary>
            <returns>Returns a clone of the result.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IIntegrationResult.Merge(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Merges another result.
            </summary>
            <param name="value">The result to merge.</param>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IIntegrationResult.ProjectName">
            <summary>
            Gets the name of the project.	
            </summary>
            <value>The name of the project.</value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IIntegrationResult.ProjectUrl">
            <summary>
            Gets or sets the project URL.	
            </summary>
            <value>The project URL.</value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IIntegrationResult.WorkingDirectory">
            <summary>
            Gets or sets the working directory.	
            </summary>
            <value>The working directory.</value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IIntegrationResult.ArtifactDirectory">
            <summary>
            Gets or sets the artifact directory.	
            </summary>
            <value>The artifact directory.</value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IIntegrationResult.BuildLogDirectory">
            <summary>
            Gets or sets the build log directory.	
            </summary>
            <value>The build log directory.</value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IIntegrationResult.Parameters">
            <summary>
             The parameters used.
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IIntegrationResult.BuildCondition">
            <summary>
            Gets the build condition.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IIntegrationResult.Label">
            <summary>
            Gets or sets the label.	
            </summary>
            <value>The label.</value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IIntegrationResult.Status">
            <summary>
            Gets or sets the status.	
            </summary>
            <value>The status.</value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IIntegrationResult.StartTime">
            <summary>
            Gets or sets the start time.	
            </summary>
            <value>The start time.</value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IIntegrationResult.EndTime">
            <summary>
            Gets the end time.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IIntegrationResult.TotalIntegrationTime">
            <summary>
            Gets the total integration time.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IIntegrationResult.Failed">
            <summary>
            Gets the failed.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IIntegrationResult.Fixed">
            <summary>
            Gets the fixed.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IIntegrationResult.Succeeded">
            <summary>
            Gets the succeeded.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IIntegrationResult.IntegrationRequest">
            <summary>
            Gets the integration request.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IIntegrationResult.LastIntegrationStatus">
            <summary>
            Gets the last integration status.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IIntegrationResult.FailureUsers">
            <summary>
            Gets the failure users.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IIntegrationResult.LastModificationDate">
            <summary>
            Gets the last modification date.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IIntegrationResult.LastChangeNumber">
            <summary>
            Gets the last change number.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IIntegrationResult.LastIntegration">
            <summary>
            Gets the last integration.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IIntegrationResult.LastSuccessfulIntegrationLabel">
            <summary>
            Gets the last successful integration label.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IIntegrationResult.TaskResults">
            <summary>
            Gets the task results.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IIntegrationResult.Modifications">
            <summary>
            Gets or sets the modifications.	
            </summary>
            <value>The modifications.</value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IIntegrationResult.ExceptionResult">
            <summary>
            Gets or sets the exception result.	
            </summary>
            <value>The exception result.</value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IIntegrationResult.TaskOutput">
            <summary>
            Gets the task output.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IIntegrationResult.SourceControlError">
            <summary>
            Any error that occurred during the get modifications stage of source control.
            </summary>
            <remarks>
            If there is no error then this property will be null.
            </remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IIntegrationResult.HasSourceControlError">
            <summary>
            Gets or sets a value indicating whether there was a source control error.
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IIntegrationResult.LastBuildStatus">
            <summary>
            The last status from a build that progressed pass any source control checks.
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IIntegrationResult.IntegrationProperties">
            <summary>
            Gets the integration properties.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IIntegrationResult.BuildProgressInformation">
            <summary>
            Gets the build progress information.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IIntegrationResult.SourceControlData">
            <summary>
            Extended source control data.
            </summary>
            <remarks>
            It is up to the individual source control providers to decide what to store in here.
            </remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.IIntegrationResultManager">
            <summary>
            	
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IIntegrationResultManager.StartNewIntegration(ThoughtWorks.CruiseControl.Remote.IntegrationRequest)">
            <summary>
            Starts the new integration.	
            </summary>
            <param name="buildCondition">The build condition.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IIntegrationResultManager.FinishIntegration">
            <summary>
            Finishes the integration.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IIntegrationResultManager.LastIntegrationResult">
            <summary>
            Gets the last integration result.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IIntegrationResultManager.CurrentIntegration">
            <summary>
            Gets the current integration.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IIntegrationResultManager.LastIntegration">
            <summary>
            Gets the last integration.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.IIntegrationRunnerTarget">
            <summary>
            	
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.ITask">
            <summary>
            Defines a task that may be run.
            </summary>
            <title>Task And Publisher Blocks</title>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.ITask.Run(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Runs the task, given the specified <see cref="T:ThoughtWorks.CruiseControl.Core.IIntegrationResult"/>, in the specified <see cref="T:ThoughtWorks.CruiseControl.Core.IProject"/>.
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IIntegrationRunnerTarget.Prebuild(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Prebuilds the specified result.	
            </summary>
            <param name="result">The result.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IIntegrationRunnerTarget.PublishResults(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Publishes the results.	
            </summary>
            <param name="result">The result.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IIntegrationRunnerTarget.CreateLabel(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Creates the label.	
            </summary>
            <param name="result">The result.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IIntegrationRunnerTarget.RecordSourceControlOperation(ThoughtWorks.CruiseControl.Core.SourceControlOperation,ThoughtWorks.CruiseControl.Remote.ItemBuildStatus)">
            <summary>
            Records a source control operation.
            </summary>
            <param name="operation">The operation to record.</param>
            <param name="status">The status of the operation.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IIntegrationRunnerTarget.ClearNotNeededMessages">
            <summary>
            Clears messages that are build dependant. Example failing tasks, ...
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IIntegrationRunnerTarget.InitialiseForBuild(ThoughtWorks.CruiseControl.Remote.IntegrationRequest)">
            <summary>
            Initialises the target for a build.
            </summary>
            <param name="request">The request.</param>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IIntegrationRunnerTarget.SourceControl">
            <summary>
            Gets the source control.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IIntegrationRunnerTarget.Activity">
            <summary>
            Gets or sets the activity.	
            </summary>
            <value>The activity.</value>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.IMergeTask">
            <summary>
            Marks a publisher as a merge publisher (i.e. not to delete temporary files if it fails.)
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.IntegrationPropertyNames">
            <summary>
            Holds all the integration property names, 
            so no need to use the string themselves throughout the code
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.IntegrationPropertyNames.CCNetProject">
            <summary>
            The name of the CCNet project that is being integrated.
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.IntegrationPropertyNames.CCNetProjectUrl">
            <summary>
            The URL where the project is located 
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.IntegrationPropertyNames.CCNetWorkingDirectory">
            <summary>
            The project working directory (as an absolute path) 
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.IntegrationPropertyNames.CCNetArtifactDirectory">
            <summary>
            The project artifact directory (as an absolute path) 
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.IntegrationPropertyNames.CCNetIntegrationStatus">
            <summary>
            The status of the current integration. Could be Success, Failure, Exception or Unknown 
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.IntegrationPropertyNames.CCNetLabel">
            <summary>
            The label used to identify the CCNet build. This label is generated by the CCNet labeller. 
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.IntegrationPropertyNames.CCNetBuildCondition">
            <summary>
            The condition used to trigger the build, indicating if the build was triggered by new modifications or if it was forced. Legal values are: "IfModificationExists" or "ForceBuild"
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.IntegrationPropertyNames.CCNetNumericLabel">
            <summary>
            Contains the label as an integer if conversion is possible, otherwise zero. 
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.IntegrationPropertyNames.CCNetBuildDate">
            <summary>
            The date of the build (in yyyy-MM-dd format) 
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.IntegrationPropertyNames.CCNetBuildTime">
            <summary>
            The time of the start of the build (in HH:mm:ss format) 
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.IntegrationPropertyNames.CCNetLastIntegrationStatus">
            <summary>
            The status of the previous integration. Could be Success, Failure, Exception or Unknown 
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.IntegrationPropertyNames.CCNetListenerFile">
            <summary>
            The file used by CCNet to read the progress of external tools
            <see href="http://confluence.public.thoughtworks.org/display/CCNETCOMM/Viewing+build+progress+with+Nant+and+MSBuild"/>
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.IntegrationPropertyNames.CCNetFailureUsers">
            <summary>
            The list of users who have contributed modifications to a sequence of builds that has failed. 
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.IntegrationPropertyNames.CCNetModifyingUsers">
            <summary>
            The list of users who have contributed to the current build only 
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.IntegrationPropertyNames.CCNetRequestSource">
            <summary>
            The source of the integration request; this will generally be the name of the trigger that raised the request. 
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.IntegrationPropertyNames.CCNetUser">
            <summary>
            The user who forced the build. If security is off, or the build is not forced, then this will not be set. 
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.IntegrationQueueManager">
            <summary>
            	
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Queues.IQueueManager">
            <summary>
            Managers the integration queues.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Queues.IQueueManager.StartAllProjects">
            <summary>
            Starts all the projects.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Queues.IQueueManager.StopAllProjects(System.Boolean)">
            <summary>
            Stops all the projects.
            </summary>
            <param name="restarting">true when an update is done to the config, so we need to stop all projects and restart them. No other projects may be started in this timeframe.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Queues.IQueueManager.Abort">
            <summary>
            Aborts all running projects and stops queue processing.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Queues.IQueueManager.Restart(ThoughtWorks.CruiseControl.Core.IConfiguration)">
            <summary>
            Stops all running projects and regenerates the queues.
            </summary>
            <param name="configuration">The configuration to use.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Queues.IQueueManager.Start(System.String)">
            <summary>
            Starts a specific project.
            </summary>
            <param name="project">The name of the project to start.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Queues.IQueueManager.Stop(System.String)">
            <summary>
            Stops a specific project.
            </summary>
            <param name="project">The name of the project to stop.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Queues.IQueueManager.ForceBuild(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Starts a forced build for a project.
            </summary>
            <param name="projectName">The name of the project.</param>
            <param name="enforcerName">The person forcing the build.</param>
            <param name="buildValues"></param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Queues.IQueueManager.Request(System.String,ThoughtWorks.CruiseControl.Remote.IntegrationRequest)">
            <summary>
            Adds a request for a project.
            </summary>
            <param name="project">The name of the project.</param>
            <param name="request">The request to add.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Queues.IQueueManager.CancelPendingRequest(System.String)">
            <summary>
            Cancels a request to start a project.
            </summary>
            <param name="projectName">The name of the project.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Queues.IQueueManager.WaitForExit(System.String)">
            <summary>
            Waits for a project to exit.
            </summary>
            <param name="projectName">The name of the project to wait for.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Queues.IQueueManager.GetCruiseServerSnapshot">
            <summary>
            Gets a snapshot of the current server status.
            </summary>
            <returns>A snapshot of the server status.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Queues.IQueueManager.GetProjectStatuses">
            <summary>
            Gets the statuses of the projects.
            </summary>
            <returns>A list of the current statuses for the projects.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Queues.IQueueManager.GetIntegrator(System.String)">
            <summary>
            Retrieves the integrator for a project.
            </summary>
            <param name="projectName">The name of the project.</param>
            <returns>The integrator for the project.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Queues.IQueueManager.AssociateIntegrationEvents(System.EventHandler{ThoughtWorks.CruiseControl.Remote.Events.IntegrationStartedEventArgs},System.EventHandler{ThoughtWorks.CruiseControl.Remote.Events.IntegrationCompletedEventArgs})">
            <summary>
            Associates the integration events.
            </summary>
            <param name="integrationStarted"></param>
            <param name="integrationCompleted"></param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IntegrationQueueManager.#ctor(ThoughtWorks.CruiseControl.Core.IProjectIntegratorListFactory,ThoughtWorks.CruiseControl.Core.IConfiguration,ThoughtWorks.CruiseControl.Core.State.IProjectStateManager)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.IntegrationQueueManager"/> class.	
            </summary>
            <param name="projectIntegratorListFactory">The project integrator list factory.</param>
            <param name="configuration">The configuration.</param>
            <param name="stateManager">The state manager.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IntegrationQueueManager.GetCruiseServerSnapshot">
            <summary>
            Gets the projects and integration queues snapshot from this server.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IntegrationQueueManager.StartAllProjects">
            <summary>
            Starts all projects.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IntegrationQueueManager.StopAllProjects(System.Boolean)">
            <summary>
            Stops all projects.	
            </summary>
            <param name="restarting">The restarting.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IntegrationQueueManager.Abort">
            <summary>
            Aborts this instance.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IntegrationQueueManager.GetProjectStatuses">
            <summary>
            Gets the project statuses.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IntegrationQueueManager.GetIntegrator(System.String)">
            <summary>
            Gets the integrator.	
            </summary>
            <param name="projectName">Name of the project.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IntegrationQueueManager.ForceBuild(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Forces the build.	
            </summary>
            <param name="projectName">Name of the project.</param>
            <param name="enforcerName">Name of the enforcer.</param>
            <param name="buildValues">The build values.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IntegrationQueueManager.WaitForExit(System.String)">
            <summary>
            Waits for exit.	
            </summary>
            <param name="projectName">Name of the project.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IntegrationQueueManager.Request(System.String,ThoughtWorks.CruiseControl.Remote.IntegrationRequest)">
            <summary>
            Requests the specified project.	
            </summary>
            <param name="project">The project.</param>
            <param name="request">The request.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IntegrationQueueManager.CancelPendingRequest(System.String)">
            <summary>
            Cancels the pending request.	
            </summary>
            <param name="projectName">Name of the project.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IntegrationQueueManager.Stop(System.String)">
            <summary>
            Stops the specified project.	
            </summary>
            <param name="project">The project.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IntegrationQueueManager.Start(System.String)">
            <summary>
            Starts the specified project.	
            </summary>
            <param name="project">The project.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IntegrationQueueManager.Restart(ThoughtWorks.CruiseControl.Core.IConfiguration)">
            <summary>
            Restarts the specified configuration.	
            </summary>
            <param name="configuration">The configuration.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IntegrationQueueManager.GetQueueNames">
            <summary>
            Returns an array of the current queue names in usage.
            </summary>
            <returns>Array of current queue names in use.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IntegrationQueueManager.AssociateIntegrationEvents(System.EventHandler{ThoughtWorks.CruiseControl.Remote.Events.IntegrationStartedEventArgs},System.EventHandler{ThoughtWorks.CruiseControl.Remote.Events.IntegrationCompletedEventArgs})">
            <summary>
            Associates the integration events.
            </summary>
            <param name="integrationStarted"></param>
            <param name="integrationCompleted"></param>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.IParamatisedProject">
            <summary>
            A project that uses parameters for execution.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IParamatisedProject.Prebuild(ThoughtWorks.CruiseControl.Core.IIntegrationResult,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Perform a prebuild with parameters.
            </summary>
            <param name="result"></param>
            <param name="parameterValues"></param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IParamatisedProject.Run(ThoughtWorks.CruiseControl.Core.IIntegrationResult,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Performs a run with parameters.
            </summary>
            <param name="result"></param>
            <param name="parameterValues"></param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IParamatisedProject.PublishResults(ThoughtWorks.CruiseControl.Core.IIntegrationResult,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Perform a publish with parameters.
            </summary>
            <param name="result"></param>
            <param name="parameterValues"></param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IParamatisedProject.ListBuildParameters">
            <summary>
            Lists the parameters for the project.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IParamatisedProject.ValidateParameters(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Validates the parameters.
            </summary>
            <param name="parameters"></param>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.IntegrationResult">
            <summary>
            Contains all the results of a project's integration.
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.IntegrationResult.InitialLabel">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IntegrationResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.IntegrationResult"/> class.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IntegrationResult.#ctor(System.String,System.String,System.String,ThoughtWorks.CruiseControl.Remote.IntegrationRequest,ThoughtWorks.CruiseControl.Core.IntegrationSummary)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.IntegrationResult"/> class.	
            </summary>
            <param name="projectName">Name of the project.</param>
            <param name="workingDirectory">The working directory.</param>
            <param name="artifactDirectory">The artifact directory.</param>
            <param name="request">The request.</param>
            <param name="lastIntegration">The last integration.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IntegrationResult.IsInitial">
            <summary>
            Determines whether this instance is initial.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IntegrationResult.AddTaskResult(System.String)">
            <summary>
            Adds the task result.	
            </summary>
            <param name="result">The result.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IntegrationResult.AddTaskResult(ThoughtWorks.CruiseControl.Core.ITaskResult)">
            <summary>
            Adds the task result.	
            </summary>
            <param name="result">The result.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IntegrationResult.MarkStartTime">
            <summary>
            Marks the start time.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IntegrationResult.MarkEndTime">
            <summary>
            Marks the end time.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IntegrationResult.HasModifications">
            <summary>
            Determines whether this instance has modifications.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IntegrationResult.CreateInitialIntegrationResult(System.String,System.String,System.String)">
            <summary>
            Creates the initial integration result.	
            </summary>
            <param name="project">The project.</param>
            <param name="workingDirectory">The working directory.</param>
            <param name="artifactDirectory">The artifact directory.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IntegrationResult.ShouldRunBuild">
            <summary>
            Determines whether a build should run.  A build should run if there
            are modifications, and none have occurred within the modification
            delay.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IntegrationResult.BaseFromArtifactsDirectory(System.String)">
            <summary>
            Bases from artifacts directory.	
            </summary>
            <param name="pathToBase">The path to base.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IntegrationResult.BaseFromWorkingDirectory(System.String)">
            <summary>
            Bases from working directory.	
            </summary>
            <param name="pathToBase">The path to base.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IntegrationResult.Equals(System.Object)">
            <summary>
            Equalses the specified obj.	
            </summary>
            <param name="obj">The obj.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IntegrationResult.GetHashCode">
            <summary>
            Gets the hash code.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IntegrationResult.ToString">
            <summary>
            Toes the string.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IntegrationResult.Clone">
            <summary>
            Clones this integration result.
            </summary>
            <returns>Returns a clone of the result.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IntegrationResult.Merge(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Merges another result.
            </summary>
            <param name="value">The result to merge.</param>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IntegrationResult.BuildProgressInformation">
            <summary>
            Gets the build progress information.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IntegrationResult.ProjectName">
            <summary>
            Gets or sets the name of the project.	
            </summary>
            <value>The name of the project.</value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IntegrationResult.ProjectUrl">
            <summary>
            Gets or sets the project URL.	
            </summary>
            <value>The project URL.</value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IntegrationResult.BuildCondition">
            <summary>
            Gets or sets the build condition.	
            </summary>
            <value>The build condition.</value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IntegrationResult.Label">
            <summary>
            Gets or sets the label.	
            </summary>
            <value>The label.</value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IntegrationResult.Parameters">
            <summary>
             The parameters used.
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IntegrationResult.NumericLabel">
            <summary>
            Obtain the label as an integer if possible, otherwise zero. 
            </summary>
            <remarks>
            "0" is better than "-1" since build numbers are non-negative
            and "-" is a character frequently used to separate version components
            when represented in string form.  Thus "-1" might give someone
            "1-0--1", which might cause all sorts of havoc for them.  Best to
            avoid the "-" character.
            </remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IntegrationResult.WorkingDirectory">
            <summary>
            Gets or sets the working directory.	
            </summary>
            <value>The working directory.</value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IntegrationResult.ArtifactDirectory">
            <summary>
            Gets or sets the artifact directory.	
            </summary>
            <value>The artifact directory.</value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IntegrationResult.BuildLogDirectory">
            <summary>
            Gets or sets the build log directory.	
            </summary>
            <value>The build log directory.</value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IntegrationResult.IntegrationArtifactDirectory">
            <summary>
            Gets the integration artifact directory.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IntegrationResult.ListenerFile">
            <summary>
            Gets the listener file.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IntegrationResult.Status">
            <summary>
            Gets or sets the status.	
            </summary>
            <value>The status.</value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IntegrationResult.StartTime">
            <summary>
            Gets and sets the date and time at which the integration commenced.
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IntegrationResult.EndTime">
            <summary>
            Gets and sets the date and time at which the integration was completed.
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IntegrationResult.Modifications">
            <summary>
            Gets or sets the modifications.	
            </summary>
            <value>The modifications.</value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IntegrationResult.LastModificationDate">
            <summary>
            Gets the last modification date.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IntegrationResult.LastChangeNumber">
            <summary>
            Retrieves the change number of the last modification.
            </summary>
            <returns>The last change number if there are any changes, null otherwise.</returns>
            <remarks>
            Since ChangeNumbers are no longer numbers, this will return null if there are no 
            modifications.
            </remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IntegrationResult.Succeeded">
            <summary>
            Gets a value indicating the success of this integration.
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IntegrationResult.Failed">
            <summary>
            Gets a value indicating whether this integration failed.
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IntegrationResult.Fixed">
            <summary>
            Gets a value indicating whether this integration fixed a previously broken build.
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IntegrationResult.TotalIntegrationTime">
            <summary>
            Gets the time taken to perform the project's integration.
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IntegrationResult.ExceptionResult">
            <summary>
            Gets or sets the exception result.	
            </summary>
            <value>The exception result.</value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IntegrationResult.TaskResults">
            <summary>
            Gets the task results.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IntegrationResult.TaskOutput">
            <summary>
            Contains the output from the build process.  In the case of NAntBuilder, this is the 
            redirected StdOut of the nant.exe process.
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IntegrationResult.LastIntegration">
            <summary>
            Gets the last integration.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IntegrationResult.LastIntegrationStatus">
            <summary>
            Gets or sets the last integration status.	
            </summary>
            <value>The last integration status.</value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IntegrationResult.LastSuccessfulIntegrationLabel">
            <summary>
            Gets or sets the last successful integration label.	
            </summary>
            <value>The last successful integration label.</value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IntegrationResult.FailureUsers">
            <summary>
            The list of users who have contributed modifications to a sequence of builds that has failed.
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IntegrationResult.IntegrationRequest">
            <summary>
            Gets the integration request.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IntegrationResult.IntegrationProperties">
            <summary>
            Gets the integration properties.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IntegrationResult.SourceControlError">
            <summary>
            Any error that occurred during the get modifications stage of source control.
            </summary>
            <remarks>
            If there is no error then this property will be null.
            </remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IntegrationResult.HasSourceControlError">
            <summary>
            Gets or sets a value indicating whether there was a source control error.
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IntegrationResult.LastBuildStatus">
            <summary>
            The last status from a build that progressed pass any source control checks.
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IntegrationResult.SourceControlData">
            <summary>
            Extended source control data.
            </summary>
            <remarks>
            It is up to the individual source control providers to decide what to store in here.
            </remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.IntegrationResultManager">
            <summary>
            	
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IntegrationResultManager.#ctor(ThoughtWorks.CruiseControl.Core.Project)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.IntegrationResultManager"/> class.	
            </summary>
            <param name="project">The project.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IntegrationResultManager.StartNewIntegration(ThoughtWorks.CruiseControl.Remote.IntegrationRequest)">
            <summary>
            Starts the new integration.	
            </summary>
            <param name="request">The request.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IntegrationResultManager.FinishIntegration">
            <summary>
            Finishes the integration.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IntegrationResultManager.LastIntegrationResult">
            <summary>
            Gets the last integration result.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IntegrationResultManager.LastIntegration">
            <summary>
            Gets the last integration.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IntegrationResultManager.CurrentIntegration">
            <summary>
            Gets the current integration.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.IntegrationRunner">
            <summary>
            	
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.IntegrationRunner.target">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IntegrationRunner.#ctor(ThoughtWorks.CruiseControl.Core.IIntegrationResultManager,ThoughtWorks.CruiseControl.Core.IIntegrationRunnerTarget,ThoughtWorks.CruiseControl.Core.Sourcecontrol.IQuietPeriod)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.IntegrationRunner"/> class.	
            </summary>
            <param name="resultManager">The result manager.</param>
            <param name="target">The target.</param>
            <param name="quietPeriod">The quiet period.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IntegrationRunner.StartNewIntegration(ThoughtWorks.CruiseControl.Remote.IntegrationRequest)">
            <summary>
            Starts a new integration result.
            </summary>
            <param name="request">The request.</param>
            <returns>
            The new <see cref="T:ThoughtWorks.CruiseControl.Core.IIntegrationResult"/>.
            </returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IntegrationRunner.Integrate(ThoughtWorks.CruiseControl.Remote.IntegrationRequest)">
            <summary>
            Integrates the specified request.	
            </summary>
            <param name="request">The request.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IntegrationRunner.GenerateSystemParameterValues(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Generates parameter values from the incoming request values.
            </summary>
            <param name="result">The result.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IntegrationRunner.CompleteIntegration(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Completes an integration.
            </summary>
            <param name="result">The integration result.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IntegrationRunner.PostBuild(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Posts the build.	
            </summary>
            <param name="result">The result.</param>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.IntegrationStatusParser">
            <summary>
            	
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IntegrationStatusParser.Parse(System.String)">
            <summary>
            Parses the specified value.	
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.IntegrationSummary">
            <summary>
            	
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.IntegrationSummary.Initial">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IntegrationSummary.#ctor(ThoughtWorks.CruiseControl.Remote.IntegrationStatus,System.String,System.String,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.IntegrationSummary"/> class.	
            </summary>
            <param name="status">The status.</param>
            <param name="label">The label.</param>
            <param name="lastSuccessfulIntegrationLabel">The last successful integration label.</param>
            <param name="startTime">The start time.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IntegrationSummary.Equals(System.Object)">
            <summary>
            Equalses the specified obj.	
            </summary>
            <param name="obj">The obj.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IntegrationSummary.GetHashCode">
            <summary>
            Gets the hash code.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IntegrationSummary.ToString">
            <summary>
            Toes the string.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IntegrationSummary.IsInitial">
            <summary>
            Determines whether this instance is initial.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IntegrationSummary.Label">
            <summary>
            Gets the label.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IntegrationSummary.Status">
            <summary>
            Gets the status.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IntegrationSummary.LastSuccessfulIntegrationLabel">
            <summary>
            Gets the last successful integration label.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IntegrationSummary.StartTime">
            <summary>
            Gets the start time.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IntegrationSummary.FailureUsers">
            <summary>
            Gets or sets the failure users.	
            </summary>
            <value>The failure users.</value>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.IProject">
            <summary>
            Interface to which all projects must adhere, and via which all application
            code should interact with projects.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IProject.Purge(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            This method is called when the project is being deleted from the server. It allows resources to be cleaned up, SCM clients to be unregistered, etc.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IProject.Initialize">
            <summary>
            Initializes this instance.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IProject.CreateProjectStatus(ThoughtWorks.CruiseControl.Core.IProjectIntegrator)">
            <summary>
            Creates the project status.	
            </summary>
            <param name="integrator">The integrator.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IProject.AbortRunningBuild(System.String)">
            <summary>
            Aborts the running build.	
            </summary>
            <param name="userName">Name of the user.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IProject.AddMessage(ThoughtWorks.CruiseControl.Remote.Message)">
            <summary>
            adds a message 
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IProject.NotifyPendingState">
            <summary>
            Notification that project should enter a pending state due to being queued.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IProject.NotifySleepingState">
            <summary>
            Notification of last project exiting the integration queue and hence can return to sleeping state.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IProject.RetrievePackageList">
            <summary>
            Retrieves the latest list of packages.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IProject.RetrievePackageList(System.String)">
            <summary>
            Retrieves the list of packages for a build.
            </summary>
            <param name="buildName"></param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IProject.RetrieveBuildFinalStatus(System.String)">
            <summary>
            Retrieves the final status of a build.
            </summary>
            <param name="buildName">Name of the build.</param>
            <returns>The final status if found; <c>null</c> otherwise.</returns>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IProject.Name">
            <summary>
            The name of this project.
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IProject.LinkedSites">
            <summary>
            Link this project to other sites.
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IProject.Category">
            <summary>
            An optional category that groups the project
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IProject.ConfigurationXml">
            <summary>
            Gets or sets the configuration XML.
            </summary>
            <value>The configuration XML.</value>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IProject.Description">
            <summary>
            An optional description for the project.
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IProject.Triggers">
            <summary>
            A component to trigger integrations for this project.
            TODO: remove
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IProject.WebURL">
            <summary>
            Where the results web page for this project can be found
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IProject.WorkingDirectory">
            <summary>
            Gets the project's working directory, where the primary build and checkout happens
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IProject.ArtifactDirectory">
            <summary>
            Gets the project's artifact directory, where build logs and distributables can be placed
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IProject.ExternalLinks">
            <summary>
            Gets the external links.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IProject.Statistics">
            <summary>
            Gets the statistics.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IProject.ModificationHistory">
            <summary>
            Gets the modification history.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IProject.RSSFeed">
            <summary>
            Gets the RSS feed.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IProject.IntegrationRepository">
            <summary>
            Gets the integration repository.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IProject.QueueName">
            <summary>
            Gets or sets the build queue this project will be added to when a start of the build is triggered.
            If no queue name specified, uses the project name.
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IProject.QueuePriority">
            <summary>
            Gets or sets the optional queue priority for when multiple projects share a queue. 
            A priority of zero (default) indicates a FIFO queue.
            An item with priority 1 will be inserted before an item of priority 2.
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IProject.CurrentActivity">
            <summary>
            Gets the current activity.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IProject.Security">
            <summary>
            The associated security configuration.
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IProject.MaxSourceControlRetries">
            <summary>
            Maximum amount of sourcecontrol exceptions allowed, before stopping the project (if specified to do so).
            This equals to the amount of errors in GetModifications. 
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IProject.AskForForceBuildReason">
            <summary>
            Should a comment be requested when a force build is triggered.
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IProject.StopProjectOnReachingMaxSourceControlRetries">
            <summary>
            Stop the project when the MaxSourceControlRetries limit has been reached
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IProject.SourceControlErrorHandling">
            <summary>
            What do do when an error occurs in the getmodifications stage of the source control 
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IProject.InitialState">
            <summary>
            The initial start-up state to set.
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IProject.StartupMode">
            <summary>
            The start-up mode for this project.
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.IProjectIntegrator">
            <summary>
            	
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IProjectIntegrator.Start">
            <summary>
            Starts the integration of this project on a separate thread.  If
            this integrator has already started, this method causes no action.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IProjectIntegrator.Stop(System.Boolean)">
            <summary>
            Stops the integration of this project.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IProjectIntegrator.WaitForExit">
            <summary>
            Waits for the project integrator thread to exit, and joins with it.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IProjectIntegrator.Abort">
            <summary>
            Aborts the integrator thread immediately.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IProjectIntegrator.ForceBuild(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            For invocation by a force build publisher or having the exe config running a project
            when CC.Net first starts.
            </summary>
            <param name="enforcerName">ID of program/person forcing the build</param>
            <param name="buildValues"></param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IProjectIntegrator.AbortBuild(System.String)">
            <summary>
            Aborts the build of the selected project.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IProjectIntegrator.Request(ThoughtWorks.CruiseControl.Remote.IntegrationRequest)">
            <summary>
            For "Force" requests such as by CCTray or the Web GUI.
            </summary>
            <param name="request">Request contains the source such as the user id.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IProjectIntegrator.CancelPendingRequest">
            <summary>
            Cancel a pending project integration request from the integration queue.
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IProjectIntegrator.Project">
            <summary>
            Gets the project.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IProjectIntegrator.Name">
            <summary>
            Gets the name.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IProjectIntegrator.IsRunning">
            <summary>
            Gets a value indicating whether this project integrator is currently
            running.
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IProjectIntegrator.State">
            <summary>
            Gets a value indicating the project integrator's current state.
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IProjectIntegrator.IntegrationRepository">
            <summary>
            Gets the integration repository.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="E:ThoughtWorks.CruiseControl.Core.IProjectIntegrator.IntegrationStarted">
            <summary>
            A project integrator is starting an integration.
            </summary>
        </member>
        <member name="E:ThoughtWorks.CruiseControl.Core.IProjectIntegrator.IntegrationCompleted">
            <summary>
            A project integrator has completed an integration.
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.IProjectIntegratorListFactory">
            <summary>
            	
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IProjectIntegratorListFactory.CreateProjectIntegrators(ThoughtWorks.CruiseControl.Core.IProjectList,ThoughtWorks.CruiseControl.Core.Queues.IntegrationQueueSet)">
            <summary>
            Creates the project integrators.	
            </summary>
            <param name="projects">The projects.</param>
            <param name="integrationQueues">The integration queues.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.IProjectIntegratorList">
            <summary>
            	
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IProjectIntegratorList.Item(System.String)">
            <summary>
            Gets the <see cref="T:ThoughtWorks.CruiseControl.Core.IProjectIntegrator"/> with the specified project name.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IProjectIntegratorList.Count">
            <summary>
            Gets the count.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.IProjectList">
            <summary>
            	
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IProjectList.Item(System.String)">
            <summary>
            Gets the <see cref="T:ThoughtWorks.CruiseControl.Core.IProject"/> with the specified project name.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.IProjectSerializer">
            <summary>
            	
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IProjectSerializer.Serialize(ThoughtWorks.CruiseControl.Core.IProject)">
            <summary>
            Serializes the specified project.	
            </summary>
            <param name="project">The project.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IProjectSerializer.Deserialize(System.String)">
            <summary>
            Deserializes the specified serialized project.	
            </summary>
            <param name="serializedProject">The serialized project.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.IStatusItem">
            <summary>
            Defines an item that has a controlable status.
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.IStatusSnapshotGenerator">
            <summary>
            Generates a status snapshot of the item.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IStatusSnapshotGenerator.GenerateSnapshot">
            <summary>
            Generates a snapshot of the current status.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IStatusItem.InitialiseStatus">
            <summary>
            Initialises the status.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IStatusItem.CancelStatus">
            <summary>
            Cancels the status.
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.ITaskResult">
            <summary>
            The result from a task.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.ITaskResult.CheckIfSuccess">
            <summary>
            Checks whether the result was successful.
            </summary>
            <returns><c>true</c> if the result was successful, <c>false</c> otherwise.</returns>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.ITaskResult.Data">
            <summary>
            Gets the data.
            </summary>
            <value>The data from the result.</value>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.ITemporaryResult">
            <summary>
            A result that is only temporary for the duration of the build.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.ITemporaryResult.CleanUp">
            <summary>
            Clean up the result when it is no longer needed.
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Label.AssemblyVersionLabeller">
            <summary>
            Provides a valid System.Version label for your .NET assemblies that could be used to set the AssemblyVersionAttribute(). It increments
            the build number on every successful integration and uses the CruiseControl.NET change number, provided by source control systems like
            Subversion, for the revision number component.
            </summary>
            <title>Assembly Version Labeller</title>
            <version>1.4.4</version>
            <example>
            <code title="Minimalist Example">
            &lt;labeller type="assemblyVersionLabeller" /&gt;
            </code>
            <code title="Full Example (build number and revision number component are incremented automatically)">
            &lt;labeller type="assemblyVersionLabeller"&gt;
            &lt;major&gt;1&lt;/major&gt;
            &lt;minor&gt;2&lt;/minor&gt;
            &lt;incrementOnFailure&gt;false&lt;/incrementOnFailure&gt;
            &lt;/labeller&gt;
            </code>
            <code title="Full Example (all properties)">
            &lt;labeller type="assemblyVersionLabeller"&gt;
            &lt;major&gt;1&lt;/major&gt;
            &lt;minor&gt;2&lt;/minor&gt;
            &lt;build&gt;250&lt;/build&gt;
            &lt;revision&gt;1765&lt;/revision&gt;
            &lt;incrementOnFailure&gt;false&lt;/incrementOnFailure&gt;
            &lt;/labeller&gt;
            </code>
            </example>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Label.LabellerBase">
            <summary>
            Abstract base class to provide common functionality for the labellers.
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.ILabeller">
            <title>Labeller Blocks</title>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.ILabeller.Generate(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Returns the label to use for the current build.
            </summary>
            <param name="integrationResult">IntegrationResult from last build used to determine the next label</param>
            <returns>the label for the new build</returns>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.IParamatisedItem">
            <summary>
            Marks an item as having input parameters.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IParamatisedItem.ApplyParameters(System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.IEnumerable{ThoughtWorks.CruiseControl.Remote.Parameters.ParameterBase})">
            <summary>
            Applies the input parameters to the item.
            </summary>
            <param name="parameters">The parameters to apply.</param>
            <param name="parameterDefinitions">The original parameter definitions.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Label.LabellerBase.Generate(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Generate a label.
            </summary>
            <param name="integrationResult"></param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Label.LabellerBase.Run(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Runs the labeller.
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Label.LabellerBase.ApplyParameters(System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.IEnumerable{ThoughtWorks.CruiseControl.Remote.Parameters.ParameterBase})">
            <summary>
            Applies the input parameters to the labeller.
            </summary>
            <param name="parameters">The parameters to apply.</param>
            <param name="parameterDefinitions">The original parameter definitions.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Label.LabellerBase.PreprocessParameters(Exortech.NetReflector.NetReflectorTypeTable,System.Xml.XmlNode)">
            <summary>
            Preprocesses a node prior to loading it via NetReflector.
            </summary>
            <param name="typeTable">The type table.</param>
            <param name="inputNode">The input node.</param>
            <returns></returns>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Label.LabellerBase.DynamicValues">
            <summary>
            The dynamic values to use for the labeller.
            </summary>
            <version>1.5</version>
            <default>None</default>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Label.AssemblyVersionLabeller.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Label.AssemblyVersionLabeller"/> class.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Label.AssemblyVersionLabeller.Generate(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Generates the specified integration result.	
            </summary>
            <param name="integrationResult">The integration result.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Label.AssemblyVersionLabeller.Major">
            <summary>
            Major number component of the version. 
            </summary>
            <version>1.4.4</version>
            <default>0</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Label.AssemblyVersionLabeller.Minor">
            <summary>
            Minor number component of the version. 
            </summary>
            <version>1.4.4</version>
            <default>0</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Label.AssemblyVersionLabeller.Build">
            <summary>
            Build number component of the version. If not specified the build number is incremented on every successful integration. 
            </summary>
            <version>1.4.4</version>
            <default>-1</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Label.AssemblyVersionLabeller.Revision">
            <summary>
            Revision number component of the version. If not specified the revision number is the LastChangeNumber, provided by some VCS (e.g.
            the svn revision with the Subversion task).
            </summary>
            <version>1.4.4</version>
            <default>-1</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Label.AssemblyVersionLabeller.IncrementOnFailure">
            <summary>
            Whether to increase the build number component if the integration fails. By default the build number component will only increase
            if the integration was successful.
            </summary>
            <version>1.4.4</version>
            <default>false</default>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Label.DateLabeller">
            <summary>
            The Date Labeller is used to generate labels in the format "yyyy.mm.dd.build". Using the Date Labeller makes it easy for the user to identify and communicate the date that a particular build occurred.
            </summary>
            <title>Date Labeller</title>
            <version>1.0</version>
            <remarks>
            <para>
            The revision is increased on every build done at the same day, so if you do 2 builds on 2009/01/20, the first will be have label 2009.01.20.001,  and the second will be 2009.01.20.002 
            </para>
            <para>
            This labeller has been contributed by Andy Johnstone
            </para>
            </remarks>
            <example>
            <code title="Minimal Example">
            &lt;labeller type="dateLabeller" /&gt;
            </code>
            </example>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Label.DateLabeller.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Label.DateLabeller"/> class.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Label.DateLabeller.#ctor(ThoughtWorks.CruiseControl.Core.Util.DateTimeProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Label.DateLabeller"/> class.
            </summary>
            <param name="dateTimeProvider">The date time provider.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Label.DateLabeller.Generate(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Generates the specified integration result.	
            </summary>
            <param name="integrationResult">The integration result.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Label.DateLabeller.YearFormat">
            <summary>
            The format for the year part.
            </summary>
            <version>1.0</version>
            <default>0000</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Label.DateLabeller.MonthFormat">
            <summary>
            The format for the month part.
            </summary>
            <version>1.0</version>
            <default>00</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Label.DateLabeller.DayFormat">
            <summary>
            The format for the day part.
            </summary>
            <version>1.0</version>
            <default>000</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Label.DateLabeller.RevisionFormat">
            <summary>
            The format for the revision part.
            </summary>
            <version>1.0</version>
            <default>000</default>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Label.DefaultLabeller">
            <summary>
            <para>
            By default, CCNet uses a plain incrementing build number as a build label. Some source controls (e.g. <link>Perforce Source Control
            Block</link>) require you to use a different naming scheme if you want CCNet to apply labels to source control on successful builds.
            </para>
            <para>
            You can do this by specifying your own configuration of the default labeller in your project.
            </para>
            </summary>
            <title>Default Labeller</title>
            <version>1.0</version>
            <example>
            <code>
            &lt;labeller type="defaultlabeller"&gt;
            &lt;initialBuildLabel&gt;1&lt;/initialBuildLabel&gt;
            &lt;prefix&gt;Foo-1-&lt;/prefix&gt;
            &lt;incrementOnFailure&gt;true&lt;/incrementOnFailure&gt;
            &lt;labelFormat&gt;00000&lt;/labelFormat&gt;
            &lt;/labeller&gt;
            </code>
            </example>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Label.DefaultLabeller.INITIAL_LABEL">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Label.DefaultLabeller.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Label.DefaultLabeller"/> class.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Label.DefaultLabeller.Generate(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Generates the specified integration result.	
            </summary>
            <param name="integrationResult">The integration result.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Label.DefaultLabeller.LabelPrefix">
            <summary>
            Any string to be put in front of all labels.
            </summary>
            <version>1.0</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Label.DefaultLabeller.LabelPostfix">
            <summary>
            Any string to be put at the end of all labels.
            </summary>
            <version>1.0</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Label.DefaultLabeller.InitialBuildLabel">
            <summary>
            Allows you to set the initial build number.
            </summary>
            <version>1.5</version>
            <default>1</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Label.DefaultLabeller.IncrementOnFailed">
            <summary>
            If true, the label will be incremented even if the build fails. Otherwise it will only be incremented if the build succeeds. 
            </summary>
            <version>1.1</version>
            <default>false</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Label.DefaultLabeller.LabelFormat">
            <summary>
            A format applied to the buildnumber. 
            </summary>
            <version>1.0</version>
            <default>0</default>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Label.FileLabeller">
            <summary>
            The File Labeller is used to generate labels based on the content of a disk file. The labeller is configured with the location of the
            file, and it reads the file content to generate the label for CCNet. The file is read just before the first pre-build task is executed.
            </summary>
            <title>File Labeller</title>
            <version>1.3</version>
            <example>
            <code>
            &lt;labeller type="fileLabeller"&gt;
            &lt;labelFilePath&gt;xxx&lt;/labelFilePath&gt;
            &lt;prefix&gt;Foo-&lt;/prefix&gt;
            &lt;allowDuplicateSubsequentLabels&gt;true&lt;/allowDuplicateSubsequentLabels&gt;
            &lt;/labeller&gt;
            </code>
            </example>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Label.FileLabeller.#ctor">
            <summary>
            Create a new FileLabeller with the default FileReader.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Label.FileLabeller.#ctor(ThoughtWorks.CruiseControl.Core.Label.FileLabeller.FileReader)">
            <summary>
            Create a new FileLabeller with a specified FileReader.
            </summary>
            <param name="fileReader">the Filereader.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Label.FileLabeller.Generate(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Generate and return a label from the file content.
            </summary>
            <param name="integrationResult">the current integration result</param>
            <returns>the label</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Label.FileLabeller.GetSuffixBasedOn(System.String,System.String)">
            <summary>
            Generate a suffix to differentiate between two labels.
            </summary>
            <param name="currentLabel">The new label value</param>
            <param name="lastIntegrationLabel">The previous label value</param>
            <returns>The suffix string (including a leading "-"), or String.Empty if no suffix is necessary.
            </returns>
            <remarks>
            The two labels are considered to be the same (and thus requiring a suffix) if the currentLabel
            matches the lastIntegrationLabel after any prefix is removed from it.  Thus "banana" matches
            "banana-2".  The converse is not true - "banana-2" does not match "banana", because the suffix 
            is not stripped from currentLabel.
            If the lastIntegrationLabel does not contain a suffix, the generated suffix will be 1, 
            otherwise it will be the lastIntegrationLabel suffix + 1.
            </remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Label.FileLabeller.LabelFilePath">
            <summary>
            The pathname of the file to read. This can be the absolute path or one relative to the project's working directory. 
            </summary>
            <version>1.3</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Label.FileLabeller.Prefix">
            <summary>
            Any string to be put in front of all labels.
            </summary>
            <version>1.3</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Label.FileLabeller.AllowDuplicateSubsequentLabels">
            <summary>
            Controls whether duplicate labels are permitted or not.  If true, duplicate labels are left
            intact.  If false, the label will be suffixed with "-n", where "n" is incremented for each
            successive duplication.  Defaults to "true"
            </summary>
            <version>1.3</version>
            <default>true</default>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Label.FileLabeller.FileReader">
            <summary>
            	
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Label.FileLabeller.FileReader.GetLabel(System.String)">
            <summary>
            Read the label text.
            </summary>
            <param name="labelFilePath">the file pathname</param>
            <returns>the label from the file</returns>
            <remarks>
            The label will have all leading and trailing whitespace removed.
            </remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Label.FileLabeller.FileReader.ReadLabel(System.String)">
            <summary>
            Read the label text from the specified file.
            </summary>
            <param name="labelFilePath">the file pathname</param>
            <returns>the label from the file</returns>
            <remarks>
            The label consists of the entire contents of the file.
            </remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Label.IterationLabeller">
            <summary>
            The Iteration Labeller is similar to the <link>Default Labeller</link>; however, it maintains a revision number that is incremented by
            one for each iteration from the release start date. For example, if the release start date was June 1, 2005 and the iteration duration
            was 2 weeks, the iteration number on July 1, 2005 would be 3. This would create a label of &lt;prefix&gt;.3.&lt;build number&gt;.
            </summary>
            <title>Iteration Labeller</title>
            <version>1.0</version>
            <example>
            <code>
            &lt;labeller type="iterationlabeller"&gt;
            &lt;prefix&gt;1.2&lt;/prefix&gt;
            &lt;duration&gt;1&lt;/duration&gt;
            &lt;releaseStartDate&gt;2005/6/24&lt;/releaseStartDate&gt;
            &lt;separator&gt;_&lt;/separator&gt;
            &lt;/labeller&gt;	
            </code>
            </example>
            <remarks>
            Contributed by Craig Campbell.
            </remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Label.IterationLabeller.InitialLabel">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Label.IterationLabeller.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Label.IterationLabeller"/> class.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Label.IterationLabeller.#ctor(ThoughtWorks.CruiseControl.Core.Util.DateTimeProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Label.IterationLabeller"/> class.	
            </summary>
            <param name="dateTimeProvider">The date time provider.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Label.IterationLabeller.Generate(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Generates the specified integration result.	
            </summary>
            <param name="integrationResult">The integration result.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Label.IterationLabeller.Duration">
            <summary>
            The duration of the iteration in weeks.
            </summary>
            <version>1.0</version>
            <default>2</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Label.IterationLabeller.ReleaseStartDate">
            <summary>
            The start date for the release (the start date of iteration one).
            </summary>
            <version>1.0</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Label.IterationLabeller.Separator">
            <summary>
            The separator between the iteration number and the build number.
            </summary>
            <version>1.0</version>
            <default>.</default>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Label.LastChangeLabeller">
            <summary>
            Some source control systems (e.g., AccuRev) have a concept of a "change number", which the Last Change Labeller can use to build a
            label. The following configuration would prefix all labels with the string 'Foo-1-', so the build of change number 213 would be
            labelled 'Foo-1-213'
            </summary>
            <title>Last Change Labeller</title>
            <version>1.3</version>
            <example>
            <code>
            &lt;labeller type="lastChangeLabeller"&gt;
            &lt;prefix&gt;Foo-1-&lt;/prefix&gt;
            &lt;/labeller&gt;
            </code>
            </example>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Label.LastChangeLabeller.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Label.LastChangeLabeller"/> class.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Label.LastChangeLabeller.Generate(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Generate a label string from the last change number.
            If there is no valid change number (e.g. for a forced build without modifications),
            then the last integration label is used.
            </summary>
            <param name="resultFromThisBuild">IntegrationResult object for the current build</param>
            <returns>the new label</returns>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Label.LastChangeLabeller.LabelPrefix">
            <summary>
            The string to be prepended onto the last change number.
            </summary>
            <version>1.3</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Label.LastChangeLabeller.AllowDuplicateSubsequentLabels">
            <summary>
            Controls whether duplicate subsequent labels are permitted or not. If true, duplicate labels are left
            intact. If false, the label will always be suffixed with ".n", where "n" is incremented for each
            successive duplication. Defaults to true.
            </summary>
            <version>1.3</version>
            <default>true</default>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Label.RemoteProjectLabeller">
            <summary>
            This labeller retrieves the last successful integration label for a project on a remote server. You can use this labeller if you have
            split your build across multiple projects on different servers and you want to use a consistent version across all builds.
            </summary>
            <title>Remote Project Labeller</title>
            <version>1.0</version>
            <example>
            <code>
            &lt;labeller type="remoteProjectLabeller"&gt;
            &lt;project&gt;Common&lt;/project&gt;
            &lt;serverUri&gt;tcp://mainbuild:21234/CruiseManager.rem&lt;/serverUri&gt;
            &lt;/labeller&gt;	
            </code>
            </example>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Label.RemoteProjectLabeller.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Label.RemoteProjectLabeller"/> class.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Label.RemoteProjectLabeller.#ctor(ThoughtWorks.CruiseControl.Remote.IRemotingService)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Label.RemoteProjectLabeller"/> class.	
            </summary>
            <param name="service">The service.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Label.RemoteProjectLabeller.Generate(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Generates the specified result.	
            </summary>
            <param name="result">The result.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Label.RemoteProjectLabeller.ServerUri">
            <summary>
            The URI to the remote cruise server containing the project to use (defaults to the local build server).
            </summary>
            <version>1.0</version>
            <default>tcp://localhost:21234/CruiseManager.rem</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Label.RemoteProjectLabeller.ProjectName">
            <summary>
            The project to retrieve the label from. 
            </summary>
            <version>1.0</version>
            <default>n/a</default>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Label.StateFileLabeller">
            <summary>
            This labeller retrieves the last successful integration label for a project using the project's state file. You can use this labeller
            if you have split your build across multiple projects and you want to use a consistent version across all builds.
            </summary>
            <version>1.0</version>
            <title>State File Labeller</title>
            <example>
            <code>
            &lt;labeller type="stateFileLabeller"&gt;
            &lt;project&gt;Common&lt;/project&gt;
            &lt;/labeller&gt;
            </code>
            </example>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Label.StateFileLabeller.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Label.StateFileLabeller"/> class.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Label.StateFileLabeller.#ctor(ThoughtWorks.CruiseControl.Core.State.IStateManager)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Label.StateFileLabeller"/> class.	
            </summary>
            <param name="stateManager">The state manager.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Label.StateFileLabeller.Generate(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Generates the specified integration result.	
            </summary>
            <param name="integrationResult">The integration result.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Label.StateFileLabeller.Project">
            <summary>
            The project to retrieve the label from. 
            </summary>
            <version>1.0</version>
            <default>n/a</default>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.LogFile">
            <summary>
            	
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.LogFile.FilenamePrefix">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.LogFile.FilenameDateFormat">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.LogFile.BuildNumber">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.LogFile.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.LogFile"/> class.	
            </summary>
            <param name="filename">The filename.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.LogFile.#ctor(System.String,System.IFormatProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.LogFile"/> class.	
            </summary>
            <param name="filename">The filename.</param>
            <param name="formatter">The formatter.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.LogFile.#ctor(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.LogFile"/> class.	
            </summary>
            <param name="result">The result.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.LogFile.ValidateFilename(System.String)">
            <summary>
            Validates filename structure, throwing exceptions if badly formed.
            </summary>
            <param name="filename">The filename to validate.</param>
            <exception cref="T:System.ArgumentNullException">If filename is null</exception>
            <exception cref="T:System.ArgumentException">If filename is badly formed</exception>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.LogFile.Date">
            <summary>
            Gets the date.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.LogFile.FormattedDateString">
            <summary>
            Gets the formatted date string.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.LogFile.Label">
            <summary>
            Gets the label.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.LogFile.Succeeded">
            <summary>
            Gets the succeeded.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.LogFile.Filename">
            <summary>
            Gets the filename.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.LogFile.FilenameFormattedDateString">
            <summary>
            Gets the filename formatted date string.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.LogFileUtil">
            <summary>
            Provides utility methods for dealing with log files.
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.LogFileUtil.LogQueryString">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.LogFileUtil.ProjectQueryString">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.LogFileUtil.#ctor">
            <summary>
            Utility class, not intended for instantiation.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.LogFileUtil.GetLogFileNames(System.String)">
            <summary>
            Gets the log file names.	
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.LogFileUtil.GetLatestBuildNumber(System.String)">
            <summary>
            Gets the latest build number.	
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.LogFileUtil.GetLatestBuildNumber(System.String[])">
            <summary>
            Gets the latest build number.	
            </summary>
            <param name="filenames">The filenames.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.LogFileUtil.GetLastBuildDate(System.String[],System.DateTime)">
            <summary>
            Gets the last build date.	
            </summary>
            <param name="filenames">The filenames.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.LogFileUtil.GetLastBuildDate(System.String,System.DateTime)">
            <summary>
            Gets the last build date.	
            </summary>
            <param name="path">The path.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.LogFileUtil.GetLatestLogFileName(System.String)">
            <summary>
            Gets the name of the latest log file.	
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.LogFileUtil.GetLatestLogFileName(System.String[])">
            <summary>
            Gets the name of the latest log file.	
            </summary>
            <param name="filenames">The filenames.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.LogFileUtil.CreateUrl(System.String)">
            <summary>
            Creates the URL.	
            </summary>
            <param name="filename">The filename.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.LogFileUtil.CreateUrl(System.String,System.String)">
            <summary>
            Creates the URL.	
            </summary>
            <param name="filename">The filename.</param>
            <param name="projectname">The projectname.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.LogFileUtil.CreateUrl(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Creates the URL.	
            </summary>
            <param name="result">The result.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.LogFileUtil.CreateUrl(System.String,ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Creates the URL.	
            </summary>
            <param name="urlRoot">The URL root.</param>
            <param name="result">The result.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Logging.CircularArray">
            <summary>
            	
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Logging.CircularArray.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Logging.CircularArray"/> class.	
            </summary>
            <param name="capacity">The capacity.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Logging.CircularArray.Add(System.Object)">
            <summary>
            Adds the specified item.	
            </summary>
            <param name="item">The item.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Logging.CircularArray.ToString">
            <summary>
            Toes the string.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Logging.CircularArray.ToString(ThoughtWorks.CruiseControl.Core.Logging.EnumeratorDirection)">
            <summary>
            Toes the string.	
            </summary>
            <param name="direction">The direction.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Logging.CircularArray.GetEnumerator">
            <summary>
            Gets the enumerator.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Logging.CircularArray.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:System.Object"/> at the specified index.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Logging.EnumeratorDirection">
            <summary>
            	
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Logging.EnumeratorDirection.Backward">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Logging.EnumeratorDirection.Forward">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Logging.ServerLogFileReader">
            <summary>
            	
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Logging.ServerLogFileReader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Logging.ServerLogFileReader"/> class.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Logging.ServerLogFileReader.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Logging.ServerLogFileReader"/> class.	
            </summary>
            <param name="filename">The filename.</param>
            <param name="maxLines">The max lines.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Logging.ServerLogFileReader.Read">
            <summary>
            Reads this instance.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Logging.ServerLogFileReader.Read(ThoughtWorks.CruiseControl.Core.Logging.EnumeratorDirection)">
            <summary>
            Reads the specified direction.	
            </summary>
            <param name="direction">The direction.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Logging.ServerLogFileReader.Read(System.String)">
            <summary>
            Reads the specified project.	
            </summary>
            <param name="project">The project.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.DisplayLevel">
            <summary>
            Defines the display level of a property.
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.DisplayLevel.None">
            <summary>
            The field is not displayed.
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.DisplayLevel.Optional">
            <summary>
            The field is optional.
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.DisplayLevel.Required">
            <summary>
            The field is required.
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.MultipleIntegrationFailureException">
            <summary>
            An integration has had multiple failures.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.MultipleIntegrationFailureException.#ctor(System.Exception)">
            <summary>
            Initialise a blank exception.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.MultipleIntegrationFailureException.AddFailure(System.Exception)">
            <summary>
            Adds another failure to the list.
            </summary>
            <param name="failure">The failure to add.</param>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.MultipleIntegrationFailureException.Failures">
            <summary>
            The failure exceptions.
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.NetReflectorProjectSerializer">
            <summary>
            	
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.NetReflectorProjectSerializer.Serialize(ThoughtWorks.CruiseControl.Core.IProject)">
            <summary>
            Serializes the specified project.	
            </summary>
            <param name="project">The project.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.NetReflectorProjectSerializer.Deserialize(System.String)">
            <summary>
            Deserializes the specified serialized project.	
            </summary>
            <param name="serializedProject">The serialized project.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Project">
            <summary>
            A &lt;project&gt; block defines all the configuration for one project running in a CruiseControl.NET server.
            </summary>
            <title>Project Configuration Block</title>
            <version>1.0</version>
            <remarks>
            <heading>Setting the WebURL</heading>
            <para>
            The current format of the url for a project, as specified in the &lt;webURL&gt; element is:
            </para>
            <code type="None">http://{dashboardserver}/{vdir}/server/{ccnetserver}/project/{projectname}/ViewLatestBuildReport.aspx</code>
            <para>
            For example, if the dashboard was deployed on the server <b>webserver</b> to virtual directory 
            <b>ccnet</b>, and if the project to monitor is called <b>test</b> on server cruise, the URL would be: 
            </para>
            <code type="None">http://webserver/ccnet/server/cruise/project/test/ViewLatestBuildReport.aspx</code>
            </remarks>
            <example>
            <code title="Minimalist example">
            &lt;project name="Project 1" /&gt;
            </code>
            <code title="Full Example">
            &lt;project name="Project 1" queue="Q1" queuePriority="1"&gt;
            &lt;workingDirectory&gt;yourWorkingDirectory&lt;/workingDirectory&gt;
            &lt;artifactDirectory&gt;yourArtifactDirectory&lt;/artifactDirectory&gt;
            &lt;category&gt;Category 1&lt;/category&gt;
            &lt;webURL&gt;http://server1/ccnet/server/local/project/testProject/ViewLatestBuildReport.aspx&lt;/webURL&gt;
            &lt;modificationDelaySeconds&gt;2&lt;/modificationDelaySeconds&gt;
            &lt;maxSourceControlRetries&gt;5&lt;/maxSourceControlRetries&gt;
            &lt;initialState&gt;Stopped&lt;/initialState&gt;
            &lt;startupMode&gt;UseInitialState&lt;/startupMode&gt;
            &lt;triggers&gt;
            &lt;!--yourFirstTriggerType .. --&gt;
            &lt;!--yourOtherTriggerType .. --&gt;
            &lt;/triggers&gt;
            &lt;!-- state type="yourStateManagerType" .. --&gt;
            &lt;!-- sourcecontrol type="yourSourceControlType" .. --&gt;
            &lt;!-- labeller type="yourLabellerType" .. --&gt;
            &lt;prebuild&gt;
            &lt;!-- yourFirstPrebuildTask .. --&gt;
            &lt;!-- yourOtherPrebuildTask .. --&gt;
            &lt;/prebuild&gt;
            &lt;tasks&gt;
            &lt;!-- yourFirstTask .. --&gt;
            &lt;!-- yourOtherTask .. --&gt;
            &lt;/tasks&gt;
            &lt;publishers&gt;
            &lt;!-- yourFirstPublisherTask .. --&gt;
            &lt;!-- yourOtherPublisherTask .. --&gt;
            &lt;/publishers&gt;
            &lt;externalLinks&gt;
            &lt;externalLink name="My First Link" url="http://somewhere/" /&gt;
            &lt;externalLink name="My Other Link" url="http://somewhere.else/" /&gt;
            &lt;/externalLinks&gt;
            &lt;parameters&gt;
            &lt;textParameter name="Build Name" default="Unknown" /&gt;
            &lt;/parameters&gt;
            &lt;linkedSites&gt;&lt;namedValue name="ohloh" value="5623"/&gt;&lt;/linkedSites&gt;
            &lt;/project&gt;
            </code>
            </example>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.ProjectBase">
            <summary>
            	
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.ProjectBase.DefaultWorkingSubDirectory">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.ProjectBase.DefaultArtifactSubDirectory">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.ProjectBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.ProjectBase"/> class.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.ProjectBase.#ctor(ThoughtWorks.CruiseControl.Core.Util.IExecutionEnvironment)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.ProjectBase"/> class.	
            </summary>
            <param name="executionEnvironment">The execution environment.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.ProjectBase.FirePropertyChanged(System.String)">
            <summary>
            Fires the <see cref="E:ThoughtWorks.CruiseControl.Core.ProjectBase.PropertyChanged"/> event.
            </summary>
            <param name="property"></param>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.ProjectBase.Name">
            <summary>
            The name of your project - this must be unique for any given CruiseControl.NET server.
            </summary>
            <version>1.0</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.ProjectBase.Description">
            <summary>
            An optional description of the project.
            </summary>
            <version>1.0</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.ProjectBase.Category">
            <summary>
            A general category for this project. This is used by the dashboard to provide groupings to the project. Categories do not span
            servers.
            </summary>
            <version>1.0</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.ProjectBase.Triggers">
            <summary>
            Trigger blocks allow you to specify when CruiseControl.NET will start a new integration cycle.
            </summary>
            <remarks>
            Specifying an empty element (&lt;triggers /&gt;) means integrations are only ever forced manually (for example using CCTray or the
            Web Dashboard.) Not including a &lt;triggers&gt; element at all means the project will behave like a &lt;triggers /&gt; element
            (before 1.4.3 the default when not including a &lt;triggers&gt; was a single <link>Interval Trigger</link> with default
            configuration).
            </remarks>
            <version>1.0</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.ProjectBase.ConfiguredWorkingDirectory">
            <summary>
            The Working Directory for the project (this is used by other blocks). Relative paths are relative to a directory called the project
            Name in the directory where the CruiseControl.NET server was launched from. The Working Directory is meant to contain the checked
            out version of the project under integration. Make sure this folder us unique per project to prevent problems with the build. You
            don't need to quote the Working Directory, even if it contains spaces.
            </summary>
            <version>1.0</version>
            <default>WorkingDirectory</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.ProjectBase.ConfiguredArtifactDirectory">
            <summary>
            The Artifact Directory for the project (this is used by other blocks). Relative paths are relative to a directory called the
            project Name in the directory where the CruiseControl.NET server was launched from. The Artifact Directory is meant to be a
            persistence location for anything you want saved from the results of the build, e.g. build logs, distributables, etc. Make sure
            this folder us unique per project to prevent problems with reporting about a build. You don't need to quote the Aftifact Directory,
            even if it contains spaces.
            </summary>
            <version>1.0</version>
            <default>Artifacts</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.ProjectBase.ExternalLinks">
            <summary>
            Each of these are used to display project related links on the project report page of the Web Dashboard, and are meant as a
            convenient shortcut to project-related web sites outside of CruiseControl.NET.
            </summary>
            <version>1.0</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.ProjectBase.AskForForceBuildReason">
            <summary>
            Should a reason be requested when a force build is triggered.
            </summary>
            <version>1.5</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.ProjectBase.WorkingDirectory">
            <summary>
            Gets the working directory.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.ProjectBase.ArtifactDirectory">
            <summary>
            Gets the artifact directory.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="E:ThoughtWorks.CruiseControl.Core.ProjectBase.PropertyChanged">
            <summary>
            A property has been changed.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Project.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Project"/> class.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Project.#ctor(ThoughtWorks.CruiseControl.Core.IIntegratable)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Project"/> class.
            </summary>
            <param name="integratable">The integratable.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Project.StartNewIntegration(ThoughtWorks.CruiseControl.Remote.IntegrationRequest)">
            <summary>
            Starts a new integration result.
            </summary>
            <param name="request">The request.</param>
            <returns>
            The new <see cref="T:ThoughtWorks.CruiseControl.Core.IIntegrationResult"/>.
            </returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Project.Integrate(ThoughtWorks.CruiseControl.Remote.IntegrationRequest)">
            <summary>
            Integrates the specified request.	
            </summary>
            <param name="request">The request.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Project.ClearMessages(ThoughtWorks.CruiseControl.Remote.Message.MessageKind)">
            <summary>
            Clears the message array of the messages of the specified kind
            </summary>
            <param name="kind"></param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Project.CancelAllOutstandingItems(ThoughtWorks.CruiseControl.Remote.ItemStatus)">
            <summary>
            Cancels all outstanding items on a status item.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Project.NotifyPendingState">
            <summary>
            Notifies the state of the pending.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Project.NotifySleepingState">
            <summary>
            Notifies the state of the sleeping.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Project.Prebuild(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Prebuilds the specified result.	
            </summary>
            <param name="result">The result.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Project.Prebuild(ThoughtWorks.CruiseControl.Core.IIntegrationResult,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Prebuilds the specified result.	
            </summary>
            <param name="result">The result.</param>
            <param name="parameterValues">The parameter values.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Project.ValidateParameters(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Validates the parameters.	
            </summary>
            <param name="parameterValues">The parameter values.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Project.Run(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Runs the specified result.	
            </summary>
            <param name="result">The result.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Project.Run(ThoughtWorks.CruiseControl.Core.IIntegrationResult,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Runs the specified result.	
            </summary>
            <param name="result">The result.</param>
            <param name="parameterValues">The parameter values.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Project.AbortRunningBuild(System.String)">
            <summary>
            Aborts the running build.	
            </summary>
            <param name="userName">Name of the user.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Project.PublishResults(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Publishes the results.	
            </summary>
            <param name="result">The result.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Project.PublishResults(ThoughtWorks.CruiseControl.Core.IIntegrationResult,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Publishes the results.	
            </summary>
            <param name="result">The result.</param>
            <param name="parameterValues">The parameter values.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Project.RunTask(ThoughtWorks.CruiseControl.Core.ITask,ThoughtWorks.CruiseControl.Core.IIntegrationResult,System.Boolean)">
            <summary>
            Runs a specific task and updates the status for the task.
            </summary>
            <param name="task"></param>
            <param name="result"></param>
            <param name="isPublisher"></param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Project.CancelTasks(System.Collections.IList)">
            <summary>
            Cancels any tasks that have not been run.
            </summary>
            <param name="tasks"></param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Project.Initialize">
            <summary>
            Initializes this instance.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Project.Purge(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Purges the specified purge working directory.	
            </summary>
            <param name="purgeWorkingDirectory">The purge working directory.</param>
            <param name="purgeArtifactDirectory">The purge artifact directory.</param>
            <param name="purgeSourceControlEnvironment">The purge source control environment.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Project.DefaultUrl">
            <summary>
            Defaults the URL.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Project.CreateProjectStatus(ThoughtWorks.CruiseControl.Core.IProjectIntegrator)">
            <summary>
            Creates the project status.	
            </summary>
            <param name="integrator">The integrator.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Project.AddMessage(ThoughtWorks.CruiseControl.Remote.Message)">
            <summary>
            Adds the message.	
            </summary>
            <param name="message">The message.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Project.GetBuildLog(System.String)">
            <summary>
            Gets the build log.	
            </summary>
            <param name="buildName">Name of the build.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Project.GetBuildNames">
            <summary>
            Gets the build names.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Project.GetMostRecentBuildNames(System.Int32)">
            <summary>
            Gets the most recent build names.	
            </summary>
            <param name="buildCount">The build count.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Project.GetLatestBuildName">
            <summary>
            Gets the name of the latest build.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Project.CreateLabel(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Creates the label.	
            </summary>
            <param name="result">The result.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Project.Validate(ThoughtWorks.CruiseControl.Core.IConfiguration,ThoughtWorks.CruiseControl.Core.Config.ConfigurationTrace,ThoughtWorks.CruiseControl.Core.Config.IConfigurationErrorProcesser)">
            <summary>
            Checks the internal validation of the item.
            </summary>
            <param name="configuration">The entire configuration.</param>
            <param name="parent">The parent item for the item being validated.</param>
            <param name="errorProcesser"></param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Project.ValidateProject(ThoughtWorks.CruiseControl.Core.Config.IConfigurationErrorProcesser)">
            <summary>
            Validate the project details.
            </summary>
            <remarks>
            Currently the only check is the project name does not contain any invalid characters.
            </remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Project.ContainsInvalidChars(System.String)">
            <summary>
            Check each character to make sure it is valid.
            </summary>
            <param name="item">The item to check.</param>
            <returns>False if the item contains no invalid characters, true otherwise.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Project.ValidateItem(System.Object,ThoughtWorks.CruiseControl.Core.IConfiguration,ThoughtWorks.CruiseControl.Core.Config.ConfigurationTrace,ThoughtWorks.CruiseControl.Core.Config.IConfigurationErrorProcesser)">
            <summary>
            Validates the configuration of an item.
            </summary>
            <param name="item">The item.</param>
            <param name="configuration">The configuration.</param>
            <param name="parent">The parent.</param>
            <param name="errorProcesser">The error processer.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Project.ValidateItems(System.Collections.IEnumerable,ThoughtWorks.CruiseControl.Core.IConfiguration,ThoughtWorks.CruiseControl.Core.Config.ConfigurationTrace,ThoughtWorks.CruiseControl.Core.Config.IConfigurationErrorProcesser)">
            <summary>
            Validates the configuration of an enumerable.
            </summary>
            <param name="items">The items.</param>
            <param name="configuration">The configuration.</param>
            <param name="parent">The parent.</param>
            <param name="errorProcesser">The error processer.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Project.GenerateSnapshot">
            <summary>
            Generates a snapshot of the current status.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Project.RecordSourceControlOperation(ThoughtWorks.CruiseControl.Core.SourceControlOperation,ThoughtWorks.CruiseControl.Remote.ItemBuildStatus)">
            <summary>
            Records a source control operation.
            </summary>
            <param name="operation">The operation to record.</param>
            <param name="status">The status of the operation.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Project.RetrievePackageList">
            <summary>
            Retrieves the latest list of packages.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Project.RetrievePackageList(System.String)">
            <summary>
            Retrieves the list of packages for a build.
            </summary>
            <param name="buildLabel"></param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Project.RetrieveBuildFinalStatus(System.String)">
            <summary>
            Retrieves the final status of a build.
            </summary>
            <param name="buildName">Name of the build.</param>
            <returns>The final status if found; <c>null</c> otherwise.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Project.PreprocessConfiguration(Exortech.NetReflector.NetReflectorTypeTable,System.Xml.XmlNode)">
            <summary>
            Preprocesses a node prior to loading it via NetReflector.
            </summary>
            <param name="typeTable">The type table.</param>
            <param name="inputNode">The input node.</param>
            <returns>
            The original node.
            </returns>
            <remarks>
            This method just stores a copy of the original configuraiton. This allows the configuration to
            be propogated to remote agents.
            </remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Project.ListBuildParameters">
            <summary>
            Lists the parameters for the project.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Project.ClearNotNeededMessages">
            <summary>
            Clears the not needed messages.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Project.InitialiseForBuild(ThoughtWorks.CruiseControl.Remote.IntegrationRequest)">
            <summary>
            Initialises the target for a build.
            </summary>
            <param name="request">The request.</param>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Project.PrebuildTasks">
            <summary>
            A set of Tasks to run before the build starts and before the source is updated. A failed task will fail the build and any
            subsequent tasks will not run. Tasks are run sequentially, in the order they appear in the configuration. 
            </summary>
            <version>1.1</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Project.Security">
            <summary>
            Any security for the project.
            </summary>
            <version>1.5</version>
            <default><link>Inherited Project Security</link></default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Project.Parameters">
            <summary>
            Dynamic build parameters - these are parameters that are set at build time instead of being hard-coded within the
            configuration file 
            </summary>
            <version>1.5</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Project.LinkedSites">
            <summary>
            Links for this project to other sites. 
            <br/>Example for the Ohloh Project plugin<br/>
            &lt;linkedSites&gt;&lt;namedValue name="ohloh" value="5623"/&gt;&lt;/linkedSites&gt;
            </summary>
            <version>1.5</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Project.StateManager">
            <summary>
            A state manager for the project.
            </summary>
            <version>1.0</version>
            <default><link>File State Manager</link></default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Project.WebURL">
            <summary>
            A reporting URL for this project. This is used by CCTray and the Email Publisher. Typically you should navigate to the
            Project Report on the Dashboard, and use its URL.
            </summary>
            <remarks>
            The default URL contains the machine name of the server.
            </remarks>
            <version>1.0</version>
            <default>http://machineName/ccnet</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Project.Impersonation">
            <summary>
            An optional impersonation account.
            </summary>
            <remarks>
            This is only available on Windows OSs.
            </remarks>
            <version>1.5</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Project.MaxSourceControlRetries">
            <summary>
            The maximum amount of source control exceptions in a row that may occur, before the project goes to the stopped state(when
            StopProjectOnReachingMaxSourceControlRetries is set to true).
            </summary>
            <version>1.4</version>
            <default>5</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Project.StopProjectOnReachingMaxSourceControlRetries">
            <summary>
            Stops the project on reaching maxSourceControlRetries or not. When set to true, the project will be stopped when the amount of
            consecutive source control errors is equal to maxSourceControlRetries.
            </summary>
            <version>1.4</version>
            <default>false</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Project.ShowForceBuildButton">
            <summary>
            (Should) show or hide the ForceBuildButton in UI programs. This is an extra setting on top of security.
            This is setting is mainly meant to disable the possibility to force a project via a UI. (dashboard and cctray)
            Forcing a build via other tools : ccmd, ... will work if you have the rights to do so.
            For example there is a project GatherErrorsDuringWeekend which is scheduled to run at Saturday and Sunday.
            Forcing this project on a weekday could mess up statistics or so. 
            </summary>
            <version>1.6</version>
            <default>True</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Project.ShowStartStopButton">
            <summary>
            (Should) show or hide the Start - Stop Button in UI programs. This is an extra setting on top of security.
            This is setting is mainly meant to disable the possibility to start or stop a project via a UI. (dashboard and cctray) 
            Starting - Stopping a build via other tools : ccmd, ... will work if you have the rights to do so.
            For example there is a project GatherErrorsDuringWeekend which is scheduled to run at Saturday and Sunday.
            Stopping this project on a weekday could mess up statistics or so. 
            </summary>
            <version>1.6</version>
            <default>True</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Project.SourceControlErrorHandling">
            <summary>
            What action to take when a source control error occurs (during GetModifications).
            </summary>
            <remarks>
            <para>
            These are the possible values :
            </para>
            <list type="1">
            <item>
            ReportEveryFailure : runs the publisher section whenever there is an error.
            </item>
            <item>
            ReportOnRetryAmount : only runs the publisher section when maxSourceControlRetries has been reached, the publisher section will
            only be run once.
            </item>
            <item>
            ReportOnEveryRetryAmount : runs the publisher section whenever the maxSourceControlRetries has been reached. When 
            maxSourceControlRetries has been reached and the publisher section has ran, the counter is set back to 0.
            </item>
            </list>
            </remarks>
            <version>1.4</version>
            <default>ReportEveryFailure</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Project.QueueName">
            <summary>
            The name of the integration queue that this project will use. By default, each project runs in its own queue.
            </summary>
            <version>1.3</version>
            <default>Project name</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Project.QueuePriority">
            <summary>
            The priority of this project within the integration queue. If multiple projects have pending requests in the specified queue then
            these requests will be executed according to their priority. Lower priority numbers indicate that integration requests for this
            project will execute before other projects in the same queue, however projects with priority 0 are always executed after projects
            with non-zero priorities in the same queue.
            </summary>
            <version>1.3</version>
            <default>0</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Project.SourceControl">
            <summary>
            The source control block to use.
            </summary>
            <version>1.0</version>
            <default><link>Null Source Control Block</link></default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Project.Publishers">
            <summary>
            The list of build-completed publishers used by this project. 
            </summary>
            <default>None</default>
            <version><link>Xml Log Publisher</link></version>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Project.ModificationDelaySeconds">
            <summary>
            The minimum number of seconds allowed between the last check in and the start of a valid build. 
            </summary>
            <remarks>
            If any modifications are found within this interval the system will sleep long enough so the last checkin is just outside this
            interval. For example if the modification delay is set to 10 seconds and the last checkin was 7 seconds ago the system will sleep
            for 3 seconds and check again. This process will repeat until no modifications have been found within the modification delay
            window.
            This feature is in CruiseControl.NET for Source Control systems, like CVS, that do not support atomic checkins since starting a
            build half way through someone checking in their work could result in invalid 'logical' passes or failures. The property is
            optional though so if you are using a source control system with atomic checkins, leave it out (and it will default to '0').
            </remarks>
            <version>1.0</version>
            <default>0</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Project.Labeller">
            <summary>
            Labellers are used to generate the label that CCNet uses to identify the specific build. The label generated by CCNet can be used
            to version your assemblies or label your version control system with each build.
            </summary>
            <version>1.0</version>
            <default><link>Default Labeller</link></default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Project.Tasks">
            <summary>
            A set of Tasks to run as part of the build. A failed task will fail the build and any subsequent tasks will not run. Tasks are run
            sequentially, in the order they appear in the configuration.
            </summary>
            <version>1.0</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Project.RemoteMachines">
            <summary>
            The remote machines that this project can build on.
            </summary>
            <version>1.6</version>
            <default>none</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Project.DataStore">
            <summary>
            A data store for project information.
            </summary>
            <version>1.6</version>
            <default>none</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Project.Activity">
            <summary>
            Gets or sets the activity.	
            </summary>
            <value>The activity.</value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Project.CurrentActivity">
            <summary>
            Gets the current activity.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Project.CurrentResult">
            <summary>
            Gets the current result.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Project.CurrentExecutionEnvironment">
            <summary>
            Gets or sets the current execution environment.
            </summary>
            <value>The current execution environment.</value>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Project.Statistics">
            <summary>
            Gets the statistics.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Project.ModificationHistory">
            <summary>
            Gets the modification history.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Project.RSSFeed">
            <summary>
            Gets the RSS feed.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Project.IntegrationRepository">
            <summary>
            Gets the integration repository.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Project.InitialState">
            <summary>
            Sets the state of the project when CCNet service/Console starts. Stopped can be handy when you are adding a lot of projects which
            are depending on other projects (via the project trigger) and these may not be build right away. This value is only used when
            startupMode is set to UseInitialState.
            </summary>
            <version>1.5</version>
            <default>Started</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Project.StartupMode">
            <summary>
            The start-up mode for this project.
            </summary>
            <version>1.5</version>
            <default>UseLastState</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Project.ConfigurationXml">
            <summary>
            Gets or sets the configuration XML.
            </summary>
            <value>The configuration XML.</value>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Project.CryptoFunctions">
            <summary>
            Gets or sets the crypto functions.
            </summary>
            <value>The crypto functions.</value>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.ProjectIntegrator">
            <summary>
            An object responsible for the continuous integration of a single project.
            This integrator, when running, coordinates the top-level life cycle of
            a project's integration.
            <list type="1">
            	<item>The <see cref="T:ThoughtWorks.CruiseControl.Remote.ITrigger"/> instance is asked whether to build or not.</item>
            	<item>If a build is required, the <see cref="M:ThoughtWorks.CruiseControl.Core.IIntegratable.Integrate(ThoughtWorks.CruiseControl.Remote.IntegrationRequest)"/>
            	is called.</item>
            </list>
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Queues.IIntegrationQueueNotifier">
            <summary>
            Interface for communication from the IIntegrationQueue to the IProjectIntegrator
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Queues.IIntegrationQueueNotifier.NotifyEnteringIntegrationQueue">
            <summary>
            Notification of entering the integration queue.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Queues.IIntegrationQueueNotifier.NotifyExitingIntegrationQueue(System.Boolean)">
            <summary>
            Notification of exiting the integration queue.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.ProjectIntegrator.#ctor(ThoughtWorks.CruiseControl.Core.IProject,ThoughtWorks.CruiseControl.Core.Queues.IIntegrationQueue)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.ProjectIntegrator"/> class.	
            </summary>
            <param name="project">The project.</param>
            <param name="integrationQueue">The integration queue.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.ProjectIntegrator.Start">
            <summary>
            Starts this instance.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.ProjectIntegrator.ForceBuild(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Forces the build.	
            </summary>
            <param name="enforcerName">Name of the enforcer.</param>
            <param name="buildValues">The build values.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.ProjectIntegrator.AbortBuild(System.String)">
            <summary>
            Aborts the build.	
            </summary>
            <param name="enforcerName">Name of the enforcer.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.ProjectIntegrator.Request(ThoughtWorks.CruiseControl.Remote.IntegrationRequest)">
            <summary>
            Requests the specified request.	
            </summary>
            <param name="request">The request.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.ProjectIntegrator.CancelPendingRequest">
            <summary>
            Cancels the pending request.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.ProjectIntegrator.Run">
            <summary>
            Main integration loop, intended to be run in its own thread.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.ProjectIntegrator.Stop(System.Boolean)">
            <summary>
            Sets the state to <see cref="F:ThoughtWorks.CruiseControl.Remote.ProjectIntegratorState.Stopping"/>, telling the project to
            stop at the next possible point in time.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.ProjectIntegrator.Abort">
            <summary>
            Asynchronously abort project by aborting the project thread.  This needs to be followed by a call to WaitForExit 
            to ensure that the abort has completed.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.ProjectIntegrator.WaitForExit">
            <summary>
            Waits for exit.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.ProjectIntegrator.System#IDisposable#Dispose">
            <summary>
            Ensure that the integrator's thread is aborted when this object is disposed.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.ProjectIntegrator.NotifyEnteringIntegrationQueue">
            <summary>
            Notification of entering the integration queue.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.ProjectIntegrator.NotifyExitingIntegrationQueue(System.Boolean)">
            <summary>
            Notification of exiting the integration queue. This could be due to a single project completing,
            a pending integration being cancelled or due to all projects being removed from the queue.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.ProjectIntegrator.FireIntegrationStarted(ThoughtWorks.CruiseControl.Remote.IntegrationRequest)">
            <summary>
            Fires the IntegrationStarted event.
            </summary>
            <param name="request">The integration request.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.ProjectIntegrator.FireIntegrationCompleted(ThoughtWorks.CruiseControl.Remote.IntegrationRequest,ThoughtWorks.CruiseControl.Remote.IntegrationStatus)">
            <summary>
            Fires the IntegrationCompleted event.
            </summary>
            <param name="request">The integration request.</param>
            <param name="status">The outcome of the integration.</param>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.ProjectIntegrator.Name">
            <summary>
            Gets the name.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.ProjectIntegrator.Project">
            <summary>
            Gets the project.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.ProjectIntegrator.State">
            <summary>
            Gets the state.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.ProjectIntegrator.IntegrationRepository">
            <summary>
            Gets the integration repository.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.ProjectIntegrator.IsRunning">
            <summary>
            Gets a value indicating whether this project integrator is running
            and will continue to run.  If the state is Stopping, this returns false.
            </summary>
        </member>
        <member name="E:ThoughtWorks.CruiseControl.Core.ProjectIntegrator.IntegrationStarted">
            <summary>
            A project integrator is starting an integration.
            </summary>
        </member>
        <member name="E:ThoughtWorks.CruiseControl.Core.ProjectIntegrator.IntegrationCompleted">
            <summary>
            A project integrator has completed an integration.
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.ProjectIntegratorList">
            <summary>
            	
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.ProjectIntegratorList.Add(ThoughtWorks.CruiseControl.Core.IProjectIntegrator)">
            <summary>
            Adds the specified integrator.	
            </summary>
            <param name="integrator">The integrator.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.ProjectIntegratorList.Add(System.String,ThoughtWorks.CruiseControl.Core.IProjectIntegrator)">
            <summary>
            Adds the specified name.	
            </summary>
            <param name="name">The name.</param>
            <param name="integrator">The integrator.</param>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.ProjectIntegratorList.Item(System.String)">
            <summary>
            Gets the <see cref="T:ThoughtWorks.CruiseControl.Core.IProjectIntegrator"/> with the specified project name.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.ProjectIntegratorList.Count">
            <summary>
            Gets the count.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.ProjectIntegratorListFactory">
            <summary>
            	
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.ProjectIntegratorListFactory.CreateProjectIntegrators(ThoughtWorks.CruiseControl.Core.IProjectList,ThoughtWorks.CruiseControl.Core.Queues.IntegrationQueueSet)">
            <summary>
            Creates the project integrators.	
            </summary>
            <param name="projects">The projects.</param>
            <param name="integrationQueues">The integration queues.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.ProjectList">
            <summary>
            	
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.ProjectList.Add(ThoughtWorks.CruiseControl.Core.IProject)">
            <summary>
            Adds the specified project.	
            </summary>
            <param name="project">The project.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.ProjectList.Delete(System.String)">
            <summary>
            Deletes the specified name.	
            </summary>
            <param name="name">The name.</param>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.ProjectList.Item(System.String)">
            <summary>
            Gets the <see cref="T:ThoughtWorks.CruiseControl.Core.IProject"/> with the specified project name.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.ProjectInitialState">
            <summary>
            Defines the allowed start-up modes for a project.
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.ProjectInitialState.Started">
            <summary>
            The project will be started.
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.ProjectInitialState.Stopped">
            <summary>
            The project will be stopped.
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.ProjectStartupMode">
            <summary>
            The start-up mode to use.
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.ProjectStartupMode.UseLastState">
            <summary>
            Use the last state of the project.
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.ProjectStartupMode.UseInitialState">
            <summary>
            Use the initial state of the project.
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Publishers.BuildLogTransformer">
            <summary>
            Utility class that provides methods to transform build results using
            Xsl stylesheets.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.BuildLogTransformer.TransformResultsWithAllStyleSheets(System.Xml.XPath.XPathDocument)">
            <summary>
            Transforms the specified Xml document using all configured Xsl files,
            and returns the concatenated resulting Xml.
            </summary>
            <param name="document"></param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.BuildLogTransformer.TransformResults(System.Collections.IList,System.Xml.XPath.XPathDocument)">
            <summary>
            Transforms the results.	
            </summary>
            <param name="xslFiles">The XSL files.</param>
            <param name="document">The document.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Publishers.BuildPublisher">
            <summary>
            <para>
            The Build Publisher lets you copy any arbitrary files on a <b>successful</b> build.
            </para>
            <para>
            You can set alwaysPublish to true, if you want the copy always to happen.
            </para>
            </summary>
            <title>Build Publisher</title>
            <version>1.0</version>
            <example>
            <code title="Minimalist example">
            &lt;buildpublisher /&gt;
            </code>
            <para>
            This will copy the contents of the project's working directory to a new label subdirectory under the
            project's artifact directory (i.e. &lt;artifact_dir&gt;\&lt;label_dir&gt;) 
            </para>
            <code title="Full example">
            &lt;buildpublisher&gt;
            &lt;sourceDir&gt;C:\myprojects\project1&lt;/sourceDir&gt;
            &lt;publishDir&gt;\\myfileserver\project1&lt;/publishDir&gt;
            &lt;useLabelSubDirectory&gt;false&lt;/useLabelSubDirectory&gt;
            &lt;alwaysPublish&gt;false&lt;/alwaysPublish&gt;
            &lt;/buildpublisher&gt;
            </code>
            <para>
            This will copy the contents of <b>C:\myprojects\project1</b> to the network share 
            <b>\\myfileserver\project1</b>. 
            </para>
            </example>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Tasks.TaskBase">
            <summary>
            An abstract base class to add parameters to a task
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.TaskBase.Run(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Runs the task, given the specified <see cref="T:ThoughtWorks.CruiseControl.Core.IIntegrationResult"/>, in the specified <see cref="T:ThoughtWorks.CruiseControl.Core.IProject"/>.
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.TaskBase.CalculateEstimatedTime">
            <summary>
            Calculate the estimated time of completion.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.TaskBase.GenerateSnapshot">
            <summary>
            Generates a snapshot of the current status.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.TaskBase.InitialiseStatus">
            <summary>
            Initialises the status.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.TaskBase.InitialiseStatus(ThoughtWorks.CruiseControl.Remote.ItemBuildStatus)">
            <summary>
            Initialise an <see cref="T:ThoughtWorks.CruiseControl.Remote.ItemStatus"/>.
            </summary>
            <param name="newStatus">The new status.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.TaskBase.CancelStatus">
            <summary>
            Cancels the status.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.TaskBase.ApplyParameters(System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.IEnumerable{ThoughtWorks.CruiseControl.Remote.Parameters.ParameterBase})">
            <summary>
            Applies the input parameters to the task.
            </summary>
            <param name="parameters">The parameters to apply.</param>
            <param name="parameterDefinitions">The original parameter definitions.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.TaskBase.PreprocessParameters(Exortech.NetReflector.NetReflectorTypeTable,System.Xml.XmlNode)">
            <summary>
            Preprocesses a node prior to loading it via NetReflector.
            </summary>
            <param name="typeTable">The type table.</param>
            <param name="inputNode">The input node.</param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.TaskBase.RetrieveDescriptionOrName">
            <summary>
            Retrieves the description if it is set, otherwise the name of the task.
            </summary>
            <returns>The description or name of the task.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.TaskBase.Execute(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Execute the actual task functionality.
            </summary>
            <param name="result">The result to use.</param>
            <returns><c>true</c> if the task was successful; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.TaskBase.UpgradeConfiguration(System.Version,System.Xml.XmlNode)">
            <summary>
            Upgrades the configuration for the node.
            </summary>
            <param name="configVersion">The version of the configuration.</param>
            <param name="node">The input node.</param>
            <returns>The upgraded node.</returns>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.TaskBase.DynamicValues">
            <summary>
            The dynamic values to use for the task.
            </summary>
            <version>1.5</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.TaskBase.Name">
            <summary>
            The name of the task - by default this is the name of the type.
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.TaskBase.Description">
            <summary>
            Description used for the visualisation of the buildstage, if left empty the process name will be shown.
            </summary>
            <version>1.5</version>
            <default>The task/publisher name.</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.TaskBase.CurrentStatus">
            <summary>
            The current status of the task.
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.TaskBase.WasSuccessful">
            <summary>
            Gets or sets a value indicating whether the task was successful.
            </summary>
            <value><c>true</c> if the task was successful; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.TaskBase.EnvironmentVariables">
            <summary>                                                                                              
            A set of environment variables set for commands that are executed.                                     
            </summary>                                                                                             
            <remarks>                                                                                              
            Each variable should be specified as <code>&lt;variable name="name" value="value"/&gt;</code>.         
            </remarks>                                                                                             
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.BuildPublisher.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Publishers.BuildPublisher"/> class.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.BuildPublisher.Execute(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Execute the actual task functionality.
            </summary>
            <param name="result"></param>
            <returns>
            True if the task was successful, false otherwise.
            </returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.BuildPublisher.RecurseSubDirectories(System.IO.DirectoryInfo,System.IO.DirectoryInfo)">
            <summary>
            Copies all files and folders from srcDir to pubDir
            </summary>
            <param name="srcDir">The SRC dir.</param>
            <param name="pubDir">The pub dir.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.BuildPublisher.KeepLastXSubDirs(System.String,System.Int32,System.String)">
            <summary>
            Keeps the last X sub dirs.
            </summary>
            <param name="targetFolder">The target folder.</param>
            <param name="amountToKeep">The amount to keep.</param>
            <param name="buildLogDirectory">The build log directory.</param>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Publishers.BuildPublisher.PublishDir">
            <summary>
            The directory to copy the files to. This path can be absolute or can be relative to the project's
            artifact directory. If <b>useLabelSubDirectory</b> is true (default) a subdirectory with the
            current build's label will be created, and the contents of sourceDir will be copied to it. If
            unspecified, the project's artifact directory will be used as the publish directory.
            </summary>
            <version>1.0</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Publishers.BuildPublisher.SourceDir">
            <summary>
            The source directory to copy files from. This path can be absolute or can be relative to the
            project's working directory. If unspecified, the project's working directory will be used as the
            source directory.
            </summary>
            <version>1.0</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Publishers.BuildPublisher.UseLabelSubDirectory">
            <summary>
            If set to true (the default value), files will be copied to subdirectory under the publishDir which
            will be named with the label for the current integration.
            </summary>
            <version>1.0</version>
            <default>true</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Publishers.BuildPublisher.AlwaysPublish">
            <summary>
            Always copies the files, regardless of the state of the build.
            </summary>
            <version>1.0</version>
            <default>false</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Publishers.BuildPublisher.CleanPublishDirPriorToCopy">
            <summary>
            Cleans the publishDir if it exists, so that you will always have an exact copy of the sourceDir.
            </summary>
            <version>1.5</version>
            <default>false</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Publishers.BuildPublisher.CleanUpMethod">
            <summary>
            Defines a way to clean up published builds.
            </summary>
            <version>1.4.4</version>
            <default>NoClean</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Publishers.BuildPublisher.CleanUpValue">
            <summary>
            The value used for the cleaning method.
            </summary>
            <version>1.4.4</version>
            <default>5</default>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Publishers.BuildPublisher.CleanupPolicy">
            <summary>
            	
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Publishers.BuildPublisher.CleanupPolicy.NoCleaning">
            <summary>
            No cleaning done 
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Publishers.BuildPublisher.CleanupPolicy.KeepLastXBuilds">
            <summary>
            Keep the last X published builds
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Publishers.BuildPublisher.CleanupPolicy.DeleteBuildsOlderThanXDays">
            <summary>
            Delete builds older than X days
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Publishers.ConditionalPublisher">
            <summary>
            A container publisher that only executes the child publishers when the 
            condition (e.g. build status) is met.
            </summary>
            <remarks>
            <para>
            Currently the only available condition that can be checked is the state of the build.
            </para>
            </remarks>
            <title>Conditional Publisher</title>
            <version>1.5</version>
            <example>
            <code>
            &lt;conditionalPublisher&gt;
            &lt;conditions&gt;
            &lt;condition&gt;Success&lt;/condition&gt;
            &lt;/conditions&gt;
            &lt;publishers&gt;
            &lt;!-- Add publishers here --&gt;
            &lt;/publishers&gt;
            &lt;/conditionalPublisher&gt;
            </code>
            </example>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Tasks.TaskContainerBase">
            <summary>
            A base class for tasks that contain other tasks.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.TaskContainerBase.ApplyParameters(System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.IEnumerable{ThoughtWorks.CruiseControl.Remote.Parameters.ParameterBase})">
            <summary>
            Applies the input parameters to the task.
            </summary>
            <param name="parameters">The parameters to apply.</param>
            <param name="parameterDefinitions">The original parameter definitions.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.TaskContainerBase.Validate(ThoughtWorks.CruiseControl.Core.IConfiguration,ThoughtWorks.CruiseControl.Core.Config.ConfigurationTrace,ThoughtWorks.CruiseControl.Core.Config.IConfigurationErrorProcesser)">
            <summary>
            Validates this task.
            </summary>
            <param name="configuration">The entire configuration.</param>
            <param name="parent">The parent item for the item being validated.</param>
            <param name="errorProcesser">The error processer to use.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.TaskContainerBase.InitialiseStatus(ThoughtWorks.CruiseControl.Remote.ItemBuildStatus)">
            <summary>
            Initialise an <see cref="T:ThoughtWorks.CruiseControl.Remote.ItemStatus"/>.
            </summary>
            <param name="newStatus">The new status.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.TaskContainerBase.RunTask(ThoughtWorks.CruiseControl.Core.ITask,ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Runs a task.
            </summary>
            <param name="task"></param>
            <param name="result"></param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.TaskContainerBase.CancelTasks">
            <summary>
            Cancels any pending tasks.
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.TaskContainerBase.Tasks">
            <summary>
            The child tasks.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.ConditionalPublisher.Execute(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Runs the task, given the specified <see cref="T:ThoughtWorks.CruiseControl.Core.IIntegrationResult"/>, in the specified <see cref="T:ThoughtWorks.CruiseControl.Core.IProject"/>.
            </summary>
            <param name="result">The results of the current build.</param>
            <returns><c>true</c> if the execution is successful; <c>false</c> otherwise.</returns>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Publishers.ConditionalPublisher.Tasks">
            <summary>
            The publishers to run if the conditions are met.
            </summary>
            <default>n/a</default>
            <version>1.5</version>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Publishers.ConditionalPublisher.Conditions">
            <summary>
            A list of conditions of which at least one must be met in order to run the publishers.
            </summary>
            <default>n/a</default>
            <version>1.5</version>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Publishers.ConditionalPublisher.Logger">
            <summary>
            Gets or sets the logger to use.
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Publishers.EmailLDAPConverter">
            <summary>
            <para>
            Looks up the email address via LDAP.
            </para>
            </summary>
            <title>LDAP Email Converter</title>
            <version>1.4.1</version>
            <example>
            <para>
            This will search the LDAP for source control userid "js" , using default settings.
            </para>
            <code>
            &lt;converters&gt;
            &lt;ldapConverter domainName="TheCompany" /&gt;
            &lt;/converters&gt;
            </code>
            <para>
            This will search the LDAP for source control userid "js" , specifying a user for querying the LDAP.
            </para>
            <code>
            &lt;converters&gt;
            &lt;ldapConverter domainName="TheCompany" ldapLogOnUser="LdapQuery"  ldapLogOnPassword="LdapQueryPW" /&gt;
            &lt;/converters&gt;
            </code>
            </example>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Publishers.IEmailConverter">
            <summary>
            Interface definition for username-to-emailaddress converters in the Email publisher
            (<see cref="T:ThoughtWorks.CruiseControl.Core.Publishers.EmailPublisher"/>).
            </summary>
            <title>Email Converter</title>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.IEmailConverter.Convert(System.String)">
            <summary>
            Apply the conversion from userName to email address.
            </summary>
            <param name="userName">The username.</param>
            <returns>The email address.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.EmailLDAPConverter.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.EmailLDAPConverter.Convert(System.String)">
            <summary>
            Apply the conversion from username to email address.
            </summary>
            <param name="username">The username.</param>
            <returns>The email address.</returns>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Publishers.EmailLDAPConverter.DomainName">
            <summary>
            The domain to query for the LDAP service.
            </summary>
            <version>1.0</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Publishers.EmailLDAPConverter.LdapQueryField">
            <summary>
            The field in the LDAP service to use for mapping the source control userid.
            </summary>
            <version>1.0</version>
            <default>MailNickName</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Publishers.EmailLDAPConverter.LdapLogOnUser">
            <summary>
            Username for logging into the LDAP service.
            </summary>
            <version>1.0</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Publishers.EmailLDAPConverter.LdapLogOnPassword">
            <summary>
            The password to use for connecting to the LDAP service.
            </summary>
            <version>1.0</version>
            <default>None</default>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Publishers.EmailRegexConverter">
            <summary>
            <para>
            Matches the username against a regular expression pattern and modifies it according to a specified replacement.
            Uses the .NET regular expression language.
            </para>
            <para>
            The find attribute contains a regular expression that is matched against the source control userid. The replace
            attribute contains a replacement expression that is used to modify the address. Example : Appending
            "@TheCompany.com" to the username
            </para>
            </summary>
            <title>Regular Expression Email Converter</title>
            <version>1.0</version>
            <example>
            <code>
            &lt;converters&gt;
            &lt;regexConverter find="$" replace="@TheCompany.com" /&gt;
            &lt;/converters&gt;
            </code>
            </example>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.EmailRegexConverter.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.EmailRegexConverter.#ctor(System.String,System.String)">
            <summary>
            Extended constructor
            </summary>
            <param name="find"></param>
            <param name="replace"></param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.EmailRegexConverter.Convert(System.String)">
            <summary>
            Apply the conversion from username to email address.
            </summary>
            <param name="username">The username.</param>
            <returns>The email address.</returns>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Publishers.EmailRegexConverter.Find">
            <summary>
            A regular expression to match against the username and identify parts to be replaced.
            </summary>
            <version>1.0</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Publishers.EmailRegexConverter.Replace">
            <summary>
            A string to replace the matched pattern in the username.
            </summary>
            <version>1.0</version>
            <default>n/a</default>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Publishers.EmailGateway">
            <summary>
            	
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.EmailGateway.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Publishers.EmailGateway"/> class.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.EmailGateway.Send(System.Net.Mail.MailMessage)">
            <summary>
            Sends the specified mail message.	
            </summary>
            <param name="mailMessage">The mail message.</param>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Publishers.EmailGateway.MailHost">
            <summary>
            Gets or sets the mail host.	
            </summary>
            <value>The mail host.</value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Publishers.EmailGateway.MailPort">
            <summary>
            Gets or sets the mail port.	
            </summary>
            <value>The mail port.</value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Publishers.EmailGateway.UseSSL">
            <summary>
            Gets or sets the use SSL.	
            </summary>
            <value>The use SSL.</value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Publishers.EmailGateway.MailHostUsername">
            <summary>
            Gets or sets the mail host username.	
            </summary>
            <value>The mail host username.</value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Publishers.EmailGateway.MailHostPassword">
            <summary>
            Gets or sets the mail host password.	
            </summary>
            <value>The mail host password.</value>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Publishers.EmailGroup">
            <summary>
            Defines a group of users to receive e-mails.
            </summary>
            <title>Email Group</title>
            <version>1.3</version>
            <example>
            <code>
            &lt;group name="developers"&gt;
            &lt;notifications&gt;
            &lt;notificationType&gt;Failed&lt;/notificationType&gt;
            &lt;notificationType&gt;Fixed&lt;/notificationType&gt;
            &lt;/notifications&gt;
            &lt;/group&gt;
            </code>
            </example>
            <remarks>
            <para type="warning">
            Up to CC.NET version 1.4.4, notification is a single attribute on the group. Starting with CC.NET 1.5.0, 
            this has been changed to an array of notification types. From 1.5.0 onwards, the Failed notification type, 
            is just failed, it does not include the Exception anymore. Making it possible to mail Exception to the
            buildmaster, and Failed to the developpers. Developers will not get Exception mails, unless configured so.
            </para>
            </remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.EmailGroup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Publishers.EmailGroup"/> class.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.EmailGroup.#ctor(System.String,ThoughtWorks.CruiseControl.Core.Publishers.EmailGroup.NotificationType[])">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Publishers.EmailGroup"/> class.	
            </summary>
            <param name="name">The name.</param>
            <param name="notifications">The notifications.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.EmailGroup.Equals(System.Object)">
            <summary>
            Equalses the specified o.	
            </summary>
            <param name="o">The o.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.EmailGroup.GetHashCode">
            <summary>
            Gets the hash code.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.EmailGroup.ToString">
            <summary>
            Toes the string.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.EmailGroup.HasNotification(ThoughtWorks.CruiseControl.Core.Publishers.EmailGroup.NotificationType)">
            <summary>
            Determines whether the specified to search has notification.	
            </summary>
            <param name="toSearch">To search.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Publishers.EmailGroup.Name">
            <summary>
            The name of the group, which corresponds to the "group" values used in the &lt;user&gt; elements. 
            </summary>
            <version>1.3</version>
            <default>n.a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Publishers.EmailGroup.Notifications">
            <summary>
            A list of notification types, determining when to send email to this group.
            </summary>
            <version>1.3</version>
            <default>n.a</default>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Publishers.EmailGroup.NotificationType">
            <summary>
            	
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Publishers.EmailGroup.NotificationType.Always">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Publishers.EmailGroup.NotificationType.Change">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Publishers.EmailGroup.NotificationType.Failed">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Publishers.EmailGroup.NotificationType.Success">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Publishers.EmailGroup.NotificationType.Fixed">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Publishers.EmailGroup.NotificationType.Exception">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Publishers.EmailMessage">
            <summary>
            This class encloses all the details related to a typical message needed by a 
            Email Publisher
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.EmailMessage.#ctor(ThoughtWorks.CruiseControl.Core.IIntegrationResult,ThoughtWorks.CruiseControl.Core.Publishers.EmailPublisher)">
            <summary>
            constructor
            </summary>
            <param name="result"></param>
            <param name="emailPublisher"></param>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Publishers.EmailMessage.Recipients">
            <summary>
            Determine the recipients list for the email.
            </summary>
            <remarks>Note: This can be a mildly-heavyweight property to read.</remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Publishers.EmailMessage.Subject">
            <summary>
            Gets the subject.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Publishers.EmailPublisher">
            <summary>
            <para>
            Publishes results of integrations via email.  This implementation supports plain-text, and Html email formats.
            Rules regarding who receives email are configurable.
            </para>
            <para>
            The email publisher can be used to send email to any number of users. It is common to include one user who gets
            an email for every build and then also send email to every developer who checked code in for this build.
            </para>
            <para type="tip">
            People tend to prefer to use <link>CCTray</link> rather than email for instant notification these days.
            </para>
            <para type="warning">
            Make sure that all of the Merge Publishers, along with the <link>Xml Log Publisher</link> task are done before
            the &lt;email&gt; publisher, or else you won't be able to include output from the build in the email. A common
            mistake is to put the email task in the &lt;tasks&gt; section instead of the &lt;publishers&gt; section. If an
            error occurs in the &lt;tasks&gt; section, the remaining tasks in that section are skipped, and CC.Net goes
            right to the &lt;publishers&gt; section. So if you put the &lt;email&gt; tasks in the &lt;tasks&gt; section, 
            you'll never get any failure messages.
            </para>
            </summary>
            <title>Email Publisher</title>
            <version>1.0</version>
            <example>
            <code>
            &lt;email mailport="25" includeDetails="TRUE" mailhostUsername="smtpuser" mailhostPassword="smtppassword" useSSL="FALSE"&gt;
            &lt;from&gt;buildmaster@mycompany.com&lt;/from&gt;
            &lt;mailhost&gt;smtp.mycompany.com&lt;/mailhost&gt;
            &lt;users&gt;
            &lt;user name="BuildGuru" group="buildmaster" address="buildguru@mycompany.com"/&gt;
            &lt;user name="JoeDeveloper" group="developers" address="joedeveloper@thoughtworks.com"/&gt;
            &lt;/users&gt;
            &lt;groups&gt;
            &lt;group name="developers"&gt;
            &lt;notifications&gt;
            &lt;notificationType&gt;Failed&lt;/notificationType&gt;
            &lt;notificationType&gt;Fixed&lt;/notificationType&gt;
            &lt;/notifications&gt;
            &lt;/group&gt;
            &lt;group name="buildmaster" &gt;
            &lt;notifications&gt;
            &lt;notificationType&gt;Always&lt;/notificationType&gt;
            &lt;/notifications&gt;
            &lt;/group&gt;
            &lt;/groups&gt;
            &lt;converters&gt;
            &lt;regexConverter find="$" replace="@TheCompany.com" /&gt;
            &lt;/converters&gt;
            &lt;modifierNotificationTypes&gt;
            &lt;NotificationType&gt;Failed&lt;/NotificationType&gt;
            &lt;NotificationType&gt;Fixed&lt;/NotificationType&gt;
            &lt;/modifierNotificationTypes&gt;
            &lt;subjectSettings&gt;
            &lt;subject buildResult="StillBroken" value="Build is still broken for {CCNetProject}" /&gt;
            &lt;/subjectSettings&gt;
            &lt;xslFiles&gt;
            &lt;file&gt;xsl\header.xsl&lt;/file&gt;
            &lt;file&gt;xsl\compile.xsl&lt;/file&gt;
            &lt;file&gt;xsl\unittests.xsl&lt;/file&gt;
            &lt;file&gt;xsl\modifications.xsl&lt;/file&gt;
            &lt;/xslFiles&gt;
            &lt;attachments&gt;
            &lt;file&gt;C:\Data\AFile.txt&lt;/file&gt;
            &lt;file&gt;Relative.txt&lt;/file&gt;
            &lt;/attachments&gt;
            &lt;/email&gt;
            </code>
            </example>
            <remarks>
            <heading>HTML E-mails</heading>
            <para>
            When includedDetails = True, the message body will contain more information. This detailed information is
            constructed from xsl transformations on the build log. If the xslFiles section is filled these files will be
            used, if not defined the xls files are defined in the ccnet.exe.config in the xslFiles section. (see 
            also: <link>Server Application Config File</link>). When adjusting one of these, restart the console/service.
            </para>
            <para>
            The benefits of defining the xsl files in the email publisher: 
            </para>
            <list type="1">
            <item>
            the xsl files are automatically the same for the console as for the service (no more keeping these 2 in sync)
            </item>
            <item>
            it is possible to give projects different xsl transformations
            </item>
            </list>
            <para/>
            <para type="warning">
            The groups node may be empty, but the group section must exist.
            </para>
            <heading>GMail</heading>
            <para>
            For sending mail via gmail :
            <list type="1">
            <item>mailhost="smtp.gmail.com"</item>
            <item>mailport="587"</item>
            <item>mailhostUsername="xxx.yyy@gmail.com"</item>
            <item>mailhostPassword="yourpassword"</item>
            <item>useSSL="TRUE"</item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.EmailPublisher.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Publishers.EmailPublisher"/> class.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.EmailPublisher.#ctor(ThoughtWorks.CruiseControl.Core.Publishers.IMessageBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Publishers.EmailPublisher"/> class.	
            </summary>
            <param name="messageBuilder">The message builder.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.EmailPublisher.Execute(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Executes the specified result.	
            </summary>
            <param name="result">The result.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.EmailPublisher.SendMessage(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Sends the message.	
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <param name="replyto">The replyto.</param>
            <param name="subject">The subject.</param>
            <param name="message">The message.</param>
            <param name="workingFolder">The working folder.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.EmailPublisher.GetMailMessage(System.String,System.String,System.String,System.String,System.String,System.String,System.String[])">
            <summary>
            Gets the mail message.	
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <param name="replyto">The replyto.</param>
            <param name="subject">The subject.</param>
            <param name="messageText">The message text.</param>
            <param name="workingFolder">The working folder.</param>
            <param name="attachments">The attachments.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.EmailPublisher.CreateMessage(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Creates the message.	
            </summary>
            <param name="result">The result.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.EmailPublisher.Validate(ThoughtWorks.CruiseControl.Core.IConfiguration,ThoughtWorks.CruiseControl.Core.Config.ConfigurationTrace,ThoughtWorks.CruiseControl.Core.Config.IConfigurationErrorProcesser)">
            <summary>
            Checks the internal validation of the item.
            </summary>
            <param name="configuration">The entire configuration.</param>
            <param name="parent">The parent item for the item being validated.</param>
            <param name="errorProcesser">The error processer to use.</param>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Publishers.EmailPublisher.EmailGateway">
            <summary>
            Gets or sets the email gateway.	
            </summary>
            <value>The email gateway.</value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Publishers.EmailPublisher.MessageBuilder">
            <summary>
            Gets or sets the message builder.	
            </summary>
            <value>The message builder.</value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Publishers.EmailPublisher.MailHost">
            <summary>
            The SMTP server that CruiseControl.NET will connect to to send email.
            </summary>
            <version>1.0</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Publishers.EmailPublisher.MailPort">
            <summary>
            The SMTP server port number.
            </summary>
            <version>1.0</version>
            <default>25</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Publishers.EmailPublisher.MailhostUsername">
            <summary>
            The user name to provide to the SMTP server.
            </summary>
            <version>1.2</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Publishers.EmailPublisher.MailhostPassword">
            <summary>
            The password to provide to the SMTP server. 
            </summary>
            <version>1.2</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Publishers.EmailPublisher.FromAddress">
            <summary>
            The e-mail address that email will be marked as coming from. 
            </summary>
            <version>1.0</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Publishers.EmailPublisher.UseSSL">
            <summary>
            Whether to use SSL or not for sending the e-mail.
            </summary>
            <version>1.0</version>
            <default>false</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Publishers.EmailPublisher.ReplyToAddress">
            <summary>
            The e-mail address to use for replies. 
            </summary>
            <version>1.0</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Publishers.EmailPublisher.XslFiles">
            <summary>
            A list of xsl files that will be used to fill up the message body, if left blank the list will be taken
            from ccnet.exe.config or ccservice.exe.config.
            </summary>
            <version>1.5</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Publishers.EmailPublisher.Attachments">
            <summary>
            A list of files to attach to the e-mail. If the full path is not specified, then it will be relative to the
            project working directory.
            </summary>
            <version>1.5</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Publishers.EmailPublisher.IncludeDetails">
            <summary>
            Whether to send a full report or not. If not, just sends a simple status message with a link to the build 
            report.
            </summary>
            <version>1.0</version>
            <default>false</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Publishers.EmailPublisher.ModifierNotificationTypes">
            <summary>
            A set of &lt;NotificationType&gt; elements, specifying build states for which CruiseControl.Net should
            send an email to the comitters of the build.
            </summary>
            <version>1.0</version>
            <default>Always</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Publishers.EmailPublisher.EmailUsers">
            <summary>
            A set of &lt;user&gt; elements that define who to send emails to. 
            </summary>
            <version>1.0</version>
            <default>n/a</default>
            <dataType>ThoughtWorks.CruiseControl.Core.Publishers.EmailUser</dataType>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Publishers.EmailPublisher.IndexedEmailUsers">
            <summary>
            Gets the email users via an index.
            </summary>
            <value>The indexed email users.</value>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Publishers.EmailPublisher.EmailGroups">
            <summary>
            A set of &lt;group&gt; elements that identify which the notification policy for a set of users. 
            </summary>
            <version>1.3</version>
            <default>n/a</default>
            <dataType>ThoughtWorks.CruiseControl.Core.Publishers.EmailGroup</dataType>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Publishers.EmailPublisher.IndexedEmailGroups">
            <summary>
            Gets the email groups via an index.
            </summary>
            <value>The indexed email groups.</value>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Publishers.EmailPublisher.SubjectSettings">
            <summary>
            A set of &lt;subject&gt; elements that define the subject of the email, according to the state of the build 
            (broken, fixed, ...)
            </summary>
            <version>1.0</version>
            <default>None</default>
            <dataType>ThoughtWorks.CruiseControl.Core.Publishers.EmailSubject</dataType>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Publishers.EmailPublisher.Converters">
            <summary>
            A set of elements containing rules for creating email adresses based on the modifiers name. The converters 
            will be used when the name of the modifier is not set in the users section. 
            </summary>
            <version>1.0</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Publishers.EmailPublisher.SubjectPrefix">
            <summary>
            A string that will be the first string of the subject. 
            </summary>
            <version>1.0</version>
            <default>None</default>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Publishers.EmailSubject">
            <summary>
            This element  allows to set specific subject messages according to the state of the build. When a certain state
            is not specified, a default will be entered.
            </summary>
            <title>Email Subject</title>
            <version>1.0</version>
            <example>
            <code>
            &lt;subject buildResult="StillBroken" value="Build is still broken for {CCNetProject}" /&gt;
            </code>
            </example>
            <remarks>
            <para>
            It is also possible to use <link>Integration Properties</link> in this section. For example:
            </para>
            <code>
            &lt;subjectSettings&gt;
            &lt;subject buildResult="StillBroken" value="Build is still broken for ${CCNetProject}, please check again" /&gt;
            &lt;/subjectSettings&gt;
            </code>
            <para>
            or:
            </para>
            <code>
            &lt;subjectSettings&gt;
            &lt;subject buildResult="StillBroken" value="Build is still broken for ${CCNetProject}, the fix failed." /&gt;
            &lt;subject buildResult="Broken" value="{CCNetProject} broke at ${CCNetBuildDate} ${CCNetBuildTime } , last checkin(s) by ${CCNetFailureUsers}" /&gt;
            &lt;subject buildResult="Exception" value="Serious problem for ${CCNetProject}, it is now in Exception! Check status of network / sourcecontrol" /&gt;
            &lt;/subjectSettings&gt;
            </code>
            </remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.EmailSubject.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.EmailSubject.#ctor(ThoughtWorks.CruiseControl.Core.Publishers.EmailSubject.BuildResultType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Publishers.EmailSubject"/> class.	
            </summary>
            <param name="result">The result.</param>
            <param name="value">The value.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.EmailSubject.Equals(System.Object)">
            <summary>
            Equalses the specified o.	
            </summary>
            <param name="o">The o.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.EmailSubject.GetHashCode">
            <summary>
            Gets the hash code.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.EmailSubject.ToString">
            <summary>
            Toes the string.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Publishers.EmailSubject.Value">
            <summary>
            The value of the subject line, the text to be used for the subject. This may contain variables, see below. 
            </summary>
            <version>1.0</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Publishers.EmailSubject.BuildResult">
            <summary>
            A build result state, see below for the possible values.
            </summary>
            <version>1.0</version>
            <default>n/a</default>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Publishers.EmailSubject.BuildResultType">
            <summary>
            	
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Publishers.EmailSubject.BuildResultType.Success">
            <summary>
            Build is ok
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Publishers.EmailSubject.BuildResultType.Broken">
            <summary>
            Build has failed
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Publishers.EmailSubject.BuildResultType.StillBroken">
            <summary>
            Build has failed, and previous one was also failed
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Publishers.EmailSubject.BuildResultType.Fixed">
            <summary>
            Build is ok, but previous one was failed
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Publishers.EmailSubject.BuildResultType.Exception">
            <summary>
            An unforeseen exception occured during the build (source control error for example)
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Publishers.EmailUser">
            <summary>
            Defines a user who will receive e-mails.
            </summary>
            <title>Email User</title>
            <version>1.0</version>
            <example>
            <code>
            &lt;user name="BuildGuru" group="buildmaster" address="buildguru@mycompany.com" /&gt;
            </code>
            </example>
            <remarks>
            <para>
            Users do not need to belong to a group. If they are not in a group then they may still receive emails when they
            have committed changes that are part of the current build, depending on the setting of
            "modifierNotificationTypes" and the state of the build.
            </para>
            <para>
            See the section on the &lt;converters&gt; setting for manipulations that can be done to transform a user name
            to an address if the address is not specified.
            </para>
            <para type="warning">
            It is essential that the value of the name attribute matches the name for the user in the sourcecontrol system.
            This is the only way that CruiseControl.Net can reconcile the user that committed a change with the address to
            send the email to.
            </para>
            </remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.EmailUser.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.EmailUser.#ctor(System.String,System.String,System.String)">
            <summary>
            Extended constructor
            </summary>
            <param name="name"></param>
            <param name="group"></param>
            <param name="address"></param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.EmailUser.Equals(System.Object)">
            <summary>
            Equalses the specified obj.	
            </summary>
            <param name="obj">The obj.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.EmailUser.GetHashCode">
            <summary>
            Gets the hash code.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.EmailUser.ToString">
            <summary>
            Toes the string.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Publishers.EmailUser.Name">
            <summary>
            The user name of a user. This should match the user name in Source Control. 
            </summary>
            <version>1.0</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Publishers.EmailUser.Address">
            <summary>
            The Internet-style email address of the user (e.g., "joe@example.com").
            </summary>
            <version>1.0</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Publishers.EmailUser.Group">
            <summary>
            The group that the user is in. This needs to match the name of one of the &lt;group&gt; elements.
            </summary>
            <version>1.3</version>
            <default>None</default>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Publishers.ForceBuildPublisher">
            <summary>
            <para>
            The ForceBuildPublisher forces a build on a local or remote build server. It uses .NET Remoting to invoke a
            forced build on the CruiseControl.NET server at the specified URI.
            </para>
            <para>
            The forced build runs asynchronously, i.e. the ForceBuildPublisher does not wait for the forced build to
            finish. The ForceBuildPublisher is a great way to help <link> Splitting the build </link>.
            </para>
            <para>
            An alternative to the ForceBuildPublisher is the <link>Project Trigger</link>. The main difference is that the 
            ForceBuildPublisher is placed in the configuration for the primary project, while the ProjectTrigger is is
            placed in the configuration for the dependent project.
            </para>
            </summary>
            <title>Force Builder Publisher</title>
            <version>1.0</version>
            <example>
            <code title="Simple Example">
            &lt;forcebuild&gt;
            &lt;project&gt;AcceptanceTestProject&lt;/project&gt;
            &lt;serverUri&gt;tcp://buildserver2:21234/CruiseManager.rem&lt;/serverUri&gt;
            &lt;integrationStatus&gt;Success&lt;/integrationStatus&gt;
            &lt;enforcerName&gt;Forcer&lt;/enforcerName&gt;
            &lt;/forcebuild&gt;
            </code>
            <code title="Example with Security">
            &lt;forcebuild&gt;
            &lt;project&gt;AcceptanceTestProject&lt;/project&gt;
            &lt;serverUri&gt;tcp://buildserver2:21234/CruiseManager.rem&lt;/serverUri&gt;
            &lt;integrationStatus&gt;Success&lt;/integrationStatus&gt;
            &lt;security&gt;
            &lt;namedValue name="username" value="autobuild" /&gt;
            &lt;namedValue name="password" value="autobuild" /&gt;
            &lt;/security&gt;
            &lt;/forcebuild&gt;
            </code>
            </example>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.ForceBuildPublisher.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Publishers.ForceBuildPublisher"/> class.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.ForceBuildPublisher.#ctor(ThoughtWorks.CruiseControl.Remote.ICruiseServerClientFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Publishers.ForceBuildPublisher"/> class.	
            </summary>
            <param name="factory">The factory.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.ForceBuildPublisher.Execute(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Executes the specified result.	
            </summary>
            <param name="result">The result.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Publishers.ForceBuildPublisher.Project">
            <summary>
            The CCNet project to force build.
            </summary>
            <version>1.0</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Publishers.ForceBuildPublisher.EnforcerName">
            <summary>
            Identification of a ForceBuildPublisher. This value is passed to the CCNetRequestSource attribute of the
            forced  project's build.
            </summary>
            <version>1.0</version>
            <default>BuildForcer</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Publishers.ForceBuildPublisher.ServerUri">
            <summary>
            The URI for the local or remote server managing the project to build. The default value is the default URI
            for the local build server.
            </summary>
            <version>1.0</version>
            <default>tcp://localhost:21234/CruiseManager.rem</default>
            <remarks>
            This publisher only uses .NET Remoting for connecting to the remote server. As such, it cannot use the 
            HTTP protocol for connecting.
            </remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Publishers.ForceBuildPublisher.IntegrationStatus">
            <summary>
            The condition determining whether or not the remoting call should be made. The default value is "Success"
            indicating that the specified build will be forced if the current build was successful
            </summary>
            <version>1.0</version>
            <default>Success</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Publishers.ForceBuildPublisher.SecurityCredentials">
            <summary>
            The security credentials to pass through to the remote server.
            </summary>
            <version>1.5</version>
            <default>None</default>
            <remarks>
            These are only needed if the remote project has security applied. If credentials are passed to the remote
            server, then the enforcerName will be ignored.
            Valid security tokens are: "username" and "password" (this list may be expanded in future).
            </remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Publishers.ForceBuildPublisher.Parameters">
            <summary>
            The parameters to pass to the remote project.
            </summary>
            <version>1.5</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Publishers.ForceBuildPublisher.Logger">
            <summary>
            The logger to use.
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Publishers.HtmlDetailsMessageBuilder">
            <summary>
            	
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Publishers.IMessageBuilder">
            <summary>
            	
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.IMessageBuilder.BuildMessage(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Builds the message.	
            </summary>
            <param name="result">The result.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Publishers.IMessageBuilder.xslFiles">
            <summary>
            The xslFiles that could be used for the transformations done by BuildMessage
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.HtmlDetailsMessageBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Publishers.HtmlDetailsMessageBuilder"/> class.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.HtmlDetailsMessageBuilder.BuildMessage(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Builds the message.	
            </summary>
            <param name="result">The result.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Publishers.HtmlDetailsMessageBuilder.xslFiles">
            <summary>
            Gets or sets the XSL files.	
            </summary>
            <value>The XSL files.</value>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Publishers.HtmlLinkMessageBuilder">
            <summary>
            	
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.HtmlLinkMessageBuilder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Publishers.HtmlLinkMessageBuilder"/> class.	
            </summary>
            <param name="includeAnchorTag">The include anchor tag.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.HtmlLinkMessageBuilder.BuildMessage(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Builds the message.	
            </summary>
            <param name="result">The result.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Publishers.HtmlLinkMessageBuilder.xslFiles">
            <summary>
            Gets or sets the XSL files.	
            </summary>
            <value>The XSL files.</value>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Publishers.IManifestGenerator">
            <summary>
            Defines a manifest generator for packages.
            </summary>
            <title>Manifest Generators</title>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.IManifestGenerator.Generate(ThoughtWorks.CruiseControl.Core.IIntegrationResult,System.String[])">
            <summary>
            Generate a manifest for a package.
            </summary>
            <param name="result">The result of the build.</param>
            <param name="packagedFiles">The files that were packaged.</param>
            <returns>An <see cref="T:System.Xml.XmlDocument"/> containing the manifest.</returns>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Publishers.IPackageItem">
            <summary>
            Defines an item that can be packaged.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.IPackageItem.Package(ThoughtWorks.CruiseControl.Core.IIntegrationResult,ICSharpCode.SharpZipLib.Zip.ZipOutputStream)">
            <summary>
            Packages the specified items.
            </summary>
            <param name="result">The result.</param>
            <param name="zipStream">The zip stream.</param>
            <returns>The name of the files that were packaged.</returns>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Publishers.ManifestGenerator">
            <summary>
            Generate a default manifest for a package.
            </summary>
            <title>Default Manifest Generator</title>
            <version>1.4.4</version>
            <remarks>
            <para>
            The default manifest lists all the files that are included in the package, plus a list of all the modifications for the build.
            </para>
            <para>
            The following is an example of the type of manifest generated:
            </para>
            <code>
            &lt;manifest&gt;
            &lt;header project="Test project" label="A Label" build="ForceBuild" status="Unknown"&gt;
            &lt;modification user="johnDoe" changeNumber="1" time="2009-01-01T00:00:00"&gt;
            &lt;comment&gt;A comment&lt;/comment&gt;
            &lt;file name="first file" type="Add" /&gt;
            &lt;file name="second file" type="Modify" /&gt;
            &lt;/modification&gt;
            &lt;/header&gt;
            &lt;file name="first file" /&gt;
            &lt;/manifest&gt;
            </code>
            </remarks>
            <example>
            <code>
            &lt;manifest type="defaultManifestGenerator" /&gt;
            </code>
            </example>
            <key name="type">
            <description>The type of generator.</description>
            <value>defaultManifestGenerator</value>
            </key>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.ManifestGenerator.Generate(ThoughtWorks.CruiseControl.Core.IIntegrationResult,System.String[])">
            <summary>
            Generate a manifest for a package.
            </summary>
            <param name="result">The result of the build.</param>
            <param name="packagedFiles">The files that were packaged.</param>
            <returns>An <see cref="T:System.Xml.XmlDocument"/> containing the manifest.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.ManifestGenerator.AddManifestHeader(ThoughtWorks.CruiseControl.Core.IIntegrationResult,System.Xml.XmlElement)">
            <summary>
            Generates the manifest header.
            </summary>
            <param name="result"></param>
            <param name="rootElement"></param>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Publishers.ManifestImporter">
            <summary>
            Imports a manifest from an existing file.
            </summary>
            <title>Manifest Importer</title>
            <version>1.4.4</version>
            <remarks>
            This "generator" is not a true generator, instead it will import an existing file to use as the package
            manifest.
            </remarks>
            <example>
            <code>
            &lt;manifest type="importManifest" file="ExistingManifest.xml" /&gt;
            </code>
            </example>
            <key name="type">
            <description>The type of generator.</description>
            <value>importManifest</value>
            </key>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.ManifestImporter.Generate(ThoughtWorks.CruiseControl.Core.IIntegrationResult,System.String[])">
            <summary>
            Generate a manifest for a package.
            </summary>
            <param name="result">The result of the build.</param>
            <param name="packagedFiles">The files that were packaged.</param>
            <returns>An <see cref="T:System.Xml.XmlDocument"/> containing the manifest.</returns>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Publishers.ManifestImporter.FileName">
            <summary>
            The name of the file to import.
            </summary>
            <remarks>
            If this is a relative file, it will be based relative to the working directory of the project.
            </remarks>
            <version>1.4.4</version>
            <default>n/a</default>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Publishers.ModificationHistoryPublisher">
            <title>Modification History Publisher</title>
            <version>1.3</version>
            <summary>
            <para>
            This publisher logs all modifications for each build in a file.
            </para>
            <para>
            These modifications can be viewed in the Dashboard with the <link>modificationHistoryProjectPlugin</link> plugin enabled.
            </para>
            </summary>
            <example>
            <code title="Minimalist example">
            &lt;modificationHistory /&gt;
            </code>
            <code title="Full example">
            &lt;modificationHistory  onlyLogWhenChangesFound="true" /&gt;
            </code>
            </example>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Publishers.ModificationHistoryPublisher.DataHistoryFileName">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.ModificationHistoryPublisher.Execute(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Executes the specified result.	
            </summary>
            <param name="result">The result.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.ModificationHistoryPublisher.LoadHistory(System.String)">
            <summary>
            Loads the history.	
            </summary>
            <param name="artifactDirectory">The artifact directory.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Publishers.ModificationHistoryPublisher.OnlyLogWhenChangesFound">
            <summary>
            When true, the history file will only be updated when the build contains modifications. This setting is mainly for keeping the
            file small when there are a lot builds without modifications. For example: like CCNet, there is a public website where everybody
            can force a build.
            </summary>
            <version>1.3</version>
            <default>false</default>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Publishers.PackageFile">
            <summary>
            A file to include in the package.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.PackageFile.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Publishers.PackageFile"/> class.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.PackageFile.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Publishers.PackageFile"/> class.
            </summary>
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.PackageFile.Package(ThoughtWorks.CruiseControl.Core.IIntegrationResult,ICSharpCode.SharpZipLib.Zip.ZipOutputStream)">
            <summary>
            Packages the specified items.
            </summary>
            <param name="result">The result.</param>
            <param name="zipStream">The zip stream.</param>
            <returns>The name of the files that were packaged.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.PackageFile.GenerateFileList(ThoughtWorks.CruiseControl.Core.IIntegrationResult,ThoughtWorks.CruiseControl.Core.Util.IFileSystem)">
            <summary>
            Generate the list of files to include in the package.
            </summary>
            <param name="result">The build result.</param>
            <param name="fileSystem">The file system.</param>
            <returns>A list of all the files to be included.</returns>
            <remarks>
            This method uses custom logic for handling "**"
            </remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Publishers.PackageFile.SourceFile">
            <summary>
            The name and path of the file to store into the package
            </summary>
            <remarks>
            This is the path to the file that you wish to store in the package
            </remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Publishers.PackageFile.TargetFileName">
            <summary>
            The name of the file that is to be saved. 
            </summary>
            <remarks>
            Use this attribute only if you wish to rename the file
            being saved to a different name.
            </remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Publishers.PackageFile.TargetFolder">
            <summary>
            The name of the folder in the package that the file will be saved under
            </summary>
            <remarks>
            Use this attribute if you wish to override the location of the file being saved in 
            the package.
            </remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Publishers.PackageFile.FileSystem">
            <summary>
            Gets or sets the file system.
            </summary>
            <value>The file system.</value>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Publishers.PackageFolder">
            <summary>
            	
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.PackageFolder.Package(ThoughtWorks.CruiseControl.Core.IIntegrationResult,ICSharpCode.SharpZipLib.Zip.ZipOutputStream)">
            <summary>
            Packages the specified items.
            </summary>
            <param name="result">The result.</param>
            <param name="zipStream">The zip stream.</param>
            <returns>The name of the files that were packaged.</returns>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Publishers.PackageFolder.SourceFolder">
            <summary>
            The name of the folder to store into the package
            </summary>
            <remarks>
            This is the path to the folder that you wish to store in the package
            </remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Publishers.PackageFolder.FileFilter">
            <summary>
            The filename filter to apply
            </summary>
            <remarks>
            Use this attribute to filter files that will be stored into the package. For example <code>*.*</code> 
            will select all files (default), <code>*.xml</code> will only select xml files, <code>test*.xml</code> will select 
            only files that start with the word test and have an extension of xml.
            </remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Publishers.PackageFolder.TargetFolder">
            <summary>
            The name of the folder in the package that the file will be saved under
            </summary>
            <remarks>
            Use this attribute if you wish to override the location of the files being saved in 
            the package.
            </remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Publishers.PackageFolder.IncludeSubFolders">
            <summary>
            Recursively save files
            </summary>
            <remarks>
            Use this attribute if you wish to recursively add files to the package
            </remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Publishers.PackageFolder.Flatten">
            <summary>
            Flatten the hierachy
            </summary>
            <remarks>
            Use this attribute if you wish to save the files without folder information
            </remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Publishers.PackagePublisher">
            <summary>
            <para>
            Generates a ZIP file package containing the specified files.
            </para>
            <para>
            This will generate a "package" of files in a compressed format. The files must be specified, plus an optional manifest can be included.
            </para>
            <para>
            This publisher also allows the generation of a "manifest" to include in the package. A manifest contains additional details on the
            package, both at a general level and at a file level.
            </para>
            </summary>
            <title>Package Publisher</title>
            <version>1.4.4</version>
            <example>
            <code title="Full example">
            &lt;package&gt;
            &lt;name&gt;Example&lt;/name&gt;
            &lt;compression&gt;9&lt;/compression&gt;
            &lt;always&gt;true&lt;/always&gt;
            &lt;flatten&gt;true&lt;/flatten&gt;
            &lt;baseDirectory&gt;C:\Builds\CC.Net&lt;/baseDirectory&gt;
            &lt;manifest type="defaultManifestGenerator" /&gt;
            &lt;files&gt;
            &lt;file&gt;Results.txt&lt;/file&gt;
            &lt;/files&gt;
            &lt;/package&gt;
            </code>
            </example>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.PackagePublisher.Execute(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Run this publisher.
            </summary>
            <param name="result">The result of the build.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.PackagePublisher.UpgradeConfiguration(System.Version,System.Xml.XmlNode)">
            <summary>
            Upgrades the configuration for the node.
            </summary>
            <param name="configVersion">The version of the configuration.</param>
            <param name="node">The input node.</param>
            <returns>The upgraded node</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.PackagePublisher.AddToPackageList(ThoughtWorks.CruiseControl.Core.IIntegrationResult,System.String,System.String,System.Int32)">
            <summary>
            Add the package to the list of packages.
            </summary>
            <param name="result"></param>
            <param name="listFile"></param>
            <param name="fileName"></param>
            <param name="numberOfFiles"></param>
            <remarks>
            This is to allow discoverability of packages. In future CruiseControl.Net will allow clients to download this
            list to see which packages are available.
            </remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.PackagePublisher.MoveFile(ThoughtWorks.CruiseControl.Core.IIntegrationResult,System.String)">
            <summary>
            Moves the file from its temporary (working) location to its final location.
            </summary>
            <param name="result"></param>
            <param name="tempFile"></param>
            <returns></returns>
            <remarks>
            This method will also generate the correct name of the file.
            </remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.PackagePublisher.DeleteFileWithRetry(System.String)">
            <summary>
            Attempts to delete a file within a retry loop.
            </summary>
            <param name="actualFile"></param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.PackagePublisher.AddManifest(ThoughtWorks.CruiseControl.Core.IIntegrationResult,System.Collections.Generic.List{System.String},ICSharpCode.SharpZipLib.Zip.ZipOutputStream)">
            <summary>
            Generate the manifest and add it to the package.
            </summary>
            <param name="result"></param>
            <param name="packagedFiles"></param>
            <param name="zipStream"></param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.PackagePublisher.EnsureFileExtension(System.String,System.String)">
            <summary>
            Ensures the file extension.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="extension">The extension.</param>
            <returns>The filename with the extension.</returns>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Publishers.PackagePublisher.PackageName">
            <summary>
            The name of the package file.
            </summary>
            <remarks>
            This will be the filename of the package. If the extension zip is omitted, it will be added automatically.
            </remarks>
            <version>1.4.4</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Publishers.PackagePublisher.CompressionLevel">
            <summary>
            The level of compression to use. The valid range is from zero to nine, zero is no compression and nine is maximum compression.
            </summary>
            <version>1.4.4</version>
            <default>5</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Publishers.PackagePublisher.AlwaysPackage">
            <summary>
            Whether the package should always be generated or not.
            </summary>
            <remarks>
            By default a package will only be generated for a successful build. Setting this property
            to true, and including it in the publishers section means the package will always be 
            generated, irrespective of the outcome of the build.
            </remarks>
            <version>1.4.4</version>
            <default>false</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Publishers.PackagePublisher.Flatten">
            <summary>
            Should the file structure be flattened or not.
            </summary>
            <remarks>
            By default, the folder structure will also be included in the package. Setting this property
            to true will flatten (omit) the folder information.
            </remarks>
            <version>1.4.4</version>
            <default>false</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Publishers.PackagePublisher.ManifestGenerator">
             <summary>
            The manifest generator to be used.
             </summary>
             <remarks>
             If this property is not set no manifest will be generated.
             </remarks>
             <version>1.4.4</version>
             <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Publishers.PackagePublisher.PackageList">
            <summary>
            The list of files and folders to include in the package.
            </summary>
            <remarks>
            All relative files will be relative to the baseDirectory.
            </remarks>
            <version>1.6</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Publishers.PackagePublisher.OutputDirectory">
            <summary>
            The location to output the package to.
            </summary>
            <version>1.4.4</version>
            <default>Project Artifact Directory</default>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Publishers.RssPublisher">
            <summary>
            <para>
            This publisher generates an RSS file reporting the latest results for a Project.
            </para>
            <para>
            The RSS feed is available via the Dasboard in the Project Report. There needs to be 1 build done with this publisher for the icon
            to show up.
            </para>
            </summary>
            <title>RSS Publisher</title>
            <version>1.3</version>
            <example>
            <code title="Minimalist example">
            &lt;rss /&gt;
            </code>
            <code title="Full example">
            &lt;rss items="30" /&gt;
            </code>
            </example>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.RssPublisher.LoadRSSDataDocument(System.String)">
            <summary>
            Loads the RSS data document.	
            </summary>
            <param name="artifactDirectory">The artifact directory.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.RssPublisher.Execute(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Executes the specified result.	
            </summary>
            <param name="result">The result.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Publishers.RssPublisher.NumberOfItems">
            <summary>
            The number of items to be displayed.
            </summary>
            <default>20</default>
            <version>1.4.4</version>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Publishers.Statistics.FirstMatch">
            <summary>
            A statistic that extracts the first item that matches the specifed XML XPath.
            </summary>
            <title>FirstMatch</title>
            <version>1.0</version>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Publishers.Statistics.StatisticBase">
            <summary>
            Provides the base functionality for statistics.
            </summary>
            <title>Statistics</title>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Publishers.Statistics.StatisticBase.name">
            <summary>
            The name of this statistic.
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Publishers.Statistics.StatisticBase.xpath">
            <summary>
            The XML XPath to locate the value of this statistic.
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Publishers.Statistics.StatisticBase.generateGraph">
            <summary>
            Should a graph be generated for this statistic?
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Publishers.Statistics.StatisticBase.include">
            <summary>
            Should this statistic be collected and published?
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.Statistics.StatisticBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Publishers.Statistics.StatisticBase"/> class.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.Statistics.StatisticBase.#ctor(System.String,System.String)">
            <summary>
            Create a statistic that extracts all items that match the specifed XML XPath.
            </summary>
            <param name="name">The name of the statistic.</param>
            <param name="xpath">The XML XPath to locate the values.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.Statistics.StatisticBase.Apply(System.Xml.XPath.XPathNavigator)">
            <summary>
            Extract the value of the statistic from the specified XML data.
            </summary>
            <param name="nav">A navigator into an XML document containing the statistic data.</param>
            <returns>The statistic value.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.Statistics.StatisticBase.Evaluate(System.Xml.XPath.XPathNavigator)">
            <summary>
            Extract the value of the statistic from the specified XML data.
            </summary>
            <param name="nav">A navigator into an XML document containing the statistic data.</param>
            <returns>The statistic value.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.Statistics.StatisticBase.Equals(System.Object)">
            <summary>
            Equalses the specified obj.	
            </summary>
            <param name="obj">The obj.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.Statistics.StatisticBase.GetHashCode">
            <summary>
            Gets the hash code.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Publishers.Statistics.StatisticBase.Xpath">
            <summary>
            The XML XPath to locate the value of this statistic.
            </summary>
            <default>n/a</default>
            <version>1.0</version>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Publishers.Statistics.StatisticBase.Name">
            <summary>
            The name of the statistic.
            </summary>
            <default>n/a</default>
            <version>1.0</version>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Publishers.Statistics.StatisticBase.GenerateGraph">
            <summary>
            Should a graph be generated for this statistic?
            </summary>
            <default>false</default>
            <version>1.3</version>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Publishers.Statistics.StatisticBase.Include">
            <summary>
            Should this statistic be collected and published?
            </summary>
            <default>true</default>
            <version>1.3</version>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.Statistics.FirstMatch.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Publishers.Statistics.FirstMatch"/> class.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.Statistics.FirstMatch.#ctor(System.String,System.String)">
            <summary>
            Create a statistic that extracts the first item that matches the specifed XML XPath.
            </summary>
            <param name="name">The name of the statistic.</param>
            <param name="xpath">The XML XPath to locate the value.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.Statistics.FirstMatch.Evaluate(System.Xml.XPath.XPathNavigator)">
            <summary>
            Extract the value of the statistic from the specified XML data.
            </summary>
            <param name="nav">A navigator into an XML document containing the statistic data.</param>
            <returns>The statistic value.</returns>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Publishers.Statistics.IPlotter">
            <summary>
            Plot a set of statistic data.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.Statistics.IPlotter.DrawGraph(System.Collections.IList,System.Collections.IList,System.String)">
            <summary>
            Plot a set of statistic data.
            </summary>
            <param name="ordinateData">The Y-axis data values.</param>
            <param name="abscissaData">The X-axis data values.</param>
            <param name="statisticName">The name of the statistic to plot.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.Statistics.IPlotter.WriteToStream(System.Collections.IList,System.Collections.IList,System.IO.Stream)">
            <summary>
            Plot a set of statistic data and write the image to a stream.
            </summary>
            <param name="ordinateData">The Y-axis data values.</param>
            <param name="abscissaData">The X-axis data values.</param>
            <param name="stream">The stream to receive the resulting image.</param>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Publishers.Statistics.Plotter">
            A 2-dimensional surface plotter.
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Publishers.Statistics.Plotter.savePath">
            <summary>
            The directory where the file will be created.
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Publishers.Statistics.Plotter.fileExtension">
            <summary>
            The disk file extension (should make sense for <see cref="F:ThoughtWorks.CruiseControl.Core.Publishers.Statistics.Plotter.imageFormat"/>.
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Publishers.Statistics.Plotter.imageFormat">
            <summary>
            The type of image to generate.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.Statistics.Plotter.#ctor(System.String,System.String,System.Drawing.Imaging.ImageFormat)">
            <summary>
            Create a 2-dimensional surface plotter with the specified disk location and image format.
            </summary>
            <param name="savePath">The directory where the file will be created.</param>
            <param name="fileExtension">The disk file extension (should make sense
            for <paramref name="imageFormat"/>.</param>
            <param name="imageFormat">The type of image to generate.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.Statistics.Plotter.DrawGraph(System.Collections.IList,System.Collections.IList,System.String)">
            <summary>
            Plot a set of statistic data and save it to the configured disk file.
            </summary>
            <param name="ordinateData">The Y-axis data values.</param>
            <param name="abscissaData">The X-axis data values.</param>
            <param name="statisticName">The name of the statistic to plot.</param>
            <remarks>
            The disk file name will be
            <i><see cref="F:ThoughtWorks.CruiseControl.Core.Publishers.Statistics.Plotter.savePath"/></i>.<i><paramref name="statisticName"/></i>.<i><see cref="F:ThoughtWorks.CruiseControl.Core.Publishers.Statistics.Plotter.fileExtension"/></i>. 
            </remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.Statistics.Plotter.WriteToStream(System.Collections.IList,System.Collections.IList,System.IO.Stream)">
            <summary>
            Plot a set of statistic data and write the image to a stream.
            </summary>
            <param name="ordinateData">The Y-axis data values.</param>
            <param name="abscissaData">The X-axis data values.</param>
            <param name="stream">The stream to receive the resulting image.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.Statistics.Plotter.Plot(System.Collections.IList,System.Collections.IList)">
            <summary>
            Create a 2-dimensional surface plot of the specified statistic data.
            </summary>
            <param name="ordinateData">The Y-axis data values.</param>
            <param name="abscissaData">The X-axis data values.</param>
            <returns>The plot image bitmap.</returns>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Publishers.Statistics.Statistic">
            <summary>
            A generic statistic.
            </summary>
            <title>Statistic</title>
            <version>1.0</version>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.Statistics.Statistic.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Publishers.Statistics.Statistic"/> class.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.Statistics.Statistic.#ctor(System.String,System.String)">
            <summary>
            Create a statistic that extracts all items that match the specifed XML XPath.
            </summary>
            <param name="name">The name of the statistic.</param>
            <param name="xpath">The XML XPath to locate the values.</param>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Publishers.Statistics.StatisticResult">
            <summary>
            Data object for the value of a statistic.
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Publishers.Statistics.StatisticResult.statName">
            <summary>
            The name of this statistic.
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Publishers.Statistics.StatisticResult.value">
            <summary>
            The value of this instance of this statistic.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.Statistics.StatisticResult.#ctor(System.String,System.Object)">
            <summary>
            Create a statistic value data object.
            </summary>
            <param name="statName">The name of this statistic.</param>
            <param name="value">The value of this instance of this statistic.</param>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Publishers.Statistics.StatisticResult.StatName">
            <summary>
            The name of this statistic.
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Publishers.Statistics.StatisticResult.Value">
            <summary>
            The value of this instance of this statistic.
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Publishers.Statistics.StatisticsBuilder">
            <summary>
            	
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Publishers.Statistics.StatisticsBuilder.logStatistics">
            <summary>
            The statistics this builder works with.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.Statistics.StatisticsBuilder.#ctor">
            <summary>
            Create a StatisticsBuilder with the default set of statistics, all included.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.Statistics.StatisticsBuilder.ProcessBuildResults(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Extract all the statistics from the specified build results.
            </summary>
            <param name="result">The results of the build.</param>
            <returns>The set of statistic values.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.Statistics.StatisticsBuilder.ToXml(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Convert the build results into XML.
            </summary>
            <param name="result">The build results.</param>
            <returns>The XML results.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.Statistics.StatisticsBuilder.ProcessBuildResults(System.String)">
            <summary>
            Extract all the statistics from the specified XML build results.
            </summary>
            <param name="xmlString"></param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.Statistics.StatisticsBuilder.Add(ThoughtWorks.CruiseControl.Core.Publishers.Statistics.StatisticBase)">
            <summary>
            Add a statistic to the build if its Include property is true.
            </summary>
            <param name="statistic">The name of the statistic.</param>
            <remarks>
            If the statistic's <see cref="P:ThoughtWorks.CruiseControl.Core.Publishers.Statistics.StatisticBase.Include"/> property
            is false, this method may actually remove it from the list!
            </remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.Statistics.StatisticsBuilder.ProcessLog(System.Xml.XPath.IXPathNavigable)">
            <summary>
            Extract all the statistics from the specified XML build results document.
            </summary>
            <param name="doc">The build results.</param>
            <returns>The set of statistics.</returns>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Publishers.Statistics.StatisticsBuilder.Statistics">
            <summary>
            The statistics this builder works with.
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Publishers.Statistics.StatisticsCalculator">
            <summary>
            	
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.Statistics.StatisticsCalculator.Variance(System.Double[])">
            <summary>
            Variances the specified list.	
            </summary>
            <param name="list">The list.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.Statistics.StatisticsCalculator.Mean(System.Double[])">
            <summary>
            Means the specified list.	
            </summary>
            <param name="list">The list.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.Statistics.StatisticsCalculator.StandardDeviation(System.Double[])">
            <summary>
            Standards the deviation.	
            </summary>
            <param name="list">The list.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Publishers.Statistics.StatisticsChartGenerator">
            <summary>
            A charting tool for <see cref="T:ThoughtWorks.CruiseControl.Core.Publishers.Statistics.StatisticBase"/>s.
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Publishers.Statistics.StatisticsChartGenerator.relevantStats">
            <summary>
            The statistic names to be included in the chart.
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Publishers.Statistics.StatisticsChartGenerator.plotter">
            <summary>
            The plotter that will render the chart.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.Statistics.StatisticsChartGenerator.#ctor">
            <summary>
            Create a chart generator using the default data plotter.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.Statistics.StatisticsChartGenerator.#ctor(ThoughtWorks.CruiseControl.Core.Publishers.Statistics.IPlotter)">
            <summary>
            Create a chart generator using the specified data plotter.
            </summary>
            <param name="plotter">The plotter that will render the chart.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.Statistics.StatisticsChartGenerator.GetPlotter(System.String)">
            <summary>
            Get a data plotter for the specified fileid.
            </summary>
            <param name="savePath">The fileid to store the image at.</param>
            <returns>The plotter.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.Statistics.StatisticsChartGenerator.Process(System.Xml.XmlDocument,System.String)">
            <summary>
            Extract the statistics from the specified XML statistics
            document and create a chart image at the specifed fileid.
            </summary>
            <param name="xmlDocument">The XML document containing the data.</param>
            <param name="savePath">The location of the chart image file.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.Statistics.StatisticsChartGenerator.GetPlottableValue(System.String,System.String)">
            <summary>
            Convert the specified statistic value to a form amenable to plotting.
            </summary>
            <param name="relevantStat">The statistic name.</param>
            <param name="value">The value.</param>
            <returns>The plottable value.</returns>
            <remarks>
            Most values are returned unmodified.  Values for "Duration" statistics
            that look like time durations (<i>e.g.</i>, <code>12:34:56</code> are
            converted to an integer number of seconds.
            </remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.Statistics.StatisticsChartGenerator.AvailableStatistics(System.Xml.XmlDocument)">
            <summary>
            Determine what statistics are present in the specified XML statistics document.
            </summary>
            <param name="xmlDocument">The XML statistics document.</param>
            <returns>A list of statistic names.</returns>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Publishers.Statistics.StatisticsChartGenerator.RelevantStats">
            <summary>
            The statistic names to be included in the chart.
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Publishers.Statistics.StatisticsPublisher">
            <summary>
            <para>
            The publisher can be used to collect and update statistics for each build in a file. Some of the statistics which would be collected
            are build durations and test count.
            At the minimal, the publisher can be configured with just an empty &lt;statistics /&gt; element in the publishers section. This would
            pick up some default statistics for capturing during the build process.
            </para>
            <para type="info">
            Statistics publisher must come after any File Merge tasks in the publishers section, in case you want to collect statistics from
            merged files.
            </para>
            <para>
            The task will generate a statistics.csv and report.xml file in the artifact directory.
            </para>
            </summary>
            <title> Statistics Publisher </title>
            <version>1.0</version>
            <remarks>
            <para>
            If you want to specify your own, or override the default statistics, it is possible to do so by supplying the name and xpath for the
            statistics and the corresponding location in the build log to pick the data from.
            </para>
            <code>
            &lt;statistics&gt;
            &lt;statisticList&gt;
            &lt;statistic name="metric_name" xpath="xpath expression"/&gt;
            &lt;firstMatch name="metric_name" xpath="xpath expression" /&gt;
            &lt;/statisticList&gt;
            &lt;/statistics&gt;
            </code>
            <para>
            It is also possible to optionally configure the statistics publisher to generate charts for any metric against different builds, and
            to even remove them altogether. This feature has been added in version 1.3:
            </para>
            <code>
            &lt;statistics&gt;
            &lt;statisticList&gt;
            &lt;statistic name="metric_name" xpath="xpath expression" generateGraph="true" include="true"/&gt;
            &lt;firstMatch name="metric_name" xpath="xpath expression" include="false"/&gt;
            &lt;/statisticList&gt;
            &lt;/statistics&gt;
            </code>
            <para>
            For the statistics configured with 'generateGraph="true"', a graph is generated with different builds on x-axis and the configured
            metric on y-axis in the artifacts directory named as &lt;statistic name&gt;.png. This chart would still be a very basic representation.
            For now at least, exporting the report to Excel for charting/analyis might be a better option.
            </para>
            </remarks>
            <example>
            <code title="Minimalist example">
            &lt;statistics /&gt;
            </code>
            </example>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Publishers.Statistics.StatisticsPublisher.CsvFileName">
            <summary>
            The location of the CSV statistics file, relative to the project artifacts directory.
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Publishers.Statistics.StatisticsPublisher.XmlFileName">
            <summary>
            The location of the XML statistics file, relative to the project artifacts directory.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.Statistics.StatisticsPublisher.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Publishers.Statistics.StatisticsPublisher"/> class.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.Statistics.StatisticsPublisher.Execute(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Publish the statistics for this build.
            </summary>
            <param name="integrationResult">The results of the build.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.Statistics.StatisticsPublisher.UpdateXmlFile(System.Collections.Generic.IEnumerable{ThoughtWorks.CruiseControl.Core.Publishers.Statistics.StatisticResult},ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Write the specified collection of statistics to the XML
            statistics file, creating it if it does not already exist
            </summary>
            <param name="stats">The collection of statistics.</param>
            <param name="integrationResult">The build for which the
            statistics were collected.</param>
            <remarks>
            The XML document takes the following form:
                &lt;statistics&gt;
                    &lt;integration build-label="label" status="status"
                            day="day_of_month" month="month_name" year="year"&gt;
                        &lt;statistic name="name"&gt;
                            value
                        &lt;/statistic&gt;
                    &lt;/integration&gt;
                &lt;/statistics&gt;
            </remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.Statistics.StatisticsPublisher.ToXml(System.Collections.Generic.IEnumerable{ThoughtWorks.CruiseControl.Core.Publishers.Statistics.StatisticResult})">
            <summary>
            Add the specified collection of statistics to the root of the specified XML document.
            </summary>
            <param name="stats">The statistics to add.</param>
            <returns>The added child element.</returns>
            <remarks>
            The XML added to the root of the document takes the following form:
                &lt;integration&gt;
                    &lt;statistic name="name"&gt;
                        value
                    &lt;/statistic&gt;
                &lt;/integration&gt;
            </remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.Statistics.StatisticsPublisher.XmlStatisticsFile(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Obtain the location of the XML statistics file, relative to the project artifacts directory.
            </summary>
            <param name="integrationResult">The running build.</param>
            <returns>The absolute file location.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.Statistics.StatisticsPublisher.UpdateCsvFile(ThoughtWorks.CruiseControl.Core.Publishers.Statistics.StatisticsResults,System.Collections.Generic.List{ThoughtWorks.CruiseControl.Core.Publishers.Statistics.StatisticBase},ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Write the specified collection of statistics to the CSV
            statistics file, creating it if it does not already exist,
            and returning the full set.
            </summary>
            <param name="statisticsResults"></param>
            <param name="statistics"></param>
            <param name="integrationResult">The build for which the
            statistics were collected.</param>
            <returns>The full XML statistics document.</returns>
            <remarks>
            Note: The <see cref="M:ThoughtWorks.CruiseControl.Core.Publishers.Statistics.StatisticsResults.AppendCsv(System.String,System.Collections.Generic.List{ThoughtWorks.CruiseControl.Core.Publishers.Statistics.StatisticBase})"/> method does not
            reconcile the specified statistics against the existing content of
            the file.  If statistics are added or removed over time, the headings
            and values may not match up correctly.
            </remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.Statistics.StatisticsPublisher.CsvStatisticsFile(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Obtain the location of the CSV statistics file, relative to the project artifacts directory.
            </summary>
            <param name="integrationResult">The running build.</param>
            <returns>The absolute file location.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.Statistics.StatisticsPublisher.LoadStatistics(System.String)">
            <summary>
            Loads the statistics.	
            </summary>
            <param name="artifactDirectory">The artifact directory.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Publishers.Statistics.StatisticsPublisher.ConfiguredStatistics">
            <summary>
            The list of statistics to be included in the build.
            </summary>
            <remarks>
            There is a default list of statistics to be included, and this list
            adds additional statistics to the build.  Any statistic defined with
            <b>include=false</b> will be omitted, even if it is in the
            default list.
            </remarks>
            <default>None</default>
            <version>1.0</version>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Publishers.Statistics.StatisticsResults">
            <summary>
            A collection of <see cref="T:ThoughtWorks.CruiseControl.Core.Publishers.Statistics.StatisticResult"/>s, with the
            elements in the order of their creation.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.Statistics.StatisticsResults.WriteStats(System.IO.TextWriter)">
            <summary>
            Write the values of the statistics to the specified output writer,
            in the order of their creation.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.Statistics.StatisticsResults.AppendCsv(System.String,System.Collections.Generic.List{ThoughtWorks.CruiseControl.Core.Publishers.Statistics.StatisticBase})">
            <summary>
            Add the specified statistics to the specified CSV statistic file.
            </summary>
            <param name="fileName">The absolute fileid of the file.</param>
            <param name="statistics">The statistics.</param>
            <remarks>
            Note: This method does not reconcile the specified statistics against
            the existing content of the file.  If statistics are added or removed
            over time, the headings and values may not match up correctly.
            </remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.Statistics.StatisticsResults.WriteHeadings(System.IO.TextWriter,System.Collections.Generic.List{ThoughtWorks.CruiseControl.Core.Publishers.Statistics.StatisticBase})">
            <summary>
            Write the column headings for the specified statistics to the specified
            output writer, in the order of their creation.
            </summary>
            <param name="writer">The writer.</param>
            <param name="statistics">The statistics.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.Statistics.StatisticsResults.Save(System.IO.TextWriter)">
            <summary>
            Write the statistics in XML to the specified output writer.
            </summary>
            <param name="outStream">The output writer.</param>
            <remarks>
            The output is written in the following format:
                &lt;statistics&gt;
                    &lt;statistic name="name"&gt;
                        value
                    &lt;/statistic&gt;
                &lt;/statistics&gt;
            </remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Publishers.Statistics.UnavailableStatisticsException">
            <summary>
            	
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.Statistics.UnavailableStatisticsException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Publishers.Statistics.UnavailableStatisticsException"/> class.	
            </summary>
            <param name="message">The message.</param>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Publishers.XmlIntegrationResultWriter">
            <summary>
            	
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.XmlIntegrationResultWriter.#ctor(System.IO.TextWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Publishers.XmlIntegrationResultWriter"/> class.	
            </summary>
            <param name="textWriter">The text writer.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.XmlIntegrationResultWriter.Write(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Writes the specified result.	
            </summary>
            <param name="result">The result.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.XmlIntegrationResultWriter.WriteBuildElement(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Writes the build element.	
            </summary>
            <param name="result">The result.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.XmlIntegrationResultWriter.WriteModifications(ThoughtWorks.CruiseControl.Core.Modification[])">
            <summary>
            Writes the modifications.	
            </summary>
            <param name="mods">The mods.</param>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Publishers.XmlIntegrationResultWriter.Formatting">
            <summary>
            Sets the formatting.	
            </summary>
            <value>The formatting.</value>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Publishers.XmlLogPublisher">
            <summary>
            <para>
            The Xml Log Publisher is used to create the log files used by the CruiseControl.NET Web Dashboard, so if you don't define an 
            &lt;xmllogger /&gt; section the Dashboard will not function correctly.
            </para>
            <para type="warning">
            You should place the &lt;xmllogger /&gt; in the &lt;publishers /&gt; section, after any <link>File Merge Task</link>s, in your 
            <link>Project Configuration Block</link>.
            </para>
            </summary>
            <title>XML Log Publisher</title>
            <version>1.0</version>
            <remarks>
            <para type="info">
            XML Log Publisher used to support the 'mergeFiles' option. This functionality is now removed and you should use <link>File Merge
            Task</link> instead.
            </para>
            </remarks>
            <example>
            <code title="Minimalist example">
            &lt;xmllogger /&gt;
            </code>
            <code title="Full example">
            &lt;xmllogger logDir="c:\myproject\buildlogs" /&gt;
            </code>
            </example>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Publishers.XmlLogPublisher.DEFAULT_LOG_SUBDIRECTORY">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.XmlLogPublisher.LogDirectory(System.String)">
            <summary>
            Logs the directory.	
            </summary>
            <param name="artifactDirectory">The artifact directory.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Publishers.XmlLogPublisher.Execute(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Executes the specified result.	
            </summary>
            <param name="result">The result.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Publishers.XmlLogPublisher.ConfiguredLogDirectory">
            <summary>
            The directory to save log files to. If relative, then relative to the Project Artifact Directory.
            </summary>
            <version>1.0</version>
            <default>buildlogs</default>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Queues.IIntegrationQueue">
            <summary>
            Interface for the project integrators to communicate with for adding their integration
            requests to a queue.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Queues.IIntegrationQueue.Enqueue(ThoughtWorks.CruiseControl.Core.Queues.IIntegrationQueueItem)">
            <summary>
            Add a project integration request be added to the integration queue.
            If no requests are on that queue already the integration is just kicked off immediately.
            If the request is a force build and an integration is already on the queue for that project
            then the queue request is ignored as it is redundant.
            </summary>
            <param name="integrationQueueItem">The integration queue item.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Queues.IIntegrationQueue.Dequeue">
            <summary>
            Releases the next integration request on the queue to start it's integration.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Queues.IIntegrationQueue.RemovePendingRequest(ThoughtWorks.CruiseControl.Core.IProject)">
            <summary>
            Removes a pending integration request (i.e. one that has not yet started) for this
            project from the queue if it is available.
            </summary>
            <param name="project">The project to have pending items removed from the queue.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Queues.IIntegrationQueue.RemoveProject(ThoughtWorks.CruiseControl.Core.IProject)">
            <summary>
            Removes all queued integrations for this project. To be invoked when "stopping"
            a project.
            </summary>
            <param name="project">The project to be removed.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Queues.IIntegrationQueue.GetQueuedIntegrations">
            <summary>
            Returns an array of the current queued integrations on the queue.
            </summary>
            <returns>Array of current queued integrations on the queue.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Queues.IIntegrationQueue.GetNextRequest(ThoughtWorks.CruiseControl.Core.IProject)">
            <summary>
            Gets the next request.	
            </summary>
            <param name="project">The project.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Queues.IIntegrationQueue.HasItemOnQueue(ThoughtWorks.CruiseControl.Core.IProject)">
            <summary>
            Determines whether [has item on queue] [the specified project].	
            </summary>
            <param name="project">The project.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Queues.IIntegrationQueue.HasItemPendingOnQueue(ThoughtWorks.CruiseControl.Core.IProject)">
            <summary>
            Determines whether [has item pending on queue] [the specified project].	
            </summary>
            <param name="project">The project.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Queues.IIntegrationQueue.BlockQueue(ThoughtWorks.CruiseControl.Core.Queues.IIntegrationQueue)">
            <summary>
            Try to block this queue, based upon a request from another queue.
            While blocked, no projects in this queue can integrate.
            </summary>
            <param name="requestingQueue">Queue requesting that a lock be taken out</param>
            <returns>True if the queue is now blocked, false if the queue could
            not be blocked due to being in-use.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Queues.IIntegrationQueue.UnblockQueue(ThoughtWorks.CruiseControl.Core.Queues.IIntegrationQueue)">
            <summary>
            Unblock this queue.
            </summary>
            <param name="requestingQueue">Queue requesting that a lock be released</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Queues.IIntegrationQueue.TryLock(System.IDisposable@)">
            <summary>
            Attempt to acquire a lock on the queue to mark it as in-use.
            </summary>
            <param name="queueLock">If locking the queue for use was
            successful (returned true), lockObject is an IDisposable that
            will discard the lock when disposed.</param>
            <returns>True if the queue is now marked as in-use, false if the
            queue could not be marked as in-use due to being blocked (or
            one of its lockqueues was in-use).</returns>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Queues.IIntegrationQueue.Name">
            <summary>
            Gets the name.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Queues.IIntegrationQueue.IsBlocked">
            <summary>
            Gets the is blocked.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Queues.IIntegrationQueue.Configuration">
            <summary>
            The configuration settings for this queue.
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Queues.IIntegrationQueueItem">
            <summary>
            Interface for the items placed in a named integration queue.
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Queues.IIntegrationQueueItem.Project">
            <summary>
            Gets the project to be added to the build queue.
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Queues.IIntegrationQueueItem.IntegrationRequest">
            <summary>
            Gets the integration request which was responsible for requesting the integration.
            </summary>
            <value></value>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Queues.IIntegrationQueueItem.IntegrationQueueNotifier">
            <summary>
            Gets the integration queue callback for the associated project.
            </summary>
            <value>The integration queue callback.</value>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Queues.IntegrationQueue">
            <summary>
            Implementation of a named integration queue.
            The currently integrating project in this queue will be at queue position zero.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Queues.IntegrationQueue.#ctor(System.String,ThoughtWorks.CruiseControl.Core.Config.IQueueConfiguration,ThoughtWorks.CruiseControl.Core.Queues.IntegrationQueueSet)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Queues.IntegrationQueue"/> class.	
            </summary>
            <param name="name">The name.</param>
            <param name="configuration">The configuration.</param>
            <param name="parentQueueSet">The parent queue set.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Queues.IntegrationQueue.Enqueue(ThoughtWorks.CruiseControl.Core.Queues.IIntegrationQueueItem)">
            <summary>
            Add a project integration request be added to the integration queue.
            If no requests are on that queue already the integration is just kicked off immediately.
            If the request is a force build and an integration is already on the queue for that project
            then the queue request is ignored as it is redundant.
            </summary>
            <param name="integrationQueueItem">The integration queue item.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Queues.IntegrationQueue.Dequeue">
            <summary>
            Releases the next integration request on the queue to start it's integration.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Queues.IntegrationQueue.RemovePendingRequest(ThoughtWorks.CruiseControl.Core.IProject)">
            <summary>
            Removes a pending integration request (i.e. one that has not yet started) for this
            project from the queue if it is available.
            </summary>
            <param name="project">The project to have pending items removed from the queue.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Queues.IntegrationQueue.RemoveProject(ThoughtWorks.CruiseControl.Core.IProject)">
            <summary>
            Removes all queued integrations for this project. To be invoked when "stopping"
            a project.
            </summary>
            <param name="project">The project to be removed.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Queues.IntegrationQueue.GetQueuedIntegrations">
            <summary>
            Returns an array of the current queued integrations on the queue.
            </summary>
            <returns>Array of current queued integrations on the queue.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Queues.IntegrationQueue.GetNextRequest(ThoughtWorks.CruiseControl.Core.IProject)">
            <summary>
            Gets the next request.	
            </summary>
            <param name="project">The project.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Queues.IntegrationQueue.HasItemOnQueue(ThoughtWorks.CruiseControl.Core.IProject)">
            <summary>
            Determines whether [has item on queue] [the specified project].	
            </summary>
            <param name="project">The project.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Queues.IntegrationQueue.HasItemPendingOnQueue(ThoughtWorks.CruiseControl.Core.IProject)">
            <summary>
            Determines whether [has item pending on queue] [the specified project].	
            </summary>
            <param name="project">The project.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Queues.IntegrationQueue.TryLock(System.IDisposable@)">
            <summary>
            Attempt to acquire a lock on the queue to mark it as in-use.
            </summary>
            <param name="lockObject">If locking the queue for use was
            successful (returned true), lockObject is an IDisposable that
            will discard the lock when disposed.</param>
            <returns>True if the queue is now marked as in-use, false if the
            queue could not be marked as in-use due to being blocked (or
            one of its lockqueues was in-use).</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Queues.IntegrationQueue.BlockQueue(ThoughtWorks.CruiseControl.Core.Queues.IIntegrationQueue)">
            <summary>
            Lock this queue, based upon a request from another queue.
            Acquires a fresh lock for the queue making the request (assuming none exists).
            </summary>
            <param name="requestingQueue">Queue requesting that a lock be taken out</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Queues.IntegrationQueue.UnblockQueue(ThoughtWorks.CruiseControl.Core.Queues.IIntegrationQueue)">
            <summary>
            Unlock this queue, based upon a request from another queue.
            Releases any locks currently held by the queue making the request.
            </summary>
            <param name="requestingQueue">Queue requesting that a lock be released</param>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Queues.IntegrationQueue.Name">
            <summary>
            Gets the name.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Queues.IntegrationQueue.IsBlocked">
            <summary>
            Is this Queue locked by another (N) Queue(s)?
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Queues.IntegrationQueue.Configuration">
            <summary>
            The configuration settings for this queue.
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Queues.IntegrationQueueItem">
            <summary>
            Container class
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Queues.IntegrationQueueItem.#ctor(ThoughtWorks.CruiseControl.Core.IProject,ThoughtWorks.CruiseControl.Remote.IntegrationRequest,ThoughtWorks.CruiseControl.Core.Queues.IIntegrationQueueNotifier)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Queues.IntegrationQueueItem"/> class.
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Queues.IntegrationQueueItem.Project">
            <summary>
            Gets the project to be added to the build queue.
            </summary>
            <value></value>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Queues.IntegrationQueueItem.IntegrationRequest">
            <summary>
            Gets the integration request which was responsible for requesting the integration.
            </summary>
            <value></value>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Queues.IntegrationQueueItem.IntegrationQueueNotifier">
            <summary>
            Gets the integration queue callback for the associated project.
            </summary>
            <value>The integration queue callback.</value>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Queues.IntegrationQueueManagerFactory">
            <summary>
            Factory class for generating IntegrationQueueManager instances.
            </summary>
            <remarks>
            The static <see cref="M:ThoughtWorks.CruiseControl.Core.Queues.IntegrationQueueManagerFactory.CreateManager(ThoughtWorks.CruiseControl.Core.IProjectIntegratorListFactory,ThoughtWorks.CruiseControl.Core.IConfiguration,ThoughtWorks.CruiseControl.Core.State.IProjectStateManager)"/> method will generate an instance of 
            <see cref="T:ThoughtWorks.CruiseControl.Core.IntegrationQueueManager"/> using <see cref="T:ThoughtWorks.CruiseControl.Core.Queues.IntegrationQueueManagerFactory"/> 
            by default. If a different queue manager is required (e.g. in unit testing) use the 
            static method <see cref="M:ThoughtWorks.CruiseControl.Core.Queues.IntegrationQueueManagerFactory.OverrideFactory(ThoughtWorks.CruiseControl.Core.Queues.IQueueManagerFactory)"/> to change the default factory.
            </remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Queues.IQueueManagerFactory">
            <summary>
            Factory class for generating queue managers.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Queues.IQueueManagerFactory.Create(ThoughtWorks.CruiseControl.Core.IProjectIntegratorListFactory,ThoughtWorks.CruiseControl.Core.IConfiguration,ThoughtWorks.CruiseControl.Core.State.IProjectStateManager)">
            <summary>
            Creates an instance of a queue manager.
            </summary>
            <param name="projectIntegratorListFactory">The integrator factory.</param>
            <param name="configuration">The configuration.</param>
            <param name="stateManager">The state manager to use.</param>
            <returns>The new queue manager.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Queues.IntegrationQueueManagerFactory.Create(ThoughtWorks.CruiseControl.Core.IProjectIntegratorListFactory,ThoughtWorks.CruiseControl.Core.IConfiguration,ThoughtWorks.CruiseControl.Core.State.IProjectStateManager)">
            <summary>
            Creates an instance of a queue manager.
            </summary>
            <param name="projectIntegratorListFactory">The integrator factory.</param>
            <param name="configuration">The configuration.</param>
            <param name="stateManager">The state manager to use.</param>
            <returns>The new queue manager.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Queues.IntegrationQueueManagerFactory.OverrideFactory(ThoughtWorks.CruiseControl.Core.Queues.IQueueManagerFactory)">
            <summary>
            Changes the default manager factory.
            </summary>
            <param name="newFactory">The new factory to use.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Queues.IntegrationQueueManagerFactory.ResetFactory">
            <summary>
            Changes back to the default factory/
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Queues.IntegrationQueueManagerFactory.CreateManager(ThoughtWorks.CruiseControl.Core.IProjectIntegratorListFactory,ThoughtWorks.CruiseControl.Core.IConfiguration,ThoughtWorks.CruiseControl.Core.State.IProjectStateManager)">
            <summary>
            Generates a queue manager using the default factory.
            </summary>
            <param name="projectIntegratorListFactory">The integrator factory.</param>
            <param name="configuration">The configuration.</param>
            <param name="stateManager">The state manager to use.</param>
            <returns>The new queue manager.</returns>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Queues.IntegrationQueueSet">
            <summary>
            Data structure representing the set of named integration queues.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Queues.IntegrationQueueSet.Add(System.String,ThoughtWorks.CruiseControl.Core.Config.IQueueConfiguration)">
            <summary>
            Adds the specified queue name.	
            </summary>
            <param name="queueName">Name of the queue.</param>
            <param name="config">The config.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Queues.IntegrationQueueSet.Clear">
            <summary>
            Clears this instance.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Queues.IntegrationQueueSet.GetQueueNames">
            <summary>
            Gets the queue names.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Queues.IntegrationQueueSet.GetIntegrationQueueSnapshot">
            <summary>
            Gets the integration queue snapshot.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Queues.IntegrationQueueSet.Item(System.String)">
            <summary>
            Gets the <see cref="T:ThoughtWorks.CruiseControl.Core.Queues.IIntegrationQueue"/> with the specified queue name.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.RemoteCruiseServer">
            <summary>
            Connects to a remote CruiseControl.NET server.
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.RemoteCruiseServer.ManagerUri">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.RemoteCruiseServer.DefaultManagerUri">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.RemoteCruiseServer.ServerClientUri">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.RemoteCruiseServer.DefaultServerClientUri">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.RemoteCruiseServer.#ctor(ThoughtWorks.CruiseControl.Remote.ICruiseServer,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.RemoteCruiseServer"/> class.	
            </summary>
            <param name="server">The server.</param>
            <param name="remotingConfigurationFile">The remoting configuration file.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.RemoteCruiseServer.#ctor(ThoughtWorks.CruiseControl.Remote.ICruiseServer,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.RemoteCruiseServer"/> class.	
            </summary>
            <param name="server">The server.</param>
            <param name="remotingConfigurationFile">The remoting configuration file.</param>
            <param name="disableRemoting">The disable remoting.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.RemoteCruiseServer.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.RemoteCruiseServer.Abort">
            <summary>
            Terminates the CruiseControl.NET server immediately, stopping all started projects
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.RemoteCruiseServer.Start">
            <summary>
            Launches the CruiseControl.NET server and starts all project schedules it contains
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.RemoteCruiseServer.Start(ThoughtWorks.CruiseControl.Remote.Messages.ProjectRequest)">
            <summary>
            Attempts to start a project.
            </summary>
            <param name="request">A <see cref="T:ThoughtWorks.CruiseControl.Remote.Messages.ProjectRequest"/> containing the request details.</param>
            <returns>A <see cref="T:ThoughtWorks.CruiseControl.Remote.Messages.Response"/> containing the results of the request.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.RemoteCruiseServer.Stop">
            <summary>
            Requests all started projects within the CruiseControl.NET server to stop
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.RemoteCruiseServer.Stop(ThoughtWorks.CruiseControl.Remote.Messages.ProjectRequest)">
            <summary>
            Attempts to stop a project.
            </summary>
            <param name="request">A <see cref="T:ThoughtWorks.CruiseControl.Remote.Messages.ProjectRequest"/> containing the request details.</param>
            <returns>A <see cref="T:ThoughtWorks.CruiseControl.Remote.Messages.Response"/> containing the results of the request.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.RemoteCruiseServer.CancelPendingRequest(ThoughtWorks.CruiseControl.Remote.Messages.ProjectRequest)">
            <summary>
            Cancel a pending project integration request from the integration queue.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.RemoteCruiseServer.SendMessage(ThoughtWorks.CruiseControl.Remote.Messages.MessageRequest)">
            <summary>
            Send a text message to the server.
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.RemoteCruiseServer.GetCruiseServerSnapshot(ThoughtWorks.CruiseControl.Remote.Messages.ServerRequest)">
            <summary>
            Gets the projects and integration queues snapshot from this server.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.RemoteCruiseServer.GetProjectStatus(ThoughtWorks.CruiseControl.Remote.Messages.ServerRequest)">
            <summary>
            Gets information about the last build status, current activity and project name.
            for all projects on a cruise server
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.RemoteCruiseServer.ForceBuild(ThoughtWorks.CruiseControl.Remote.Messages.ProjectRequest)">
            <summary>
            Forces a build for the named project.
            </summary>
            <param name="request">A <see cref="T:ThoughtWorks.CruiseControl.Remote.Messages.ProjectRequest"/> containing the request details.</param>
            <returns>A <see cref="T:ThoughtWorks.CruiseControl.Remote.Messages.Response"/> containing the results of the request.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.RemoteCruiseServer.AbortBuild(ThoughtWorks.CruiseControl.Remote.Messages.ProjectRequest)">
            <summary>
            Aborts the build of the selected project.
            </summary>
            <param name="request">A <see cref="T:ThoughtWorks.CruiseControl.Remote.Messages.ProjectRequest"/> containing the request details.</param>
            <returns>A <see cref="T:ThoughtWorks.CruiseControl.Remote.Messages.Response"/> containing the results of the request.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.RemoteCruiseServer.WaitForExit">
            <summary>
            Wait for CruiseControl server to finish executing
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.RemoteCruiseServer.WaitForExit(ThoughtWorks.CruiseControl.Remote.Messages.ProjectRequest)">
            <summary>
            Waits for the project to exit.
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.RemoteCruiseServer.GetLatestBuildName(ThoughtWorks.CruiseControl.Remote.Messages.ProjectRequest)">
            <summary>
            Returns the name of the most recent build for the specified project
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.RemoteCruiseServer.GetBuildNames(ThoughtWorks.CruiseControl.Remote.Messages.ProjectRequest)">
            <summary>
            Returns the names of all builds for the specified project, sorted s.t. the newest build is first in the array
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.RemoteCruiseServer.GetMostRecentBuildNames(ThoughtWorks.CruiseControl.Remote.Messages.BuildListRequest)">
            <summary>
            Returns the names of the buildCount most recent builds for the specified project, sorted s.t. the newest build is first in the array
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.RemoteCruiseServer.GetLog(ThoughtWorks.CruiseControl.Remote.Messages.BuildRequest)">
            <summary>
            Returns the build log contents for requested project and build name
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.RemoteCruiseServer.GetFinalBuildStatus(ThoughtWorks.CruiseControl.Remote.Messages.BuildRequest)">
            <summary>
            Gets the final status for a build.
            </summary>
            <param name="request">The request.</param>
            <returns>The <see cref="T:ThoughtWorks.CruiseControl.Remote.Messages.SnapshotResponse"/> for the build.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.RemoteCruiseServer.GetServerLog(ThoughtWorks.CruiseControl.Remote.Messages.ServerRequest)">
            <summary>
            Returns a log of recent build server activity. How much information that is returned is configured on the build server.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.RemoteCruiseServer.GetServerVersion(ThoughtWorks.CruiseControl.Remote.Messages.ServerRequest)">
            <summary>
            Returns the version of the server
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.RemoteCruiseServer.AddProject(ThoughtWorks.CruiseControl.Remote.Messages.ChangeConfigurationRequest)">
            <summary>
            Adds a project to the server
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.RemoteCruiseServer.DeleteProject(ThoughtWorks.CruiseControl.Remote.Messages.ChangeConfigurationRequest)">
            <summary>
            Deletes the specified project from the server
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.RemoteCruiseServer.UpdateProject(ThoughtWorks.CruiseControl.Remote.Messages.ChangeConfigurationRequest)">
            <summary>
            Updates the selected project on the server
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.RemoteCruiseServer.GetProject(ThoughtWorks.CruiseControl.Remote.Messages.ProjectRequest)">
            <summary>
            Returns the serialized form of the requested project from the server
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.RemoteCruiseServer.GetExternalLinks(ThoughtWorks.CruiseControl.Remote.Messages.ProjectRequest)">
            <summary>
            Retrieve the list of external links for the project.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.RemoteCruiseServer.GetArtifactDirectory(ThoughtWorks.CruiseControl.Remote.Messages.ProjectRequest)">
            <summary>
            Retrieves the name of directory used for storing artefacts for a project.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.RemoteCruiseServer.GetStatisticsDocument(ThoughtWorks.CruiseControl.Remote.Messages.ProjectRequest)">
            <summary>
            Retrieve the statistics document for a project.
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.RemoteCruiseServer.GetModificationHistoryDocument(ThoughtWorks.CruiseControl.Remote.Messages.ProjectRequest)">
            <summary>
            Retrieve the modification history document for a project.
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.RemoteCruiseServer.GetRSSFeed(ThoughtWorks.CruiseControl.Remote.Messages.ProjectRequest)">
            <summary>
            Retrieve the RSS feed for a project.
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.RemoteCruiseServer.Login(ThoughtWorks.CruiseControl.Remote.Messages.LoginRequest)">
            <summary>
            Logs a user into the session and generates a session.
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.RemoteCruiseServer.Logout(ThoughtWorks.CruiseControl.Remote.Messages.ServerRequest)">
            <summary>
            Logs a user out of the system and removes their session.
            </summary>
            <param name="request"></param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.RemoteCruiseServer.GetSecurityConfiguration(ThoughtWorks.CruiseControl.Remote.Messages.ServerRequest)">
            <summary>
            Retrieves the security configuration.
            </summary>
            <param name="request"></param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.RemoteCruiseServer.ListUsers(ThoughtWorks.CruiseControl.Remote.Messages.ServerRequest)">
            <summary>
            Lists all the users who have been defined in the system.
            </summary>
            <param name="request"></param>
            <returns>
            A list of <see cref="T:ThoughtWorks.CruiseControl.Remote.Messages.ListUsersResponse"/> containing the details on all the users
            who have been defined.
            </returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.RemoteCruiseServer.DiagnoseSecurityPermissions(ThoughtWorks.CruiseControl.Remote.Messages.DiagnoseSecurityRequest)">
            <summary>
            Checks the security permissions for a user against one or more projects.
            </summary>
            <param name="request"></param>
            <returns>A set of diagnostics information.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.RemoteCruiseServer.ReadAuditRecords(ThoughtWorks.CruiseControl.Remote.Messages.ReadAuditRequest)">
            <summary>
            Reads the specified number of filtered audit events.
            </summary>
            <param name="request"></param>
            <returns>A list of <see cref="T:ThoughtWorks.CruiseControl.Remote.Security.AuditRecord"/>s containing the audit details that match the filter.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.RemoteCruiseServer.ListBuildParameters(ThoughtWorks.CruiseControl.Remote.Messages.ProjectRequest)">
            <summary>
            Lists the build parameters for a project.
            </summary>
            <param name="request">The project to retrieve the parameters for.</param>
            <returns>The list of parameters (if any).</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.RemoteCruiseServer.ChangePassword(ThoughtWorks.CruiseControl.Remote.Messages.ChangePasswordRequest)">
            <summary>
            Changes the password of the user.
            </summary>
            <param name="request"></param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.RemoteCruiseServer.ResetPassword(ThoughtWorks.CruiseControl.Remote.Messages.ChangePasswordRequest)">
            <summary>
            Resets the password for a user.
            </summary>
            <param name="request"></param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.RemoteCruiseServer.GetFreeDiskSpace(ThoughtWorks.CruiseControl.Remote.Messages.ServerRequest)">
            <summary>
            Retrieve the amount of free disk space.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.RemoteCruiseServer.TakeStatusSnapshot(ThoughtWorks.CruiseControl.Remote.Messages.ProjectRequest)">
            <summary>
            Takes a status snapshot of a project.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.RemoteCruiseServer.RetrievePackageList(ThoughtWorks.CruiseControl.Remote.Messages.ProjectRequest)">
            <summary>
            Retrieves a list of packages for a project.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.RemoteCruiseServer.RetrieveFileTransfer(ThoughtWorks.CruiseControl.Remote.Messages.FileTransferRequest)">
            <summary>
            Retrieve a file transfer object.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.RemoteCruiseServer.RetrieveService(System.Type)">
            <summary>
            Retrieves a service.
            </summary>
            <param name="serviceType">The type of service to retrieve.</param>
            <returns>A valid service, if found, null otherwise.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.RemoteCruiseServer.AddService(System.Type,System.Object)">
            <summary>
            Adds a service.
            </summary>
            <param name="serviceType">The type of service.</param>
            <param name="service">The service to add.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.RemoteCruiseServer.GetLinkedSiteId(ThoughtWorks.CruiseControl.Remote.Messages.ProjectItemRequest)">
            <summary>
            Retrieve the identifer for this project on a linked site.
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.RemoteCruiseServer.CruiseManager">
            <summary>
            Retrieve CruiseManager interface for the server
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.RemoteCruiseServer.CruiseServerClient">
            <summary>
            Client for communicating with the server.
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Reporting.Dashboard.Navigation.AbsolutePathUrlBuilderDecorator">
            <summary>
            	
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Reporting.Dashboard.Navigation.IUrlBuilder">
            <summary>
            	
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Reporting.Dashboard.Navigation.IUrlBuilder.BuildUrl(System.String)">
            <summary>
            Builds the URL.	
            </summary>
            <param name="action">The action.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Reporting.Dashboard.Navigation.IUrlBuilder.BuildUrl(System.String,System.String)">
            <summary>
            Builds the URL.	
            </summary>
            <param name="action">The action.</param>
            <param name="queryString">The query string.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Reporting.Dashboard.Navigation.IUrlBuilder.BuildUrl(System.String,System.String,System.String)">
            <summary>
            Builds the URL.	
            </summary>
            <param name="action">The action.</param>
            <param name="queryString">The query string.</param>
            <param name="path">The path.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Reporting.Dashboard.Navigation.IUrlBuilder.Extension">
            <summary>
            Gets or sets the extension.	
            </summary>
            <value>The extension.</value>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Reporting.Dashboard.Navigation.AbsolutePathUrlBuilderDecorator.#ctor(ThoughtWorks.CruiseControl.Core.Reporting.Dashboard.Navigation.IUrlBuilder,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Reporting.Dashboard.Navigation.AbsolutePathUrlBuilderDecorator"/> class.	
            </summary>
            <param name="decoratedUrlBuilder">The decorated URL builder.</param>
            <param name="basePath">The base path.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Reporting.Dashboard.Navigation.AbsolutePathUrlBuilderDecorator.BuildUrl(System.String)">
            <summary>
            Builds the URL.	
            </summary>
            <param name="action">The action.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Reporting.Dashboard.Navigation.AbsolutePathUrlBuilderDecorator.BuildUrl(System.String,System.String)">
            <summary>
            Builds the URL.	
            </summary>
            <param name="action">The action.</param>
            <param name="partialQueryString">The partial query string.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Reporting.Dashboard.Navigation.AbsolutePathUrlBuilderDecorator.BuildUrl(System.String,System.String,System.String)">
            <summary>
            Builds the URL.	
            </summary>
            <param name="action">The action.</param>
            <param name="partialQueryString">The partial query string.</param>
            <param name="path">The path.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Reporting.Dashboard.Navigation.AbsolutePathUrlBuilderDecorator.Extension">
            <summary>
            Gets or sets the extension.	
            </summary>
            <value>The extension.</value>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Reporting.Dashboard.Navigation.DefaultBuildSpecifier">
            <summary>
            	
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Reporting.Dashboard.Navigation.IBuildSpecifier">
            <summary>
            	
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Reporting.Dashboard.Navigation.IBuildSpecifier.BuildName">
            <summary>
            Gets the name of the build.	
            </summary>
            <value>The name of the build.</value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Reporting.Dashboard.Navigation.IBuildSpecifier.ProjectSpecifier">
            <summary>
            Gets the project specifier.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Reporting.Dashboard.Navigation.DefaultBuildSpecifier.#ctor(ThoughtWorks.CruiseControl.Core.Reporting.Dashboard.Navigation.IProjectSpecifier,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Reporting.Dashboard.Navigation.DefaultBuildSpecifier"/> class.	
            </summary>
            <param name="projectSpecifier">The project specifier.</param>
            <param name="buildName">Name of the build.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Reporting.Dashboard.Navigation.DefaultBuildSpecifier.Equals(System.Object)">
            <summary>
            Equalses the specified obj.	
            </summary>
            <param name="obj">The obj.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Reporting.Dashboard.Navigation.DefaultBuildSpecifier.GetHashCode">
            <summary>
            Gets the hash code.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Reporting.Dashboard.Navigation.DefaultBuildSpecifier.ToString">
            <summary>
            Toes the string.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Reporting.Dashboard.Navigation.DefaultBuildSpecifier.BuildName">
            <summary>
            Gets the name of the build.	
            </summary>
            <value>The name of the build.</value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Reporting.Dashboard.Navigation.DefaultBuildSpecifier.ProjectSpecifier">
            <summary>
            Gets the project specifier.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Reporting.Dashboard.Navigation.DefaultCruiseUrlBuilder">
            <summary>
            	
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Reporting.Dashboard.Navigation.ICruiseUrlBuilder">
            <summary>
            	
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Reporting.Dashboard.Navigation.ICruiseUrlBuilder.BuildServerUrl(System.String,ThoughtWorks.CruiseControl.Core.Reporting.Dashboard.Navigation.IServerSpecifier)">
            <summary>
            Builds the server URL.	
            </summary>
            <param name="action">The action.</param>
            <param name="serverSpecifier">The server specifier.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Reporting.Dashboard.Navigation.ICruiseUrlBuilder.BuildServerUrl(System.String,ThoughtWorks.CruiseControl.Core.Reporting.Dashboard.Navigation.IServerSpecifier,System.String)">
            <summary>
            Builds the server URL.	
            </summary>
            <param name="action">The action.</param>
            <param name="serverSpecifier">The server specifier.</param>
            <param name="queryString">The query string.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Reporting.Dashboard.Navigation.ICruiseUrlBuilder.BuildProjectUrl(System.String,ThoughtWorks.CruiseControl.Core.Reporting.Dashboard.Navigation.IProjectSpecifier)">
            <summary>
            Builds the project URL.	
            </summary>
            <param name="action">The action.</param>
            <param name="projectSpecifier">The project specifier.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Reporting.Dashboard.Navigation.ICruiseUrlBuilder.BuildBuildUrl(System.String,ThoughtWorks.CruiseControl.Core.Reporting.Dashboard.Navigation.IBuildSpecifier)">
            <summary>
            Builds the build URL.	
            </summary>
            <param name="action">The action.</param>
            <param name="buildSpecifier">The build specifier.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Reporting.Dashboard.Navigation.ICruiseUrlBuilder.Extension">
            <summary>
            Gets or sets the extension.	
            </summary>
            <value>The extension.</value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Reporting.Dashboard.Navigation.ICruiseUrlBuilder.InnerBuilder">
            <summary>
            Gets the inner builder.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Reporting.Dashboard.Navigation.DefaultCruiseUrlBuilder.BuildRESTSpecifier">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Reporting.Dashboard.Navigation.DefaultCruiseUrlBuilder.ProjectRESTSpecifier">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Reporting.Dashboard.Navigation.DefaultCruiseUrlBuilder.ServerRESTSpecifier">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Reporting.Dashboard.Navigation.DefaultCruiseUrlBuilder.#ctor(ThoughtWorks.CruiseControl.Core.Reporting.Dashboard.Navigation.IUrlBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Reporting.Dashboard.Navigation.DefaultCruiseUrlBuilder"/> class.	
            </summary>
            <param name="urlBuilder">The URL builder.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Reporting.Dashboard.Navigation.DefaultCruiseUrlBuilder.BuildServerUrl(System.String,ThoughtWorks.CruiseControl.Core.Reporting.Dashboard.Navigation.IServerSpecifier)">
            <summary>
            Builds the server URL.	
            </summary>
            <param name="action">The action.</param>
            <param name="serverSpecifier">The server specifier.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Reporting.Dashboard.Navigation.DefaultCruiseUrlBuilder.BuildServerUrl(System.String,ThoughtWorks.CruiseControl.Core.Reporting.Dashboard.Navigation.IServerSpecifier,System.String)">
            <summary>
            Builds the server URL.	
            </summary>
            <param name="action">The action.</param>
            <param name="serverSpecifier">The server specifier.</param>
            <param name="queryString">The query string.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Reporting.Dashboard.Navigation.DefaultCruiseUrlBuilder.BuildProjectUrl(System.String,ThoughtWorks.CruiseControl.Core.Reporting.Dashboard.Navigation.IProjectSpecifier)">
            <summary>
            Builds the project URL.	
            </summary>
            <param name="action">The action.</param>
            <param name="projectSpecifier">The project specifier.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Reporting.Dashboard.Navigation.DefaultCruiseUrlBuilder.BuildBuildUrl(System.String,ThoughtWorks.CruiseControl.Core.Reporting.Dashboard.Navigation.IBuildSpecifier)">
            <summary>
            Builds the build URL.	
            </summary>
            <param name="action">The action.</param>
            <param name="buildSpecifier">The build specifier.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Reporting.Dashboard.Navigation.DefaultCruiseUrlBuilder.Extension">
            <summary>
            Gets or sets the extension.	
            </summary>
            <value>The extension.</value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Reporting.Dashboard.Navigation.DefaultCruiseUrlBuilder.InnerBuilder">
            <summary>
            Gets the inner builder.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Reporting.Dashboard.Navigation.DefaultProjectSpecifier">
            <summary>
            	
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Reporting.Dashboard.Navigation.IProjectSpecifier">
            <summary>
            	
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Reporting.Dashboard.Navigation.IProjectSpecifier.ProjectName">
            <summary>
            Gets the name of the project.	
            </summary>
            <value>The name of the project.</value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Reporting.Dashboard.Navigation.IProjectSpecifier.ServerSpecifier">
            <summary>
            Gets the server specifier.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Reporting.Dashboard.Navigation.DefaultProjectSpecifier.#ctor(ThoughtWorks.CruiseControl.Core.Reporting.Dashboard.Navigation.IServerSpecifier,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Reporting.Dashboard.Navigation.DefaultProjectSpecifier"/> class.	
            </summary>
            <param name="serverSpecifier">The server specifier.</param>
            <param name="projectName">Name of the project.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Reporting.Dashboard.Navigation.DefaultProjectSpecifier.Equals(System.Object)">
            <summary>
            Equalses the specified obj.	
            </summary>
            <param name="obj">The obj.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Reporting.Dashboard.Navigation.DefaultProjectSpecifier.GetHashCode">
            <summary>
            Gets the hash code.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Reporting.Dashboard.Navigation.DefaultProjectSpecifier.ToString">
            <summary>
            Toes the string.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Reporting.Dashboard.Navigation.DefaultProjectSpecifier.ProjectName">
            <summary>
            Gets the name of the project.	
            </summary>
            <value>The name of the project.</value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Reporting.Dashboard.Navigation.DefaultProjectSpecifier.ServerSpecifier">
            <summary>
            Gets the server specifier.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Reporting.Dashboard.Navigation.DefaultServerSpecifier">
            <summary>
            	
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Reporting.Dashboard.Navigation.IServerSpecifier">
            <summary>
            	
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Reporting.Dashboard.Navigation.IServerSpecifier.ServerName">
            <summary>
            Gets the name of the server.	
            </summary>
            <value>The name of the server.</value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Reporting.Dashboard.Navigation.IServerSpecifier.AllowForceBuild">
            <summary>
            Gets the allow force build.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Reporting.Dashboard.Navigation.IServerSpecifier.AllowStartStopBuild">
            <summary>
            Gets the allow start stop build.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Reporting.Dashboard.Navigation.DefaultServerSpecifier.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Reporting.Dashboard.Navigation.DefaultServerSpecifier"/> class.	
            </summary>
            <param name="serverName">Name of the server.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Reporting.Dashboard.Navigation.DefaultServerSpecifier.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Reporting.Dashboard.Navigation.DefaultServerSpecifier"/> class.	
            </summary>
            <param name="serverName">Name of the server.</param>
            <param name="allowForceBuild">The allow force build.</param>
            <param name="allowStartStopBuild">The allow start stop build.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Reporting.Dashboard.Navigation.DefaultServerSpecifier.Equals(System.Object)">
            <summary>
            Equalses the specified obj.	
            </summary>
            <param name="obj">The obj.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Reporting.Dashboard.Navigation.DefaultServerSpecifier.GetHashCode">
            <summary>
            Gets the hash code.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Reporting.Dashboard.Navigation.DefaultServerSpecifier.ToString">
            <summary>
            Toes the string.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Reporting.Dashboard.Navigation.DefaultServerSpecifier.ServerName">
            <summary>
            Gets the name of the server.	
            </summary>
            <value>The name of the server.</value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Reporting.Dashboard.Navigation.DefaultServerSpecifier.AllowForceBuild">
            <summary>
            Gets the allow force build.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Reporting.Dashboard.Navigation.DefaultServerSpecifier.AllowStartStopBuild">
            <summary>
            Gets the allow start stop build.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Reporting.Dashboard.Navigation.DefaultUrlBuilder">
            <summary>
            	
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Reporting.Dashboard.Navigation.DefaultUrlBuilder.DEFAULT_EXTENSION">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Reporting.Dashboard.Navigation.DefaultUrlBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Reporting.Dashboard.Navigation.DefaultUrlBuilder"/> class.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Reporting.Dashboard.Navigation.DefaultUrlBuilder.BuildUrl(System.String)">
            <summary>
            Builds the URL.	
            </summary>
            <param name="action">The action.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Reporting.Dashboard.Navigation.DefaultUrlBuilder.BuildUrl(System.String,System.String)">
            <summary>
            Builds the URL.	
            </summary>
            <param name="action">The action.</param>
            <param name="queryString">The query string.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Reporting.Dashboard.Navigation.DefaultUrlBuilder.BuildUrl(System.String,System.String,System.String)">
            <summary>
            Assumes that the path, queryString and action have been safely url encoded.
            Instead use a parameter collection and url builder can take care of encoding.
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Reporting.Dashboard.Navigation.DefaultUrlBuilder.SessionStorer">
            <summary>
            Gets or sets the session storer.	
            </summary>
            <value>The session storer.</value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Reporting.Dashboard.Navigation.DefaultUrlBuilder.Extension">
            <summary>
            Gets or sets the extension.	
            </summary>
            <value>The extension.</value>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Reporting.Dashboard.Navigation.IPhysicalApplicationPathProvider">
            <summary>
            	
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Reporting.Dashboard.Navigation.IPhysicalApplicationPathProvider.GetFullPathFor(System.String)">
            <summary>
            Gets the full path for.	
            </summary>
            <param name="appRelativePath">The app relative path.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Reporting.Dashboard.Navigation.ISessionStorer">
            <summary>
            Interface for storing sessions.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Reporting.Dashboard.Navigation.ISessionStorer.GenerateQueryToken">
            <summary>
            Generates a token to add to a query string for a session.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Reporting.Dashboard.Navigation.ISessionStorer.SessionToken">
            <summary>
            The session token to store.
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.SecurityOverride">
            <summary>
            Internal class for overriding the security if required.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.SecurityOverride.#cctor">
            <summary>
            Initializes the <see cref="T:ThoughtWorks.CruiseControl.Core.SecurityOverride"/> class.
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.SecurityOverride.SessionIdentifier">
            <summary>
            Gets the session identifier.
            </summary>
            <value>The session identifier.</value>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Security.ChannelSecurityInformation">
            <summary>
            Provides the basic security information for a channel.
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Security.ChannelSecurityInformation.IsEncrypted">
            <summary>
            Has the message been encrypted.
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Security.IChannelSecurity">
            <summary>
            The security requirements for sending or receiving messages.
            </summary>
            <title>Channel Security</title>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.IChannelSecurity.Validate(System.Object)">
            <summary>
            Validates the channel information.
            </summary>
            <param name="channelInformation"></param>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.IClock">
            <summary>
            	
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.IClock.Now">
            <summary>
            Gets the now.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Security.ImpersonationDetails">
            <summary>
            Defines the details to use for impersonating another user account.
            </summary>
            <title>Impersonation</title>
            <version>1.5</version>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.ImpersonationDetails.#ctor">
            <summary>
            Initialise a new <see cref="T:ThoughtWorks.CruiseControl.Core.Security.ImpersonationDetails"/>.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.ImpersonationDetails.#ctor(System.String,System.String,System.String)">
            <summary>
            Initialise a new <see cref="T:ThoughtWorks.CruiseControl.Core.Security.ImpersonationDetails"/>.
            </summary>
            <param name="userName"></param>
            <param name="password"></param>
            <param name="domainName"></param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.ImpersonationDetails.Impersonate">
            <summary>
            Start impersonating the other account.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Security.ImpersonationDetails.DomainName">
            <summary>
            The name of the domain to use.
            </summary>
            <version>1.5</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Security.ImpersonationDetails.UserName">
            <summary>
            The name of the user to impersonate.
            </summary>
            <version>1.5</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Security.ImpersonationDetails.Password">
            <summary>
            The password of the user.
            </summary>
            <version>1.5</version>
            <default>n/a</default>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Security.InheritedProjectAuthorisation">
            <summary>
            Inherit the security settings for a project from the server settings.
            </summary>
            <title>Inherited Project Security</title>
            <version>1.5</version>
            <example>
            <code>
            &lt;security type="inheritedProjectSecurity" /&gt;
            </code>
            </example>
            <key name="type">
            <description>The type of the project security.</description>
            <value>inheritedProjectSecurity</value>
            </key>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Security.IProjectAuthorisation">
            <summary>
            Checks the authorisation for a permission.
            </summary>
            <title>Project Level Security</title>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.IProjectAuthorisation.RequiresSession(ThoughtWorks.CruiseControl.Core.Security.ISecurityManager)">
            <summary>
            Does this authorisation require a valid session?
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.IProjectAuthorisation.CheckPermission(ThoughtWorks.CruiseControl.Core.Security.ISecurityManager,System.String,ThoughtWorks.CruiseControl.Core.Security.SecurityPermission,ThoughtWorks.CruiseControl.Remote.Security.SecurityRight)">
            <summary>
            Checks whether the user can perform the specified action.
            </summary>
            <param name="userName">The name of the user that is being checked.</param>
            <param name="permission">The permission to check.</param>
            <param name="defaultRight">The default right to use.</param>
            <returns>True if the permission is valid, false otherwise.</returns>
            <param name="manager"></param>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Security.IProjectAuthorisation.RequiresServerSecurity">
            <summary>
            Does this authorisation require security to be configured on the server?
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Security.IProjectAuthorisation.GuestAccountName">
            <summary>
            The name of the account to use for guests.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.InheritedProjectAuthorisation.#ctor">
            <summary>
            Start a new blank instance.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.InheritedProjectAuthorisation.RequiresSession(ThoughtWorks.CruiseControl.Core.Security.ISecurityManager)">
            <summary>
            Does this authorisation require a valid session?
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.InheritedProjectAuthorisation.CheckPermission(ThoughtWorks.CruiseControl.Core.Security.ISecurityManager,System.String,ThoughtWorks.CruiseControl.Core.Security.SecurityPermission,ThoughtWorks.CruiseControl.Remote.Security.SecurityRight)">
            <summary>
            Checks whether the user can perform the specified action.
            </summary>
            <param name="userName">The name of the user that is being checked.</param>
            <param name="permission">The permission to check.</param>
            <param name="defaultRight">The default right to use.</param>
            <param name="manager"></param>
            <returns>True if the permission is valid, false otherwise.</returns>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Security.InheritedProjectAuthorisation.RequiresServerSecurity">
            <summary>
            Does this authorisation require security to be configured on the server?
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Security.InheritedProjectAuthorisation.GuestAccountName">
            <summary>
            The name of the account to use for guests.
            </summary>
            <version>1.5</version>
            <default>None</default>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Security.Permissions">
            <summary>
            Defines a set of permissions.
            </summary>
            <title>General Security Permissions</title>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.Permissions.GetPermission(ThoughtWorks.CruiseControl.Core.Security.SecurityPermission)">
            <summary>
            Retrieves the actual permission.
            </summary>
            <param name="permission"></param>
            <returns></returns>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Security.Permissions.DefaultRight">
            <summary>
            The default right to use.
            </summary>
            <version>1.5</version>
            <default>Inherit</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Security.Permissions.SendMessageRight">
            <summary>
            The right to send messages.
            </summary>
            <version>1.5</version>
            <default>Inherit</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Security.Permissions.ForceBuildRight">
            <summary>
            The right for force or abort builds.
            </summary>
            <version>1.5</version>
            <default>Inherit</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Security.Permissions.StartProjectRight">
            <summary>
            The right to stop and start projects.
            </summary>
            <version>1.5</version>
            <default>Inherit</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Security.Permissions.ChangeProjectRight">
            <summary>
            The right to change the configuration of projects.
            </summary>
            <version>1.5</version>
            <default>Inherit</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Security.Permissions.ViewSecurityRight">
            <summary>
            The right to view security.
            </summary>
            <version>1.5</version>
            <default>Inherit</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Security.Permissions.ModifySecurityRight">
            <summary>
            The right to modify security.
            </summary>
            <version>1.5</version>
            <default>Inherit</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Security.Permissions.ViewProjectRight">
            <summary>
            The right to view a project.
            </summary>
            <version>1.5</version>
            <default>Inherit</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Security.Permissions.ViewConfigurationRight">
            <summary>
            The right to view configuration and logs.
            </summary>
            <version>1.5</version>
            <default>Inherit</default>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Security.ProjectSecurityConfigurationInformation">
            <summary>
            Pass the security information to a client.
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Security.ProjectSecurityConfigurationInformation.Name">
            <summary>
            Gets or sets the name.	
            </summary>
            <value>The name.</value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Security.ProjectSecurityConfigurationInformation.Security">
            <summary>
            Gets or sets the security.	
            </summary>
            <value>The security.</value>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Security.RemotingChannelSecurityInformation">
            <summary>
            The channel information from a remoting channel.
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Security.SecureMessagesChannel">
            <summary>
            Messages will be encrypted using this channel.
            </summary>
            <title>Encrypted Messages Channel</title>
            <version>1.5</version>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.SecureMessagesChannel.Validate(System.Object)">
            <summary>
            Validates the channel information.
            </summary>
            <param name="channelInformation"></param>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.IQuietPeriod">
            <summary>
            	
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.IQuietPeriod.GetModifications(ThoughtWorks.CruiseControl.Core.ISourceControl,ThoughtWorks.CruiseControl.Core.IIntegrationResult,ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Gets the modifications.	
            </summary>
            <param name="sourceControl">The source control.</param>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Storage.BaseFolderDataStore">
            <summary>
            Base class for providing common functionality in folde-based data stores.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Storage.BaseFolderDataStore.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Storage.BaseFolderDataStore"/> class.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Storage.BaseFolderDataStore.RootFolder(System.String,System.String)">
            <summary>
            Roots a folder.
            </summary>
            <param name="artefactsFolder">The artefacts folder.</param>
            <param name="folder">The folder to root.</param>
            <returns>The rooted folder.</returns>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Storage.BaseFolderDataStore.BaseFolder">
            <summary>
            The base folder to store the XML in.
            </summary>
            <version>1.6</version>
            <default>snapshots</default>
            <remarks>
            If this is not an absolute folder then it will be rooted in the project's
            artefacts folder.
            </remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Storage.BaseFolderDataStore.SnapshotsFolder">
            <summary>
            The folder to store snapshots.
            </summary>
            <version>1.6</version>
            <default>snapshots</default>
            <remarks>
            If this is not an absolute folder then it will be relative to the base folder.
            </remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Storage.BaseFolderDataStore.FileSystem">
            <summary>
            Gets or sets the file system.
            </summary>
            <value>The file system.</value>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Storage.XmlFolderDataStore">
            <summary>
            Stores project data in XML files in a folder.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Storage.XmlFolderDataStore.StoreProjectSnapshot(ThoughtWorks.CruiseControl.Core.IIntegrationResult,ThoughtWorks.CruiseControl.Remote.ItemStatus)">
            <summary>
            Stores a snapshot of a project build.
            </summary>
            <param name="result">The result that the snapshot is for.</param>
            <param name="snapshot">The project snapshot.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Storage.XmlFolderDataStore.LoadProjectSnapshot(ThoughtWorks.CruiseControl.Core.IProject,System.String)">
            <summary>
            Loads the project snapshot for a build.
            </summary>
            <param name="project">The project.</param>
            <param name="buildName">Name of the build.</param>
            <returns>The project snapshot.</returns>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.SystemClock">
            <summary>
            	
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.SystemClock.Now">
            <summary>
            Gets the now.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.SourceControlOperation">
            <summary>
            A type of source control operation.
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.SourceControlOperation.CheckForModifications">
            <summary>
            Checking for modifications.
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.SourceControlOperation.GetSource">
            <summary>
            Getting the source code.
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Security.ActiveDirectoryAuthentication">
            <summary>
            Stores a user name - authentication will come from Active Directory.
            </summary>
            <title>LDAP User Authentication</title>
            <version>1.5</version>
            <example>
            <code title="Simple Example">
            &lt;ldapUser name="johndoe" domain="somewhere.com"/&gt;
            </code>
            <code title="Wildcard Example">
            &lt;ldapUser name="*" domain="somewhere.com"/&gt;
            </code>
            </example>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Security.IAuthentication">
            <summary>
            Defines an authentication mechanism.
            </summary>
            <title>Security Users</title>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Security.ISecuritySetting">
            <summary>
            	
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Security.ISecuritySetting.Identifier">
            <summary>
            A unique identifier for an authentication instance.
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Security.ISecuritySetting.Manager">
            <summary>
            The security manager that loaded this setting.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.IAuthentication.Authenticate(ThoughtWorks.CruiseControl.Remote.Messages.LoginRequest)">
            <summary>
            Attempts to authenticate a user from the credentials.
            </summary>
            <param name="credentials">The credentials.</param>
            <returns>True if the credentials are valid, false otherwise..</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.IAuthentication.GetUserName(ThoughtWorks.CruiseControl.Remote.Messages.LoginRequest)">
            <summary>
            Retrieves the user name from the credentials.
            </summary>
            <param name="credentials">The credentials.</param>
            <returns>The display name of the user from the credentials. If the credentials do not exist in the system
            then null will be returned.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.IAuthentication.GetDisplayName(ThoughtWorks.CruiseControl.Remote.Messages.LoginRequest)">
            <summary>
            Retrieves the display name from the credentials.
            </summary>
            <param name="credentials">The credentials.</param>
            <returns>The name of the user from the credentials. If the credentials do not exist in the system
            then null will be returned.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.IAuthentication.ChangePassword(System.String)">
            <summary>
            Changes the password.
            </summary>
            <param name="newPassword"></param>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Security.IAuthentication.UserName">
            <summary>
            The user name from the configuration.
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Security.IAuthentication.DisplayName">
            <summary>
            The display name from the configuration.
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Security.IAuthentication.AuthenticationName">
            <summary>
            The name of the authentication type.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.ActiveDirectoryAuthentication.#ctor">
            <summary>
            Start a new blank authentication.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.ActiveDirectoryAuthentication.#ctor(System.String,ThoughtWorks.CruiseControl.Core.Util.ILdapService)">
            <summary>
            Start a new authentication with a user name.
            </summary>
            <param name="userName"></param>
            <param name="ldap"></param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.ActiveDirectoryAuthentication.Authenticate(ThoughtWorks.CruiseControl.Remote.Messages.LoginRequest)">
            <summary>
            Attempts to authenticate a user from the credentials.
            </summary>
            <param name="credentials">The credentials.</param>
            <returns>True if the credentials are valid, false otherwise.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.ActiveDirectoryAuthentication.GetUserName(ThoughtWorks.CruiseControl.Remote.Messages.LoginRequest)">
            <summary>
            Retrieves the user name from the credentials.
            </summary>
            <param name="credentials">The credentials.</param>
            <returns>The name of the user from the credentials. If the credentials not not exist in the system
            then null will be returned.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.ActiveDirectoryAuthentication.GetPassword(ThoughtWorks.CruiseControl.Remote.Messages.LoginRequest)">
            <summary>                                                                                          
            Retrieves the password from the credentials.                                                       
            </summary>                                                                                         
            <param name="credentials">The credentials.</param>                                                 
            <returns>The users password from the credentials. If the credentials do not exist in the system    
            then null will be returned.</returns>                                                              
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.ActiveDirectoryAuthentication.GetDisplayName(ThoughtWorks.CruiseControl.Remote.Messages.LoginRequest)">
            <summary>
            Retrieves the display name from the credentials.
            </summary>
            <param name="credentials">The credentials.</param>
            <returns>The name of the user from the credentials. If the credentials do not exist in the system
            then null will be returned.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.ActiveDirectoryAuthentication.ChangePassword(System.String)">
            <summary>
            Changes the password.
            </summary>
            <param name="newPassword"></param>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Security.ActiveDirectoryAuthentication.Identifier">
            <summary>
            A unique identifier for an authentication instance.
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Security.ActiveDirectoryAuthentication.UserName">
            <summary>
            The user name for this user.
            </summary>
            <version>1.5</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Security.ActiveDirectoryAuthentication.DisplayName">
            <summary>
            The display name for this user.
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Security.ActiveDirectoryAuthentication.AuthenticationName">
            <summary>
            The name of the authentication type.
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Security.ActiveDirectoryAuthentication.DomainName">
            <summary>
            The AD domain to use.
            </summary>
            <version>1.5</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Security.ActiveDirectoryAuthentication.Manager">
            <summary>
            The security manager that loaded this setting.
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Security.Auditing.AuditLoggerBase">
            <summary>
            A base class for developer audit loggers.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.Auditing.AuditLoggerBase.LogEvent(System.String,System.String,ThoughtWorks.CruiseControl.Remote.Security.SecurityEvent,ThoughtWorks.CruiseControl.Remote.Security.SecurityRight,System.String)">
            <summary>
            Logs a security event.
            </summary>
            <param name="projectName">The name of the project.</param>
            <param name="userName">The name of the user.</param>
            <param name="eventType">The type of event.</param>
            <param name="eventRight">The right of the event.</param>
            <param name="message">Any security message.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.Auditing.AuditLoggerBase.LogEvent(ThoughtWorks.CruiseControl.Remote.Security.AuditRecord)">
            <summary>
            Logs an audit record.
            </summary>
            <param name="record">The record to log.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.Auditing.AuditLoggerBase.DoLogEvent(System.String,System.String,ThoughtWorks.CruiseControl.Remote.Security.SecurityEvent,ThoughtWorks.CruiseControl.Remote.Security.SecurityRight,System.String)">
            <summary>
            Performs the actual logging of a security event
            </summary>
            <param name="projectName">The name of the project.</param>
            <param name="userName">The name of the user.</param>
            <param name="eventType">The type of event.</param>
            <param name="eventRight">The right of the event.</param>
            <param name="message">Any security message.</param>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Security.Auditing.AuditLoggerBase.LogSuccessfulEvents">
            <summary>
            Whether to log successful events or not.
            </summary>
            <version>1.5</version>
            <default>true</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Security.Auditing.AuditLoggerBase.LogFailureEvents">
            <summary>
            Whether to log failed events or not. 
            </summary>
            <version>1.5</version>
            <default>true</default>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Security.Auditing.FileXmlLogger">
            <summary>
            Sends audit logging information to a file. The information will be stored in an XML format.
            </summary>
            <remarks>
            The actual file will not be correct XML as it will not have a single root element - instead each line will be directly written to the
            file.
            </remarks>
            <version>1.5</version>
            <title>XML File Audit Logger</title>
            <example>
            <code>
            &lt;xmlFileAudit location="c:\Logs\ccnet_audit.log"/&gt;
            </code>
            </example>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Security.Auditing.IAuditLogger">
            <summary>
            Provides an interface for logging security events.
            </summary>
            <title>Security Audit Loggers</title>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.Auditing.IAuditLogger.LogEvent(System.String,System.String,ThoughtWorks.CruiseControl.Remote.Security.SecurityEvent,ThoughtWorks.CruiseControl.Remote.Security.SecurityRight,System.String)">
            <summary>
            Logs a security event.
            </summary>
            <param name="projectName">The name of the project.</param>
            <param name="userName">The name of the user.</param>
            <param name="eventType">The type of event.</param>
            <param name="eventRight">The right of the event.</param>
            <param name="message">Any security message.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.Auditing.IAuditLogger.LogEvent(ThoughtWorks.CruiseControl.Remote.Security.AuditRecord)">
            <summary>
            Logs an audit record.
            </summary>
            <param name="record">The record to log.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.Auditing.FileXmlLogger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Security.Auditing.FileXmlLogger"/> class.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.Auditing.FileXmlLogger.#ctor(ThoughtWorks.CruiseControl.Core.Util.IExecutionEnvironment)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Security.Auditing.FileXmlLogger"/> class.	
            </summary>
            <param name="executionEnvironment">The execution environment.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.Auditing.FileXmlLogger.DoLogEvent(System.String,System.String,ThoughtWorks.CruiseControl.Remote.Security.SecurityEvent,ThoughtWorks.CruiseControl.Remote.Security.SecurityRight,System.String)">
            <summary>
            Performs the actual logging of a security event
            </summary>
            <param name="projectName">The name of the project.</param>
            <param name="userName">The name of the user.</param>
            <param name="eventType">The type of event.</param>
            <param name="eventRight">The right of the event.</param>
            <param name="message">Any security message.</param>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Security.Auditing.FileXmlLogger.AuditFileLocation">
            <summary>
            The location to log the audit events.
            </summary>
            <version>1.5</version>
            <default>SecurityAudit.xml</default>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Security.Auditing.FileXmlReader">
            <summary>
            <para>
            Reads audit logging information from a file. The information must be stored in an XML format.
            </para>
            <para>
            This reader handles reading audit information that has been written by the <link>XML File Audit Logger</link>.
            </para>
            </summary>
            <version>1.5</version>
            <title>XML File Audit Reader</title>
            <example>
            <code>
            &lt;auditReader type="xmlFileAuditReader" location="c:\Logs\ccnet_audit.log"/&gt;
            </code>
            </example>
            <key name="type">
            <description>The type of the audit reader.</description>
            <value>xmlFileAuditReader</value>
            </key>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Security.Auditing.IAuditReader">
            <summary>
            Provides an interface for reading audit events.
            </summary>
            <title>Security Audit Readers</title>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.Auditing.IAuditReader.Read(System.Int32,System.Int32)">
            <summary>
            Reads all the specified number of audit events.
            </summary>
            <param name="startPosition">The starting position.</param>
            <param name="numberOfRecords">The number of records to read.</param>
            <returns>A list of <see cref="T:ThoughtWorks.CruiseControl.Remote.Security.AuditRecord"/>s containing the audit details.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.Auditing.IAuditReader.Read(System.Int32,System.Int32,ThoughtWorks.CruiseControl.Remote.Security.AuditFilterBase)">
            <summary>
            Reads all the specified number of filtered audit events.
            </summary>
            <param name="startPosition">The starting position.</param>
            <param name="numberOfRecords">The number of records to read.</param>
            <param name="filter">The filter to use.</param>
            <returns>A list of <see cref="T:ThoughtWorks.CruiseControl.Remote.Security.AuditRecord"/>s containing the audit details that match the filter.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.Auditing.FileXmlReader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Security.Auditing.FileXmlReader"/> class.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.Auditing.FileXmlReader.#ctor(ThoughtWorks.CruiseControl.Core.Util.IExecutionEnvironment)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Security.Auditing.FileXmlReader"/> class.	
            </summary>
            <param name="executionEnvironment">The execution environment.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.Auditing.FileXmlReader.Read(System.Int32,System.Int32)">
            <summary>
            Reads all the specified number of audit events.
            </summary>
            <param name="startPosition">The starting position.</param>
            <param name="numberOfRecords">The number of records to read.</param>
            <returns>A list of <see cref="T:ThoughtWorks.CruiseControl.Remote.Security.AuditRecord"/>s containing the audit details.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.Auditing.FileXmlReader.Read(System.Int32,System.Int32,ThoughtWorks.CruiseControl.Remote.Security.AuditFilterBase)">
            <summary>
            Reads all the specified number of filtered audit events.
            </summary>
            <param name="startPosition">The starting position.</param>
            <param name="numberOfRecords">The number of records to read.</param>
            <param name="filter">The filter to use.</param>
            <returns>A list of <see cref="T:ThoughtWorks.CruiseControl.Remote.Security.AuditRecord"/>s containing the audit details that match the filter.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.Auditing.FileXmlReader.LoadAuditLines">
            <summary>
            Loads the lines from the audit file.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Security.Auditing.FileXmlReader.AuditFileLocation">
            <summary>
            The location of the file to read the audit events from.
            </summary>
            <default>1.5</default>
            <default>SecurityAudit.xml</default>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Security.DefaultProjectAuthorisation">
            <summary>
            The project-specific settings include a list of permissions. These permissions associate the users, roles, etc. from the server-level
            security with the actions.
            </summary>
            <version>1.5</version>
            <title>Default Project Security</title>
            <remarks>
            <includePage>General Security Permissions</includePage>
            </remarks>
            <example>
            <code>
            &lt;security type="defaultProjectSecurity"&gt;
            &lt;permissions&gt;
            &lt;rolePermission name="admin" ref="admin" /&gt;
            &lt;userPermission name="johndoe" forceBuild="Allow" startProject="Deny" stopProject="Deny"/&gt;
            &lt;/permissions&gt;
            &lt;/security&gt;
            </code>
            </example>
            <key name="type">
            <description>The type of the project security.</description>
            <value>defaultProjectSecurity</value>
            </key>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.DefaultProjectAuthorisation.#ctor">
            <summary>
            Start a new blank instance.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.DefaultProjectAuthorisation.#ctor(ThoughtWorks.CruiseControl.Remote.Security.SecurityRight,ThoughtWorks.CruiseControl.Core.Security.IPermission[])">
            <summary>
            Start a fully load instance.
            </summary>
            <param name="defaultRight">The default right.</param>
            <param name="assertions">The assertions.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.DefaultProjectAuthorisation.RequiresSession(ThoughtWorks.CruiseControl.Core.Security.ISecurityManager)">
            <summary>
            Does this authorisation require a valid session?
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.DefaultProjectAuthorisation.CheckPermission(ThoughtWorks.CruiseControl.Core.Security.ISecurityManager,System.String,ThoughtWorks.CruiseControl.Core.Security.SecurityPermission,ThoughtWorks.CruiseControl.Remote.Security.SecurityRight)">
            <summary>
            Checks whether the user can perform the specified action.
            </summary>
            <param name="userName">The name of the user that is being checked.</param>
            <param name="permission">The permission to check.</param>
            <param name="defaultRight">The default right to use.</param>
            <param name="manager"></param>
            <returns>True if the permission is valid, false otherwise.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.DefaultProjectAuthorisation.Validate(ThoughtWorks.CruiseControl.Core.IConfiguration,ThoughtWorks.CruiseControl.Core.Config.ConfigurationTrace,ThoughtWorks.CruiseControl.Core.Config.IConfigurationErrorProcesser)">
            <summary>
            Checks the internal validation of the item.
            </summary>
            <param name="configuration">The entire configuration.</param>
            <param name="parent">The parent item for the item being validated.</param>
            <param name="errorProcesser"></param>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Security.DefaultProjectAuthorisation.DefaultRight">
            <summary>
            The default right to use.
            </summary>
            <version>1.5</version>
            <default>Inherit</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Security.DefaultProjectAuthorisation.Permissions">
            <summary>
            The allowed permissions.
            </summary>
            <version>1.5</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Security.DefaultProjectAuthorisation.RequiresServerSecurity">
            <summary>
            Does this authorisation require security to be configured on the server?
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Security.DefaultProjectAuthorisation.GuestAccountName">
            <summary>
            The name of the account to use for guests.
            </summary>
            <version>1.5</version>
            <default>None</default>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Security.ExternalFileSecurityManager">
            <summary>
            Defines a security manager implementation that implements security with configuration
            in external files.
            </summary>
            <title>External File Server Security</title>
            <version>1.5</version>
            <example>
            <code>
            &lt;externalFileSecurity&gt;
            &lt;cache type="inMemoryCache" duration="10" mode="sliding"/&gt;
            &lt;files&gt;
            &lt;file&gt;users.xml&lt;/file&gt;
            &lt;file&gt;permissions.xml&lt;/file&gt;
            &lt;/files&gt;
            &lt;/externalFileSecurity&gt;
            </code>
            </example>
            <remarks>
            <heading>External File Format</heading>
            <para>
            The elementsin the external file uses the standard user (<link>Security Users</link>) and permission definitions 
            (<link>Security Permissions</link>).
            </para>
            <para>
            It is possible to define multiple external security files. Each file can define the users and/or permissions for different areas (e.g.
            different departments).
            </para>
            <includePage>General Security Permissions</includePage>
            </remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Security.SecurityManagerBase">
            <summary>
            Provides some base security manager functionality.
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Security.ISecurityManager">
            <summary>
            Defines the security manager interface. All security calls should go through this manager.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.ISecurityManager.Initialise">
            <summary>
            Initialise the security manager.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.ISecurityManager.Login(ThoughtWorks.CruiseControl.Remote.Messages.LoginRequest)">
            <summary>
            Starts a new session for a user.
            </summary>
            <param name="credentials">The credentials to use.</param>
            <returns>The session token if the credentials are valid, null otherwise.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.ISecurityManager.Logout(System.String)">
            <summary>
            Terminates a user session.
            </summary>
            <param name="sessionToken">The token of the user session.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.ISecurityManager.ValidateSession(System.String)">
            <summary>
            Checks that a session is still validate (e.g. hasn't timed out or been terminated.)
            </summary>
            <param name="sessionToken">The session token.</param>
            <returns>True if the session is valid, false otherwise.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.ISecurityManager.GetUserName(System.String)">
            <summary>
            Retrieves the user name from a session token.
            </summary>
            <param name="sessionToken">The session token.</param>
            <returns>The name of the user if the session is valid, null otherwise.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.ISecurityManager.GetDisplayName(System.String,System.String)">
            <summary>
            Retrieves the display name from a session token.
            </summary>
            <param name="sessionToken">The session token.</param>
            <param name="displayName">The display name that was sent from the client.</param>
            <returns>
            The name of the user if the session is valid, null otherwise.
            </returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.ISecurityManager.RetrieveUser(System.String)">
            <summary>
            Retrieves a user from the store.
            </summary>
            <param name="identifier"></param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.ISecurityManager.RetrievePermission(System.String)">
            <summary>
            Retrieves a permission from the store.
            </summary>
            <param name="identifier"></param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.ISecurityManager.LogEvent(System.String,System.String,ThoughtWorks.CruiseControl.Remote.Security.SecurityEvent,ThoughtWorks.CruiseControl.Remote.Security.SecurityRight,System.String)">
            <summary>
            Sends a security event to the audit loggers.
            </summary>
            <param name="projectName">The name of the project.</param>
            <param name="userName">The name of the user.</param>
            <param name="eventType">The type of event.</param>
            <param name="eventRight">The right of the event.</param>
            <param name="message">Any security message.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.ISecurityManager.ListAllUsers">
            <summary>
            Lists all the users who have been defined in the system.
            </summary>
            <returns>
            A list of <see cref="T:ThoughtWorks.CruiseControl.Remote.Security.UserDetails"/> containing the details on all the users
            who have been defined.
            </returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.ISecurityManager.GetDefaultRight(ThoughtWorks.CruiseControl.Core.Security.SecurityPermission)">
            <summary>
            Gets the default right for a permission.
            </summary>
            <param name="permission">The permission to retrieve the default for.</param>
            <returns>The default right.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.ISecurityManager.CheckServerPermission(System.String,ThoughtWorks.CruiseControl.Core.Security.SecurityPermission)">
            <summary>
            Checks whether the user can perform the specified action at the server level.
            </summary>
            <param name="userName">The name of the user that is being checked.</param>
            <param name="permission">The permission to check.</param>
            <returns>True if the permission is valid, false otherwise.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.ISecurityManager.ReadAuditRecords(System.Int32,System.Int32)">
            <summary>
            Reads all the specified number of audit events.
            </summary>
            <param name="startPosition">The starting position.</param>
            <param name="numberOfRecords">The number of records to read.</param>
            <returns>A list of <see cref="T:ThoughtWorks.CruiseControl.Remote.Security.AuditRecord"/>s containing the audit details.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.ISecurityManager.ReadAuditRecords(System.Int32,System.Int32,ThoughtWorks.CruiseControl.Remote.Security.AuditFilterBase)">
            <summary>
            Reads all the specified number of filtered audit events.
            </summary>
            <param name="startPosition">The starting position.</param>
            <param name="numberOfRecords">The number of records to read.</param>
            <param name="filter">The filter to use.</param>
            <returns>A list of <see cref="T:ThoughtWorks.CruiseControl.Remote.Security.AuditRecord"/>s containing the audit details that match the filter.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.ISecurityManager.ChangePassword(System.String,System.String,System.String)">
            <summary>
            Changes the password of the user.
            </summary>
            <param name="sessionToken">The session token for the current user.</param>
            <param name="oldPassword">The person's old password.</param>
            <param name="newPassword">The person's new password.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.ISecurityManager.ResetPassword(System.String,System.String,System.String)">
            <summary>
            Resets the password for a user.
            </summary>
            <param name="sessionToken">The session token for the current user.</param>
            <param name="userName">The user name to reset the password for.</param>
            <param name="newPassword">The person's new password.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.ISecurityManager.RetrieveComponent``1">
            <summary>
            Retrieves a component from the security manager.
            </summary>
            <typeparam name="TComponent">The type of component to retrieve.</typeparam>
            <returns>The component of the specified type, if available, null otherwise.</returns>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Security.ISecurityManager.RequiresSession">
            <summary>
            Does this manager require a session?
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Security.ISecurityManager.Channel">
            <summary>
            The channel security requirements.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.SecurityManagerBase.Initialise">
            <summary>
            Initialise the security manager.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.SecurityManagerBase.RetrieveUser(System.String)">
            <summary>
            Retrieves a user from the store.
            </summary>
            <param name="identifier"></param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.SecurityManagerBase.RetrievePermission(System.String)">
            <summary>
            Retrieves a permission from the store.
            </summary>
            <param name="identifier"></param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.SecurityManagerBase.Login(ThoughtWorks.CruiseControl.Remote.Messages.LoginRequest)">
            <summary>
            Starts a new session for a user.
            </summary>
            <param name="credentials">The credentials to use.</param>
            <returns>The session token if the credentials are valid, null otherwise.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.SecurityManagerBase.Logout(System.String)">
            <summary>
            Terminates a user session.
            </summary>
            <param name="sessionToken">The token of the user session.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.SecurityManagerBase.ValidateSession(System.String)">
            <summary>
            Checks that a session is still validate (e.g. hasn't timed out or been terminated.)
            </summary>
            <param name="sessionToken">The session token.</param>
            <returns>True if the session is valid, false otherwise.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.SecurityManagerBase.GetUserName(System.String)">
            <summary>
            Retrieves the user name from a session token.
            </summary>
            <param name="sessionToken">The session token.</param>
            <returns>The name of the user if the session is valid, null otherwise.</returns>
            <remarks>
            The session token must be the user name.
            </remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.SecurityManagerBase.GetDisplayName(System.String,System.String)">
            <summary>
            Retrieves the display name from a session token.
            </summary>
            <param name="sessionToken">The session token.</param>
            <param name="displayName">The display name that was sent from the client.</param>
            <returns>
            The name of the user if the session is valid, null otherwise.
            </returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.SecurityManagerBase.LogEvent(System.String,System.String,ThoughtWorks.CruiseControl.Remote.Security.SecurityEvent,ThoughtWorks.CruiseControl.Remote.Security.SecurityRight,System.String)">
            <summary>
            Sends a security event to the audit loggers.
            </summary>
            <param name="projectName">The name of the project.</param>
            <param name="userName">The name of the user.</param>
            <param name="eventType">The type of event.</param>
            <param name="eventRight">The right of the event.</param>
            <param name="message">Any security message.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.SecurityManagerBase.ListAllUsers">
            <summary>
            Lists all the users who have been defined in the system.
            </summary>
            <returns>
            A list of <see cref="T:ThoughtWorks.CruiseControl.Remote.Security.UserDetails"/> containing the details on all the users
            who have been defined.
            </returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.SecurityManagerBase.CheckServerPermission(System.String,ThoughtWorks.CruiseControl.Core.Security.SecurityPermission)">
            <summary>
            Checks whether the user can perform the specified action at the server level.
            </summary>
            <param name="userName">The name of the user that is being checked.</param>
            <param name="permission">The permission to check.</param>
            <returns>True if the permission is valid, false otherwise.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.SecurityManagerBase.ReadAuditRecords(System.Int32,System.Int32)">
            <summary>
            Reads all the specified number of audit events.
            </summary>
            <param name="startPosition">The starting position.</param>
            <param name="numberOfRecords">The number of records to read.</param>
            <returns>A list of <see cref="T:ThoughtWorks.CruiseControl.Remote.Security.AuditRecord"/>s containing the audit details.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.SecurityManagerBase.ReadAuditRecords(System.Int32,System.Int32,ThoughtWorks.CruiseControl.Remote.Security.AuditFilterBase)">
            <summary>
            Reads all the specified number of filtered audit events.
            </summary>
            <param name="startPosition">The starting position.</param>
            <param name="numberOfRecords">The number of records to read.</param>
            <param name="filter">The filter to use.</param>
            <returns>A list of <see cref="T:ThoughtWorks.CruiseControl.Remote.Security.AuditRecord"/>s containing the audit details that match the filter.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.SecurityManagerBase.ChangePassword(System.String,System.String,System.String)">
            <summary>
            Changes the password of the user.
            </summary>
            <param name="sessionToken">The session token for the current user.</param>
            <param name="oldPassword">The person's old password.</param>
            <param name="newPassword">The person's new password.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.SecurityManagerBase.ResetPassword(System.String,System.String,System.String)">
            <summary>
            Resets the password for a user.
            </summary>
            <param name="sessionToken">The session token for the current user.</param>
            <param name="userName">The user name to reset the password for.</param>
            <param name="newPassword">The person's new password.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.SecurityManagerBase.RetrieveComponent``1">
            <summary>
            Retrieves a component from the security manager.
            </summary>
            <typeparam name="TComponent">The type of component to retrieve.</typeparam>
            <returns>The component of the specified type, if available, null otherwise.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.SecurityManagerBase.GetDefaultRight(ThoughtWorks.CruiseControl.Core.Security.SecurityPermission)">
            <summary>
            Gets the default right for a permission.
            </summary>
            <param name="permission">The permission to retrieve the default for.</param>
            <returns>The default right.</returns>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Security.SecurityManagerBase.SessionCache">
            <summary>
            The associated session cache.
            </summary>
            <version>1.5</version>
            <default><link>In Memory Security Cache</link></default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Security.SecurityManagerBase.AuditLoggers">
            <summary>
            The audit loggers.
            </summary>
            <version>1.5</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Security.SecurityManagerBase.AuditReader">
            <summary>
            The audit reader.
            </summary>
            <version>1.5</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Security.SecurityManagerBase.DefaultPermissions">
            <summary>
            The default permissions.
            </summary>
            <version>1.5</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Security.SecurityManagerBase.RequiresSession">
            <summary>
            Does this manager require a session?
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Security.SecurityManagerBase.Channel">
            <summary>
            The channel security requirements.
            </summary>
            <version>1.5</version>
            <default>None</default>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.ExternalFileSecurityManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Security.ExternalFileSecurityManager"/> class.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.ExternalFileSecurityManager.#ctor(ThoughtWorks.CruiseControl.Core.Util.IExecutionEnvironment)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Security.ExternalFileSecurityManager"/> class.	
            </summary>
            <param name="executionEnvironment">The execution environment.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.ExternalFileSecurityManager.Initialise">
            <summary>
            Initialise the security manager.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.ExternalFileSecurityManager.RetrieveUser(System.String)">
            <summary>
            Retrieves a user from the store.
            </summary>
            <param name="identifier"></param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.ExternalFileSecurityManager.RetrievePermission(System.String)">
            <summary>
            Retrieves a permission from the store.
            </summary>
            <param name="identifier"></param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.ExternalFileSecurityManager.ListAllUsers">
            <summary>
            Lists all the users who have been defined in the system.
            </summary>
            <returns>
            A list of <see cref="T:ThoughtWorks.CruiseControl.Remote.Security.UserDetails"/> containing the details on all the users
            who have been defined.
            </returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.ExternalFileSecurityManager.CheckServerPermission(System.String,ThoughtWorks.CruiseControl.Core.Security.SecurityPermission)">
            <summary>
            Checks whether the user can perform the specified action at the server level.
            </summary>
            <param name="userName">The name of the user that is being checked.</param>
            <param name="permission">The permission to check.</param>
            <returns>True if the permission is valid, false otherwise.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.ExternalFileSecurityManager.Validate(ThoughtWorks.CruiseControl.Core.IConfiguration,ThoughtWorks.CruiseControl.Core.Config.ConfigurationTrace,ThoughtWorks.CruiseControl.Core.Config.IConfigurationErrorProcesser)">
            <summary>
            Checks the internal validation of the item.
            </summary>
            <param name="configuration">The entire configuration.</param>
            <param name="parent">The parent item for the item being validated.</param>
            <param name="errorProcesser"></param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.ExternalFileSecurityManager.ChangePassword(System.String,System.String,System.String)">
            <summary>
            Changes the password of the user.
            </summary>
            <param name="sessionToken">The session token for the current user.</param>
            <param name="oldPassword">The person's old password.</param>
            <param name="newPassword">The person's new password.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.ExternalFileSecurityManager.ResetPassword(System.String,System.String,System.String)">
            <summary>
            Resets the password for a user.
            </summary>
            <param name="sessionToken">The session token for the current user.</param>
            <param name="userName">The user name to reset the password for.</param>
            <param name="newPassword">The person's new password.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.ExternalFileSecurityManager.LoadFile(System.String)">
            <summary>
            Loads all the settings from a file.
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.ExternalFileSecurityManager.LinkIdentifierWithFile(System.String,System.String)">
            <summary>
            Links an identifier with the file it came from.
            </summary>
            <param name="fileName">The source file.</param>
            <param name="identifier">The identifier.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.ExternalFileSecurityManager.UpdateSetting(ThoughtWorks.CruiseControl.Core.Security.ISecuritySetting)">
            <summary>
            Updates the file that a setting is in.
            </summary>
            <param name="setting">The setting that has been changed.</param>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Security.ExternalFileSecurityManager.Files">
            <summary>
            The files to load.
            </summary>
            <version>1.5</version>
            <default>n/a</default>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Security.FileBasedSessionCache">
            <summary>
            <para>
            Provides an in-memory cache for sessions that is backed by a store on disk.
            </para>
            <para>
            This cache will store the sessions details in memory for quick-access. Whenever a session is changed it also writes a copy of the
            details to a file on the disk. Then when the security manager is restarted it loads all the sessions from disk.
            </para>
            </summary>
            <title>File Based Security Cache</title>
            <version>1.5</version>
            <key name="type">
            <description>The type of security cache to use.</description>
            <value>fileBasedCache</value>
            </key>
            <example>
            <code>
            &lt;cache type="fileBasedCache" duration="10" mode="sliding" location="C:\sessions\"/&gt;
            </code>
            </example>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Security.SessionCacheBase">
            <summary>
            A base class to provide basic caching functionality.
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Security.ISessionCache">
            <summary>
            Defines a cache for holding session details.
            </summary>
            <title>Security Caches</title>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.ISessionCache.Initialise">
            <summary>
            Initialises the cache.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.ISessionCache.AddToCache(System.String)">
            <summary>
            Adds a session to the cache and generates a session token.
            </summary>
            <param name="userName">The user name to add.</param>
            <returns>The session token.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.ISessionCache.RetrieveFromCache(System.String)">
            <summary>
            Retrieves a user name from the cache based on a session token.
            </summary>
            <param name="sessionToken">The session token to use.</param>
            <returns>The user name if the token is valid, null otherwise.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.ISessionCache.RemoveFromCache(System.String)">
            <summary>
            Removes a user name from the cache on a session token.
            </summary>
            <param name="sessionToken">The session token to use.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.ISessionCache.StoreSessionValue(System.String,System.String,System.Object)">
            <summary>
            Stores a value for a session.
            </summary>
            <param name="sessionToken">The session token to use.</param>
            <param name="key">The key of the value.</param>
            <param name="value">The value to store.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.ISessionCache.RetrieveSessionValue(System.String,System.String)">
            <summary>
            Retrieves a value from a session.
            </summary>
            <param name="sessionToken">The session token to use.</param>
            <param name="key">The key of the value.</param>
            <returns>The value if available, null otherwise.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.SessionCacheBase.#ctor(ThoughtWorks.CruiseControl.Core.IClock)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Security.SessionCacheBase"/> class.	
            </summary>
            <param name="clock">The clock.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.SessionCacheBase.Initialise">
            <summary>
            Initialises the cache.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.SessionCacheBase.AddToCache(System.String)">
            <summary>
            Adds a session to the cache and generates a session token.
            </summary>
            <param name="userName">The user name to add.</param>
            <returns>The session token.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.SessionCacheBase.AddToCacheInternal(System.String,ThoughtWorks.CruiseControl.Core.Security.SessionCacheBase.SessionDetails)">
            <summary>
            Adds to cache internal.	
            </summary>
            <param name="sessionToken">The session token.</param>
            <param name="session">The session.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.SessionCacheBase.RetrieveFromCache(System.String)">
            <summary>
            Retrieves a user name from the cache based on a session token.
            </summary>
            <param name="sessionToken">The session token to use.</param>
            <returns>The user name if the token is valid, null otherwise.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.SessionCacheBase.RemoveFromCache(System.String)">
            <summary>
            Removes a user name from the cache on a session token.
            </summary>
            <param name="sessionToken">The session token to use.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.SessionCacheBase.StoreSessionValue(System.String,System.String,System.Object)">
            <summary>
            Stores a value for a session.
            </summary>
            <param name="sessionToken">The session token to use.</param>
            <param name="key">The key of the value.</param>
            <param name="value">The value to store.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.SessionCacheBase.RetrieveSessionValue(System.String,System.String)">
            <summary>
            Retrieves a value from a session.
            </summary>
            <param name="sessionToken">The session token to use.</param>
            <param name="key">The key of the value.</param>
            <returns>The value if available, null otherwise.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.SessionCacheBase.RetrieveSessionDetails(System.String)">
            <summary>
            Retrieves the session details based on a token.
            </summary>
            <param name="sessionToken">The session token to use.</param>
            <returns>The details, of valid, null otherwise.</returns>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Security.SessionCacheBase.Duration">
            <summary>
            The duration, in minutes, that a session is stored for. 
            </summary>
            <version>1.5</version>
            <default>10</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Security.SessionCacheBase.ExpiryMode">
            <summary>
            The type of expiration period to use. Options are either Sliding (the expiry time is moved every time a security request is made)
            or Fixed (expiry time never changes).
            </summary>
            <version>1.5</version>
            <default>Sliding</default>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Security.SessionCacheBase.SessionDetails">
            <summary>
            	
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Security.SessionCacheBase.SessionDetails.UserName">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Security.SessionCacheBase.SessionDetails.ExpiryTime">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Security.SessionCacheBase.SessionDetails.Values">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.SessionCacheBase.SessionDetails.#ctor(System.String,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Security.SessionCacheBase.SessionDetails"/> class.	
            </summary>
            <param name="userName">Name of the user.</param>
            <param name="expiry">The expiry.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.FileBasedSessionCache.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Security.FileBasedSessionCache"/> class.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.FileBasedSessionCache.#ctor(ThoughtWorks.CruiseControl.Core.Util.IFileSystem,ThoughtWorks.CruiseControl.Core.Util.IExecutionEnvironment,ThoughtWorks.CruiseControl.Core.IClock)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Security.FileBasedSessionCache"/> class.	
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="executionEnvironment">The execution environment.</param>
            <param name="clock">The clock.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.FileBasedSessionCache.Initialise">
            <summary>
            Initialises this instance.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.FileBasedSessionCache.AddToCache(System.String)">
            <summary>
            Adds to cache.	
            </summary>
            <param name="userName">Name of the user.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.FileBasedSessionCache.RemoveFromCache(System.String)">
            <summary>
            Removes from cache.	
            </summary>
            <param name="sessionToken">The session token.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.FileBasedSessionCache.StoreSessionValue(System.String,System.String,System.Object)">
            <summary>
            Stores the session value.	
            </summary>
            <param name="sessionToken">The session token.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.FileBasedSessionCache.SaveSession(System.String)">
            <summary>
            Saves the session.	
            </summary>
            <param name="sessionToken">The session token.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.FileBasedSessionCache.GenerateFileName(System.String)">
            <summary>
            Generates the name of the file.	
            </summary>
            <param name="sessionToken">The session token.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Security.FileBasedSessionCache.StoreLocation">
            <summary>
            The location where the backing files are stored. If this is a relative folder, it will be relative to the program data folder for
            CruiseControl.NET.
            </summary>
            <version>1.5</version>
            <default>Sessions</default>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Security.InMemorySessionCache">
            <summary>
            Provides an in-memory cache for sessions.
            </summary>
            <title>In Memory Security Cache</title>
            <version>1.5</version>
            <remarks>
            <para>
            This cache stores sessions in the current instance of CruiseControl.Net. When CruiseControl.Net is restarted the sessions will be lost.
            </para>
            <para type="warning">
            If you have Watch Config File = true (ccservice.exe.config: /configuration/appSettings/add[key='WatchConfigFile'] ), whenever a 
            configuration change is detected, the service will be restarted and all sessions will be lost.  If you want sessions to persist across
            service restarts, use <link>File Based Security Cache</link>.
            </para>
            </remarks>
            <example>
            <code>
            &lt;cache type="inMemoryCache" duration="10" mode="sliding"/&gt;
            </code>
            </example>
            <key name="type">
            <description>The type of security cache to use.</description>
            <value>inMemoryCache</value>
            </key>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.InMemorySessionCache.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Security.InMemorySessionCache"/> class.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.InMemorySessionCache.#ctor(ThoughtWorks.CruiseControl.Core.IClock)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Security.InMemorySessionCache"/> class.	
            </summary>
            <param name="clock">The clock.</param>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Security.InternalSecurityManager">
            <summary>
            Defines a security manager implementation that implements security internally - the security settings are stored in the same 
            configuration file.
            </summary>
            <title>Internal Server Security</title>
            <version>1.5</version>
            <remarks>
            <includePage>General Security Permissions</includePage>
            </remarks>
            <example>
            <code>
            &lt;internalSecurity&gt;
            &lt;cache type="inMemoryCache" duration="10" mode="sliding"/&gt;
            &lt;users&gt;
            &lt;passwordUser name="johndoe" password="letmein"/&gt;
            &lt;simpleUser name="*"/&gt;
            &lt;/users&gt;
            &lt;permissions&gt;
            &lt;rolePermission name="general" forceBuild="Deny"&gt;
            &lt;users&gt;
            &lt;userName name="*"/&gt;
            &lt;/users&gt;
            &lt;/rolePermission&gt;
            &lt;/permissions&gt;
            &lt;/internalSecurity&gt;
            </code>
            </example>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.InternalSecurityManager.Initialise">
            <summary>
            Initialise the security manager.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.InternalSecurityManager.RetrieveUser(System.String)">
            <summary>
            Retrieves a user from the store.
            </summary>
            <param name="identifier"></param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.InternalSecurityManager.RetrievePermission(System.String)">
            <summary>
            Retrieves a permission from the store.
            </summary>
            <param name="identifier"></param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.InternalSecurityManager.ListAllUsers">
            <summary>
            Lists all the users who have been defined in the system.
            </summary>
            <returns>
            A list of <see cref="T:ThoughtWorks.CruiseControl.Remote.Security.UserDetails"/> containing the details on all the users
            who have been defined.
            </returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.InternalSecurityManager.CheckServerPermission(System.String,ThoughtWorks.CruiseControl.Core.Security.SecurityPermission)">
            <summary>
            Checks whether the user can perform the specified action at the server level.
            </summary>
            <param name="userName">The name of the user that is being checked.</param>
            <param name="permission">The permission to check.</param>
            <returns>True if the permission is valid, false otherwise.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.InternalSecurityManager.Validate(ThoughtWorks.CruiseControl.Core.IConfiguration,ThoughtWorks.CruiseControl.Core.Config.ConfigurationTrace,ThoughtWorks.CruiseControl.Core.Config.IConfigurationErrorProcesser)">
            <summary>
            Checks the internal validation of the item.
            </summary>
            <param name="configuration">The entire configuration.</param>
            <param name="parent">The parent item for the item being validated.</param>
            <param name="errorProcesser"></param>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Security.InternalSecurityManager.Users">
            <summary>
            The users for the same.
            </summary>
            <version>1.5</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Security.InternalSecurityManager.Permissions">
            <summary>
            The server-level permissions.
            </summary>
            <version>1.5</version>
            <default>n/a</default>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Security.IPermission">
            <summary>
            A security assertion.
            </summary>
            <title>Security Permissions</title>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.IPermission.CheckUser(ThoughtWorks.CruiseControl.Core.Security.ISecurityManager,System.String)">
            <summary>
            Checks if the user should use this assertion.
            </summary>
            <param name="userName">The name of the user that is being checked.</param>
            <param name="manager"></param>
            <returns>True if the assertion is valid for the user, false otherwise.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.IPermission.CheckPermission(ThoughtWorks.CruiseControl.Core.Security.ISecurityManager,ThoughtWorks.CruiseControl.Core.Security.SecurityPermission)">
            <summary>
            Checks the result of this assertion.
            </summary>
            <param name="permission">The permission to check.</param>
            <param name="manager"></param>
            <returns>The security right.</returns>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Security.NullProjectAuthorisation">
            <summary>
            This element turns off security at the project level. A project with this security will give all rights to all users.
            </summary>
            <title>Null Project Security</title>
            <version>1.5</version>
            <key name="type">
            <description>The type of the project security.</description>
            <value>nullProjectSecurity</value>
            </key>
            <example>
            <code>
            &lt;security type="nullProjectSecurity"/&gt;
            </code>
            </example>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.NullProjectAuthorisation.#ctor">
            <summary>
            Start a new blank instance.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.NullProjectAuthorisation.RequiresSession(ThoughtWorks.CruiseControl.Core.Security.ISecurityManager)">
            <summary>
            Does this authorisation require a valid session?
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.NullProjectAuthorisation.CheckPermission(ThoughtWorks.CruiseControl.Core.Security.ISecurityManager,System.String,ThoughtWorks.CruiseControl.Core.Security.SecurityPermission,ThoughtWorks.CruiseControl.Remote.Security.SecurityRight)">
            <summary>
            Checks whether the user can perform the specified action.
            </summary>
            <param name="userName">The name of the user that is being checked.</param>
            <param name="permission">The permission to check.</param>
            <param name="defaultRight">The default right to use.</param>
            <param name="manager"></param>
            <returns>True if the permission is valid, false otherwise.</returns>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Security.NullProjectAuthorisation.RequiresServerSecurity">
            <summary>
            Does this authorisation require security to be configured on the server?
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Security.NullProjectAuthorisation.GuestAccountName">
            <summary>
            The name of the account to use for guests.
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Security.NullSecurityManager">
            <summary>
            A default implementation of a security manager where there is no security (e.g. every right is allowed);
            </summary>
            <title>Null Server Security</title>
            <version>1.5</version>
            <example>
            <code>
            &lt;nullSecurity /&gt;
            </code>
            </example>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.NullSecurityManager.Initialise">
            <summary>
            Initialise the security manager.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.NullSecurityManager.Login(ThoughtWorks.CruiseControl.Remote.Messages.LoginRequest)">
            <summary>
            Starts a new session for a user.
            </summary>
            <param name="credentials">The credentials to use.</param>
            <returns>The session token if the credentials are valid, null otherwise.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.NullSecurityManager.Logout(System.String)">
            <summary>
            Terminates a user session.
            </summary>
            <param name="sessionToken">The token of the user session.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.NullSecurityManager.ValidateSession(System.String)">
            <summary>
            Checks that a session is still validate (e.g. hasn't timed out or been terminated.)
            </summary>
            <param name="sessionToken">The session token.</param>
            <returns>True if the session is valid, false otherwise.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.NullSecurityManager.GetUserName(System.String)">
            <summary>
            Retrieves the user name from a session token.
            </summary>
            <param name="sessionToken">The session token.</param>
            <returns>The name of the user if the session is valid, null otherwise.</returns>
            <remarks>
            The session token must be the user name.
            </remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.NullSecurityManager.GetDisplayName(System.String,System.String)">
            <summary>
            Retrieves the display name from a session token.
            </summary>
            <param name="sessionToken">The session token.</param>
            <param name="displayName">The display name that was sent from the client.</param>
            <returns>
            The name of the user if the session is valid, null otherwise.
            </returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.NullSecurityManager.RetrieveUser(System.String)">
            <summary>
            Retrieves a user from the store.
            </summary>
            <param name="identifier"></param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.NullSecurityManager.RetrievePermission(System.String)">
            <summary>
            Retrieves a permission from the store.
            </summary>
            <param name="identifier"></param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.NullSecurityManager.LogEvent(System.String,System.String,ThoughtWorks.CruiseControl.Remote.Security.SecurityEvent,ThoughtWorks.CruiseControl.Remote.Security.SecurityRight,System.String)">
            <summary>
            Sends a security event to the audit loggers.
            </summary>
            <param name="projectName">The name of the project.</param>
            <param name="userName">The name of the user.</param>
            <param name="eventType">The type of event.</param>
            <param name="eventRight">The right of the event.</param>
            <param name="message">Any security message.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.NullSecurityManager.ListAllUsers">
            <summary>
            Lists all the users who have been defined in the system.
            </summary>
            <returns>
            A list of <see cref="T:ThoughtWorks.CruiseControl.Remote.Security.UserDetails"/> containing the details on all the users
            who have been defined.
            </returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.NullSecurityManager.DiagnoseSecurityPermissions(System.String,System.String[])">
            <summary>
            Checks the security permissions for a user against one or more projects.
            </summary>
            <param name="userName">The name of the user.</param>
            <param name="projectNames">The names of the projects to check.</param>
            <returns>A set of diagnostics information.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.NullSecurityManager.CheckServerPermission(System.String,ThoughtWorks.CruiseControl.Core.Security.SecurityPermission)">
            <summary>
            Checks whether the user can perform the specified action at the server level.
            </summary>
            <param name="userName">The name of the user that is being checked.</param>
            <param name="permission">The permission to check.</param>
            <returns>True if the permission is valid, false otherwise.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.NullSecurityManager.ReadAuditRecords(System.Int32,System.Int32)">
            <summary>
            Reads all the specified number of audit events.
            </summary>
            <param name="startPosition">The starting position.</param>
            <param name="numberOfRecords">The number of records to read.</param>
            <returns>A list of <see cref="T:ThoughtWorks.CruiseControl.Remote.Security.AuditRecord"/>s containing the audit details.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.NullSecurityManager.ReadAuditRecords(System.Int32,System.Int32,ThoughtWorks.CruiseControl.Remote.Security.AuditFilterBase)">
            <summary>
            Reads all the specified number of filtered audit events.
            </summary>
            <param name="startPosition">The starting position.</param>
            <param name="numberOfRecords">The number of records to read.</param>
            <param name="filter">The filter to use.</param>
            <returns>A list of <see cref="T:ThoughtWorks.CruiseControl.Remote.Security.AuditRecord"/>s containing the audit details that match the filter.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.NullSecurityManager.ChangePassword(System.String,System.String,System.String)">
            <summary>
            Changes the password of the user.
            </summary>
            <param name="sessionToken">The session token for the current user.</param>
            <param name="oldPassword">The person's old password.</param>
            <param name="newPassword">The person's new password.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.NullSecurityManager.ResetPassword(System.String,System.String,System.String)">
            <summary>
            Resets the password for a user.
            </summary>
            <param name="sessionToken">The session token for the current user.</param>
            <param name="userName">The user name to reset the password for.</param>
            <param name="newPassword">The person's new password.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.NullSecurityManager.RetrieveComponent``1">
            <summary>
            Retrieves a component from the security manager.
            </summary>
            <typeparam name="TComponent">The type of component to retrieve.</typeparam>
            <returns>The component of the specified type, if available, null otherwise.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.NullSecurityManager.GetDefaultRight(ThoughtWorks.CruiseControl.Core.Security.SecurityPermission)">
            <summary>
            Gets the default right for a permission.
            </summary>
            <param name="permission">The permission to retrieve the default for.</param>
            <returns>The default right.</returns>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Security.NullSecurityManager.RequiresSession">
            <summary>
            Does this manager require a session?
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Security.NullSecurityManager.Channel">
            <summary>
            The channel security requirements.
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Security.PermissionBase">
            <summary>
            	
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.PermissionBase.CheckUser(ThoughtWorks.CruiseControl.Core.Security.ISecurityManager,System.String)">
            <summary>
            Checks if the user should use this permission.
            </summary>
            <param name="userName">The name of the user that is being checked.</param>
            <param name="manager"></param>
            <returns>True if the permission is valid for the user, false otherwise.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.PermissionBase.CheckPermission(ThoughtWorks.CruiseControl.Core.Security.ISecurityManager,ThoughtWorks.CruiseControl.Core.Security.SecurityPermission)">
            <summary>
            Checks the result of this permission.
            </summary>
            <param name="permission">The permission to check.</param>
            <param name="manager"></param>
            <returns>The security right.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.PermissionBase.Validate(ThoughtWorks.CruiseControl.Core.IConfiguration,ThoughtWorks.CruiseControl.Core.Config.ConfigurationTrace,ThoughtWorks.CruiseControl.Core.Config.IConfigurationErrorProcesser)">
            <summary>
            Checks the internal validation of the item.
            </summary>
            <param name="configuration">The entire configuration.</param>
            <param name="parent">The parent item for the item being validated.</param>
            <param name="errorProcesser">The error processer to use.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.PermissionBase.CheckUserActual(ThoughtWorks.CruiseControl.Core.Security.ISecurityManager,System.String)">
            <summary>
            Checks the user actual.	
            </summary>
            <param name="manager">The manager.</param>
            <param name="userName">Name of the user.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.PermissionBase.CheckPermissionActual(ThoughtWorks.CruiseControl.Core.Security.ISecurityManager,ThoughtWorks.CruiseControl.Core.Security.SecurityPermission)">
            <summary>
            Checks the result of this permission.
            </summary>
            <param name="permission">The permission to check.</param>
            <param name="manager"></param>
            <returns>The security right.</returns>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Security.PermissionBase.RefId">
            <summary>
            The identifier of the referenced permission.
            </summary>
            <version>1.5</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Security.PermissionBase.Manager">
            <summary>
            The security manager that loaded this setting.
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Security.RolePermission">
            <summary>
            Defines the permissions for a role (a group of users).
            </summary>
            <title>Role Permission</title>
            <version>1.5</version>
            <remarks>
            <includePage>General Security Permissions</includePage>
            </remarks>
            <example>
            <code title="Role Definition Example">
            &lt;rolePermission name="admin" forceBuild="Allow" startProject="Deny" defaultRight="Inherit"&gt;
            &lt;users&gt;
            &lt;userName name="johndoe"/&gt;
            &lt;/users&gt;
            &lt;/rolePermission&gt;
            </code>
            <code title="Reference Example">
            &lt;rolePermission name="admin" ref="admin"/&gt;
            </code>
            </example>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.RolePermission.#ctor">
            <summary>
            Start a new blank instance.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.RolePermission.#ctor(System.String,ThoughtWorks.CruiseControl.Remote.Security.SecurityRight,ThoughtWorks.CruiseControl.Remote.Security.SecurityRight,ThoughtWorks.CruiseControl.Remote.Security.SecurityRight,ThoughtWorks.CruiseControl.Remote.Security.SecurityRight,ThoughtWorks.CruiseControl.Core.Security.UserName[])">
            <summary>
            Start a fully load instance.
            </summary>
            <param name="roleName">The name of the role.</param>
            <param name="defaultRight">The default right.</param>
            <param name="sendMessage">Their send message right.</param>
            <param name="forceBuild">Their force build right.</param>
            <param name="startProject">Their start project right.</param>
            <param name="users">The users in this role.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.RolePermission.CheckUserActual(ThoughtWorks.CruiseControl.Core.Security.ISecurityManager,System.String)">
            <summary>
            Checks if the user should use this permission.
            </summary>
            <param name="userName">The name of the user that is being checked.</param>
            <param name="manager"></param>
            <returns>True if the permission is valid for the user, false otherwise.</returns>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Security.RolePermission.Identifier">
            <summary>
            A unique identifier for this item.
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Security.RolePermission.RoleName">
            <summary>
            The name of the role.
            </summary>
            <version>1.5</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Security.RolePermission.Users">
            <summary>
            The users in this role.
            </summary>
            <version>1.5</version>
            <default>None</default>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Security.SecurityHelpers">
            <summary>
            	
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.SecurityHelpers.IsWildCardMatch(System.String,System.String)">
            <summary>
            Determines whether [is wild card match] [the specified wild card].	
            </summary>
            <param name="wildCard">The wild card.</param>
            <param name="value">The value.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Security.SecurityPermission">
            <summary>
            Defines the allowed security permissions.
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Security.SecurityPermission.SendMessage">
            <summary>
            Can send a message for the project.
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Security.SecurityPermission.ForceAbortBuild">
            <summary>
            Can force a build or abort a build on a project.
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Security.SecurityPermission.StartStopProject">
            <summary>
            Can start or stop a project.
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Security.SecurityPermission.ChangeProjectConfiguration">
            <summary>
            Can change project configuration.
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Security.SecurityPermission.ViewSecurity">
            <summary>
            Can view security information.
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Security.SecurityPermission.ModifySecurity">
            <summary>
            Can modify security information.
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Security.SecurityPermission.ViewProject">
            <summary>
            Can view a project and all its details.
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Security.SecurityPermission.ViewConfiguration">
            <summary>
            Can view configuration and log information.
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Security.ServerSecurityConfigurationInformation">
            <summary>
            Handles the passing of security information.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.ServerSecurityConfigurationInformation.AddProject(ThoughtWorks.CruiseControl.Core.IProject)">
            <summary>
            Adds a new project to the list.
            </summary>
            <param name="project">The project configuration to add.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.ServerSecurityConfigurationInformation.ToString">
            <summary>
            Returns this class as an XML string.
            </summary>
            <returns>The XML string containing all the security information.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.ServerSecurityConfigurationInformation.HidePasswords(System.String)">
            <summary>
            Hides all the passwords in the configuration.
            </summary>
            <param name="xmlData">The XML data to be returned.</param>
            <returns>The XML data with the passwords hidden.</returns>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Security.ServerSecurityConfigurationInformation.Manager">
            <summary>
            The associated security manager.
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Security.ServerSecurityConfigurationInformation.Projects">
            <summary>
            The security information on the projects.
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Security.SessionExpiryMode">
            <summary>
            Defines the expirt mode to use for sessions.
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Security.SessionExpiryMode.Fixed">
            <summary>
            When started the session's expiry time never changes.
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Security.SessionExpiryMode.Sliding">
            <summary>
            The sessions expiry time increases as it is used.
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Security.UserName">
            <summary>
            The name of a user.
            </summary>
            <title>User Name</title>
            <version>1.5</version>
            <example>
            <code>
            &lt;userName name="me" /&gt;
            </code>
            </example>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.UserName.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Security.UserName"/> class.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.UserName.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Security.UserName"/> class.	
            </summary>
            <param name="name">The name.</param>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Security.UserName.Name">
            <summary>
            The name of the user.
            </summary>
            <version>1.5</version>
            <default>n/a</default>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Security.UserNameAuthentication">
            <summary>
            <para>
            User name authentication checks that the user name is valid.
            </para>
            </summary>
            <title>User Name Authentication</title>
            <version>1.5</version>
            <example>
            <code title="Simple example">
            &lt;simpleUser name="johndoe" display="John Doe" /&gt;
            </code>
            <code title="Wildcard example">
            &lt;simpleUser name="*" /&gt;
            </code>
            <para>
            The following example shows how this user definition can be used with an internal security definition.
            </para>
            <code title="Example in Context">
            &lt;internalSecurity&gt;
            &lt;users&gt;
            &lt;simpleUser name="johndoe" display="John Doe"/&gt;
            &lt;/users&gt;
            &lt;permissions&gt;
            &lt;!-- Omitted for brevity --&gt;
            &lt;/permissions&gt;
            &lt;/internalSecurity&gt;
            </code>
            </example>
            <remarks>
            <para>
            This element simply stores a user name - authentication is that the user name is a valid name.
            </para>
            <para>
            It is possible to use wildcards in this element - see <link>Wildcards in User Names</link>.
            </para>
            </remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.UserNameAuthentication.#ctor">
            <summary>
            Start a new blank authentication.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.UserNameAuthentication.#ctor(System.String)">
            <summary>
            Start a new authentication with a user name.
            </summary>
            <param name="userName"></param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.UserNameAuthentication.Authenticate(ThoughtWorks.CruiseControl.Remote.Messages.LoginRequest)">
            <summary>
            Attempts to authenticate a user from the credentials.
            </summary>
            <param name="credentials">The credentials.</param>
            <returns>True if the credentials are valid, false otherwise.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.UserNameAuthentication.GetUserName(ThoughtWorks.CruiseControl.Remote.Messages.LoginRequest)">
            <summary>
            Retrieves the user name from the credentials.
            </summary>
            <param name="credentials">The credentials.</param>
            <returns>The name of the user from the credentials. If the credentials not not exist in the system
            then null will be returned.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.UserNameAuthentication.GetDisplayName(ThoughtWorks.CruiseControl.Remote.Messages.LoginRequest)">
            <summary>
            Retrieves the display name from the credentials.
            </summary>
            <param name="credentials">The credentials.</param>
            <returns>The name of the user from the credentials. If the credentials do not exist in the system
            then null will be returned.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.UserNameAuthentication.ChangePassword(System.String)">
            <summary>
            Changes the password.
            </summary>
            <param name="newPassword"></param>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Security.UserNameAuthentication.Identifier">
            <summary>
            A unique identifier for an authentication instance.
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Security.UserNameAuthentication.UserName">
            <summary>
            The login name for this user.
            </summary>
            <version>1.5</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Security.UserNameAuthentication.DisplayName">
            <summary>
            The display name for this user.
            </summary>
            <version>1.5</version>
            <default>None</default>
            <remarks>
            If this element is not set, the name will be used for the display name.
            </remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Security.UserNameAuthentication.AuthenticationName">
            <summary>
            The name of the authentication type.
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Security.UserNameAuthentication.Manager">
            <summary>
            The security manager that loaded this setting.
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Security.UserPasswordAuthentication">
            <summary>
            <para>
            User password authentication checks that the user name and password combination is valid.
            </para>
            </summary>
            <title>User Password Authentication</title>
            <version>1.5</version>
            <example>
            <code title="Simple example">
            &lt;passwordUser name="johndoe" password="whoareyou" display="John Doe" /&gt;
            </code>
            <para>
            The following example shows how this user definition can be used with an internal security definition.
            </para>
            <code title="Example in Context">
            &lt;internalSecurity&gt;
            &lt;users&gt;
            &lt;passwordUser name="johndoe" password="whoareyou" display="John Doe"/&gt;
            &lt;/users&gt;
            &lt;permissions&gt;
            &lt;!-- Omitted for brevity --&gt;
            &lt;/permissions&gt;
            &lt;/internalSecurity&gt;
            </code>
            </example>
            <remarks>
            <para>
            This element simply stores a user name and password - authentication is that the password is valid for the user name.
            </para>
            <para>
            It is possible to use wildcards in this element - see <link>Wildcards in User Names</link>.
            </para>
            </remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.UserPasswordAuthentication.#ctor">
            <summary>
            Start a new blank authentication.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.UserPasswordAuthentication.#ctor(System.String,System.String)">
            <summary>
            Start a new authentication with a user name and password.
            </summary>
            <param name="userName"></param>
            <param name="password"></param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.UserPasswordAuthentication.Authenticate(ThoughtWorks.CruiseControl.Remote.Messages.LoginRequest)">
            <summary>
            Attempts to authenticate a user from the credentials.
            </summary>
            <param name="credentials">The credentials.</param>
            <returns>True if the credentials are valid, false otherwise..</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.UserPasswordAuthentication.GetUserName(ThoughtWorks.CruiseControl.Remote.Messages.LoginRequest)">
            <summary>
            Retrieves the user name from the credentials.
            </summary>
            <param name="credentials">The credentials.</param>
            <returns>The name of the user from the credentials. If the credentials not not exist in the system
            then null will be returned.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.UserPasswordAuthentication.GetDisplayName(ThoughtWorks.CruiseControl.Remote.Messages.LoginRequest)">
            <summary>
            Retrieves the display name from the credentials.
            </summary>
            <param name="credentials">The credentials.</param>
            <returns>The name of the user from the credentials. If the credentials do not exist in the system
            then null will be returned.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.UserPasswordAuthentication.ChangePassword(System.String)">
            <summary>
            Changes the password.
            </summary>
            <param name="newPassword"></param>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Security.UserPasswordAuthentication.Identifier">
            <summary>
            A unique identifier for an authentication instance.
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Security.UserPasswordAuthentication.UserName">
            <summary>
            The name for this user.
            </summary>
            <version>1.5</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Security.UserPasswordAuthentication.Password">
            <summary>
            The password for this user.
            </summary>
            <version>1.5</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Security.UserPasswordAuthentication.AuthenticationName">
            <summary>
            The name of the authentication type.
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Security.UserPasswordAuthentication.DisplayName">
            <summary>
            The display name for this user.
            </summary>
            <version>1.5</version>
            <default>None</default>
            <remarks>
            If this is not set, the name will be used as the display name.
            </remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Security.UserPasswordAuthentication.Manager">
            <summary>
            The security manager that loaded this setting.
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Security.UserPermission">
            <summary>
            Defines the permissions for a user.
            </summary>
            <title>User Permission</title>
            <version>1.5</version>
            <remarks>
            <includePage>General Security Permissions</includePage>
            </remarks>
            <example>
            <code title="User Definition Example">
            &lt;userPermission name="johndoe" forceBuild="Allow" startProject="Deny" defaultRight="Inherit"/&gt;
            </code>
            <code title="Reference Example">
            &lt;userPermission name="johndoe" ref="johndoe"/&gt;
            </code>
            </example>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.UserPermission.#ctor">
            <summary>
            Start a new blank instance.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.UserPermission.#ctor(System.String,ThoughtWorks.CruiseControl.Remote.Security.SecurityRight,ThoughtWorks.CruiseControl.Remote.Security.SecurityRight,ThoughtWorks.CruiseControl.Remote.Security.SecurityRight,ThoughtWorks.CruiseControl.Remote.Security.SecurityRight)">
            <summary>
            Start a fully load instance.
            </summary>
            <param name="userName">The name of the user.</param>
            <param name="defaultRight">The default right.</param>
            <param name="sendMessage">Their send message right.</param>
            <param name="forceBuild">Their force build right.</param>
            <param name="startProject">Their start project right.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Security.UserPermission.CheckUserActual(ThoughtWorks.CruiseControl.Core.Security.ISecurityManager,System.String)">
            <summary>
            Checks if the user should use this permission.
            </summary>
            <param name="userName">The name of the user that is being checked.</param>
            <param name="manager"></param>
            <returns>True if the permission is valid for the user, false otherwise.</returns>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Security.UserPermission.Identifier">
            <summary>
            A unique identifier for this item.
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Security.UserPermission.UserName">
            <summary>
            The user name.
            </summary>
            <version>1.5</version>
            <default>n/a</default>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.AccuRev">
            <summary>
            <para>
            Source control integration for Accurev's source control product (http://www.accurev.com).
            </para>
            </summary>
            <title> AccuRev Source Control Block </title>
            <version>1.3</version>
            <example>
            <code title="Minimalist example">
            &lt;sourcecontrol type="accurev"&gt;
            &lt;autoGetSource&gt;true&lt;/autoGetSource&gt;
            &lt;/sourcecontrol&gt;
            </code>
            <code title="Full example">
            &lt;sourcecontrol type="accurev"&gt;
            &lt;autoGetSource&gt;true&lt;/autoGetSource&gt;
            &lt;executable&gt;accurev.exe&lt;/executable&gt;
            &lt;homeDir&gt;.&lt;/homeDir&gt;
            &lt;labelOnSuccess&gt;false&lt;/labelOnSuccess&gt;
            &lt;login&gt;false&lt;/login&gt;
            &lt;password&gt;banana&lt;/password&gt;
            &lt;principal&gt;joe_user&lt;/principal&gt;
            &lt;timeout units="minutes"&gt;10&lt;/timeout&gt;
            &lt;workspace&gt;.&lt;/workspace&gt;
            &lt;/sourcecontrol&gt;
            </code>
            </example>
            <key name="type">
            <description>The type of source control block.</description>
            <value>accurev</value>
            </key>
            <remarks>
            <heading>Known Issues</heading>
            <para>
            <b>CruiseControl.NET doesn't see my changes</b>
            </para>
            <para>
            AccuRev depends on the clocks of the server and its clients ticking together. Make sure the clock of your build server is synchronized
            to the clock of your AccuRev server. See CCNET-271 for details on a similar problem with Rational ClearCase.
            </para>
            <para>
            <b>AccuRev says I'm "unknown" or "not authenticated"</b>
            </para>
            <para>
            AccuRev needs to know the userid that owns the workspace, and stores that information in files in the AccuRev home directory, which
            defaults to %HOMEDRIVE%%HOMEPATH%\.accurev. If there isn't any such directory, or if CCNet is running under a userid that isn't an
            AccuRev user, AccuRev will not be able to function correctly and the accurev info command may report that the user is unknown or not
            authenticated. You can use the homeDir element to force AccuRev to look for the .accurev directory in a particular location, such as
            the project's artifact directory.
            </para>
            </remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.ProcessSourceControl">
            <summary>
            	
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.SourceControlBase">
            <summary>
            A base class to provide some common functionality for source control providers.
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.ISourceControl">
            <summary>
            Defines a source control block.
            </summary>
            <title>Source Control Blocks</title>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.ISourceControl.GetModifications(ThoughtWorks.CruiseControl.Core.IIntegrationResult,ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Gets the modifications from the source control provider
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.ISourceControl.LabelSourceControl(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Labels the source control provider with the current label
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.ISourceControl.GetSource(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Gets the source from the source conrol provider
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.ISourceControl.Initialize(ThoughtWorks.CruiseControl.Core.IProject)">
            <summary>
            Initializes the specified project.	
            </summary>
            <param name="project">The project.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.ISourceControl.Purge(ThoughtWorks.CruiseControl.Core.IProject)">
            <summary>
            Purges the specified project.	
            </summary>
            <param name="project">The project.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.SourceControlBase.GetModifications(ThoughtWorks.CruiseControl.Core.IIntegrationResult,ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Get any modifications since the last build.
            </summary>
            <param name="from">The from result.</param>
            <param name="to">The to result.</param>
            <returns>The modifications.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.SourceControlBase.LabelSourceControl(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Label the source code.
            </summary>
            <param name="result">The result to use for the label.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.SourceControlBase.GetSource(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Gets the latest source code.
            </summary>
            <param name="result">The result to use.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.SourceControlBase.Initialize(ThoughtWorks.CruiseControl.Core.IProject)">
            <summary>
            Initialise the SCM plugin.
            </summary>
            <param name="project"></param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.SourceControlBase.Purge(ThoughtWorks.CruiseControl.Core.IProject)">
            <summary>
            Purge any old source.
            </summary>
            <param name="project"></param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.SourceControlBase.ApplyParameters(System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.IEnumerable{ThoughtWorks.CruiseControl.Remote.Parameters.ParameterBase})">
            <summary>
            Applies the input parameters to the task.
            </summary>
            <param name="parameters">The parameters to apply.</param>
            <param name="parameterDefinitions">The original parameter definitions.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.SourceControlBase.PreprocessParameters(Exortech.NetReflector.NetReflectorTypeTable,System.Xml.XmlNode)">
            <summary>
            Preprocesses a node prior to loading it via NetReflector.
            </summary>
            <param name="typeTable">The type table.</param>
            <param name="inputNode">The input node.</param>
            <returns></returns>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.SourceControlBase.DynamicValues">
            <summary>
            The dynamic values to use for the source control block.
            </summary>
            <version>1.5</version>
            <default>None</default>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.ProcessSourceControl.executor">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.ProcessSourceControl.historyParser">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.ProcessSourceControl.#ctor(ThoughtWorks.CruiseControl.Core.Sourcecontrol.IHistoryParser)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.ProcessSourceControl"/> class.	
            </summary>
            <param name="historyParser">The history parser.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.ProcessSourceControl.#ctor(ThoughtWorks.CruiseControl.Core.Sourcecontrol.IHistoryParser,ThoughtWorks.CruiseControl.Core.Util.ProcessExecutor)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.ProcessSourceControl"/> class.	
            </summary>
            <param name="historyParser">The history parser.</param>
            <param name="executor">The executor.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.ProcessSourceControl.GetModifications(ThoughtWorks.CruiseControl.Core.Util.ProcessInfo,System.DateTime,System.DateTime)">
            <summary>
            Gets the modifications.	
            </summary>
            <param name="info">The info.</param>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.ProcessSourceControl.Execute(ThoughtWorks.CruiseControl.Core.Util.ProcessInfo)">
            <summary>
            Executes the specified process info.	
            </summary>
            <param name="processInfo">The process info.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.ProcessSourceControl.ParseModifications(ThoughtWorks.CruiseControl.Core.Util.ProcessResult,System.DateTime,System.DateTime)">
            <summary>
            Parses the modifications.	
            </summary>
            <param name="result">The result.</param>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.ProcessSourceControl.ParseModifications(ThoughtWorks.CruiseControl.Core.Util.ProcessResult,System.String)">
            <summary>
            Parses the modifications.	
            </summary>
            <param name="result">The result.</param>
            <param name="lastRevision">The last revision.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.ProcessSourceControl.ParseModifications(System.IO.TextReader,System.DateTime,System.DateTime)">
            <summary>
            Parses the modifications.	
            </summary>
            <param name="reader">The reader.</param>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.ProcessSourceControl.GetSource(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Gets the source.	
            </summary>
            <param name="result">The result.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.ProcessSourceControl.Initialize(ThoughtWorks.CruiseControl.Core.IProject)">
            <summary>
            Initializes the specified project.	
            </summary>
            <param name="project">The project.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.ProcessSourceControl.Purge(ThoughtWorks.CruiseControl.Core.IProject)">
            <summary>
            Purges the specified project.	
            </summary>
            <param name="project">The project.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.ProcessSourceControl.FillIssueUrl(ThoughtWorks.CruiseControl.Core.Modification[])">
            <summary>
            Fills the issue URL.	
            </summary>
            <param name="modifications">The modifications.</param>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.ProcessSourceControl.ProcessExecutor">
            <summary>
            Gets the process executor.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.ProcessSourceControl.Timeout">
            <summary>
            Sets the timeout period for the source control operation. See <link>Timeout Configuration</link> for details. 
            </summary>
            <version>1.0</version>
            <default>10 minutes</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.ProcessSourceControl.IssueUrlBuilder">
            <summary>
            Converts the comment (or parts from it) into an url pointing to the issue for this build. See <link>IssueUrlBuilder</link> for 
            more details.
            </summary>
            <version>1.4</version>
            <default>None</default>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.AccuRev.mods">
            <summary>
            Modifications discovered by this instance of the source control interface.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.AccuRev.#ctor">
            <summary>
            Create an instance of the source control integration with the default history parser and 
            process executor.
            </summary>
            <remarks>
            Uses <see cref="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.AccuRev.#ctor(ThoughtWorks.CruiseControl.Core.Sourcecontrol.IHistoryParser,ThoughtWorks.CruiseControl.Core.Util.ProcessExecutor)"/> to do the heavy lifting.
            </remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.AccuRev.#ctor(ThoughtWorks.CruiseControl.Core.Util.ProcessExecutor)">
            <summary>
            Create an instance of the source control integration with the default history parser.
            </summary>
            <remarks>
            Uses <see cref="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.AccuRev.#ctor(ThoughtWorks.CruiseControl.Core.Sourcecontrol.IHistoryParser,ThoughtWorks.CruiseControl.Core.Util.ProcessExecutor)"/> to do the heavy lifting.
            </remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.AccuRev.#ctor(ThoughtWorks.CruiseControl.Core.Sourcecontrol.IHistoryParser,ThoughtWorks.CruiseControl.Core.Util.ProcessExecutor)">
            <summary>
            Create an instance of the source control integration.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.AccuRev.FormatCommandDate(System.DateTime)">
            <summary>
            Format a timestamp the way AccuRev's commands want to see it.
            </summary>
            <param name="date">the timestamp to format.</param>
            <returns>the timestamp as a string in "yyyy/mm/dd hh:mm:ss" form in local time</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.AccuRev.GetBasisStreamName(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Determine the AccuRev basis stream name for the specified workspace directory.
            </summary>
            <param name="result">the IIntegrationResult object contaiing the directory name 
            of the workspace</param>
            <returns>the name of the basis stream</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.AccuRev.GetModifications(ThoughtWorks.CruiseControl.Core.IIntegrationResult,ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Obtain a list of modified files between the specified points on the revision history.
            </summary>
            <param name="from">the IntegrationResult containing the starting timestamp</param>
            <param name="to">the IntegrationResult containing the ending timestamp</param>
            <remarks>
            This method creates an AccuRev command to list all the modifications in the specified 
            timespan, and defers the execution and parsing to AccuRevHistoryParser.Parse() (via 
            ProcessSourceControl.GetModifications() et al.)
            <b>Note:</b> The technique used by this method is only aware of changes in the workspace's
            parent stream, not in streams that are ancestors of that stream.  This method should
            probably be changed to detect such changes, possibly through use of the "accurev update -i"
            command instead of "accurev hist", as suggested by "dhearing1 &lt;dp_godwin@hotmail.com&gt;" to
            the ccnet-user list on 2007-07-09.
            </remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.AccuRev.GetSource(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Obtain the specified level on the source code. 
            </summary>
            <param name="result">the IntegrationResult indicating the source level to get</param>
            <remarks>
            If the integration result doesn't specify a last change number, we update to the most-current level,
            because AccuRev doesn't have the ability to update to a specific timestamp, only to a specific transaction.
            </remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.AccuRev.LabelSourceControl(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Label the specified source level.  In AccuRev terms, create a snapshot based on that level.
            </summary>
            <param name="result">the IntegrationResult containing the label</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.AccuRev.PossiblyLogIn(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Log in to AccuRev if we're supposed to do so.
            </summary>
            <param name="result">IntegrationResult for which the command will be run</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.AccuRev.PrepCommand(ThoughtWorks.CruiseControl.Core.Util.PrivateArguments,ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Prepare an AccuRev command for execution.
            </summary>
            <param name="args">arguments for the "accurev" command</param>
            <param name="result">IntegrationResult for which the command will be run</param>
            <returns>a ProcessInfo object primed to execute the specified command</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.AccuRev.RunCommand(ThoughtWorks.CruiseControl.Core.Util.PrivateArguments,ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Execute an AccuRev command and check the results.
            </summary>
            <param name="args">arguments for the "accurev" command</param>
            <param name="result">IntegrationResult for which the command is being run</param>
            <returns>a ProcessResult object with the results from the command</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.AccuRev.SetEnvironmentVariables(System.Collections.Specialized.StringDictionary,ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
             Make sure this IIntegrationResult object has our environment variables set in it.
             </summary>
             <param name="environmentVariables">The collection of environment variables to be updated.</param>
            <param name="result">IntegrationResult for the command whose variables we are updating.</param>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.AccuRev.AutoGetSource">
            <summary>
            Specifies whether the current version of the source should be retrieved from AccuRev. 
            </summary>
            <version>1.3</version>
            <default>false</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.AccuRev.Executable">
            <summary>
            Specifies the path to the AccuRev command line tool. You should only have to include this element if the tool isn't in your
            path. By default, the AccuRev client installation process names it accurev.exe and puts it in C:\Program Files\AccuRev\bin. 
            </summary>
            <version>1.3</version>
            <default>accurev.exe</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.AccuRev.AccuRevHomeDir">
            <summary>
            Specifies the location of the AccuRev home directory. The pathname can be either absolute or relative to the project artifact
            directory. If not specified, AccuRev will follow its rules for determining the location. The home directory itself is always
            named ".accurev". 
            </summary>
            <remarks>
            Optional, default is to let AccuRev decide where the home directory is.
            </remarks>
            <version>1.3</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.AccuRev.LabelOnSuccess">
            <summary>
            Specifies whether or not CCNet should create an AccuRev snapshot when the build is successful. If set to true, CCNet will create
            a snapshot of the workspace's basis stream as of the starting time of the build, naming it according to the build label.
            </summary>
            <version>1.3</version>
            <default>false</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.AccuRev.LogIn">
            <summary>
            Specifies whether or not CCNet should log in to AccuRev using the specified principal and password. If set to true, the principal
            and password elements are required, and CCNet will use them to log in to AccuRev before executing any AccuRev commands. 
            </summary>
            <remarks>
            If this is set to true, then both principal and password must be set.
            </remarks>
            <version>1.3</version>
            <default>false</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.AccuRev.AccuRevPassword">
            <summary>
            Specifies the password for the AccuRev "principal" (userid). 
            </summary>
            <version>1.3</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.AccuRev.AccuRevPrincipal">
            <summary>
            Specifies the AccuRev "principal" (userid) to run under. If not specified, AccuRev will follow its rules for determining the
            principal. 
            </summary>
            <version>1.3</version>
            <default>false</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.AccuRev.Workspace">
            <summary>
            Specifies the location on disk of the AccuRev workspace that CCNet monitors for changes. The pathname can be either absolute or
            relative to the project working directory, and must identify the top-level directory of the workspace. Note that this is not the
            same as the workspace name - AccuRev will determine the workspace name from the disk pathname.
            </summary>
            <version>1.3</version>
            <default>false</default>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.AccuRevHistoryParser">
            <summary>
            Parser for AccuRev Inc.'s (www.accurev.com) eponymous source code control product's
            "accurev hist" command output.
            </summary>
            <remarks>
            This code is based on code\sourcecontrol\ClearCase.cs.
            </remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.IHistoryParser">
            <summary>
            	
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.IHistoryParser.Parse(System.IO.TextReader,System.DateTime,System.DateTime)">
            <summary>
            Parses the specified history.	
            </summary>
            <param name="history">The history.</param>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.AccuRevHistoryParser.fromDateTime">
            <summary>
            The starting date and time for the range of modifications we want.
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.AccuRevHistoryParser.toDateTime">
            <summary>
            The ending date and time for the range of modifications we want.
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.AccuRevHistoryParser.modificationList">
            <summary>
            The list of modifications we find.
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.AccuRevHistoryParser.modificationTemplate">
            <summary>
            A temporary Modification, used to make new modificationList entries.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.AccuRevHistoryParser.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.AccuRevHistoryParser"/> class.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.AccuRevHistoryParser.Parse(System.IO.TextReader,System.DateTime,System.DateTime)">
            <summary>
            Construct and return an array of Modifications describing the changes in
            the AccuRev workspace, based on the output of the "accurev hist" command.
            </summary>
            <param name="history">the stream of "accurev hist" command output</param>
            <param name="from">the starting date and time for the range of modifications we want.</param>
            <param name="to">the ending date and time for the range of modifications we want.</param>
            <returns>the changes in the specified time range.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.AccuRevHistoryParser.ParseTransaction(System.String)">
            <summary>
            Parse a transaction header and set up a new template for modifications created by this transaction.
            </summary>
            <param name="line">the transaction header line to parse.</param>
            <remarks>
            Line format:
            <br/>
            transaction __transNum__; __operationType__; yyyy/mm/dd hh:mm:ss ; user: __userid__
            </remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.AccuRevHistoryParser.ParseFileLine(System.String)">
            <summary>
            Parse a file detail line and remember the modification it describes.
            </summary>
            <remarks>
            The fileid after the leading "\.\" (or "/./") is a fully relative Windows (or Unix) 
            pathname, so it can contain any other legal Windows filename characters, including 
            spaces.  Unfortunately it is not enquoted or escaped, so be careful when parsing 
            the line.
            <br/>
            Line format is:
            <br/>
               |.|__dir1__|...|__dirn__|__filename__ __real_stream__/__real_revision__ (__virtual_stream__/__virtual_revision__[,__virtual_stream__/__virtual_revision__][,...])
            <br/>
            where any "|" delimiter can be either "/" or "\" and can vary in the same line.
            </remarks>
            <param name="line">the file detail line to parse.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.AccuRevHistoryParser.AddModification(ThoughtWorks.CruiseControl.Core.Modification)">
            <summary>
            Record a modification like this one.
            </summary>
            <remarks>
            This might be better done by a Clone() capability, or through reflection.  
            But for now, it's good enough to copy every field explicitly.
            </remarks> 
            <param name="template">the template Modification to clone.</param>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.ActionFilter">
            <summary>
            The ActionFilter can be used to filter modifications on the basis of the type of modification that was committed. Modification types
            are specific to each source control provider. Consult each source control provider for the list of actions to filter.
            </summary>
            <version>1.0</version>
            <title>ActionFilter</title>
            <example>
            <code>
            &lt;actionFilter&gt;
            &lt;actions&gt;&lt;action&gt;deleted&lt;/action&gt;&lt;/actions&gt;
            &lt;/actionFilter&gt;
            </code>
            </example>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.IModificationFilter">
            <title>Modification Filters</title>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.IModificationFilter.Accept(ThoughtWorks.CruiseControl.Core.Modification)">
            <summary>
            Accepts the specified modification.	
            </summary>
            <param name="modification">The modification.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.ActionFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.ActionFilter"/> class.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.ActionFilter.Accept(ThoughtWorks.CruiseControl.Core.Modification)">
            <summary>
            Accepts the specified m.	
            </summary>
            <param name="m">The m.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.ActionFilter.ToString">
            <summary>
            Toes the string.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.ActionFilter.Actions">
            <summary>
            The actions to filter.
            </summary>
            <version>1.0</version>
            <default>n/a</default>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Alienbrain">
            <summary>
            <para>
            Source control integration for the Alienbrain source control product.
            </para>
            </summary>
            <title>Alienbrain Source Control Block</title>
            <version>1.0</version>
            <example>
            <code title="Minimalist example">
            &lt;sourcecontrol type="alienbrain"&gt;
            &lt;server&gt;MyServer&lt;/server&gt;
            &lt;database&gt;MyDatabase&lt;/database&gt;
            &lt;username&gt;Username&lt;/username&gt;
            &lt;password&gt;Password&lt;/password&gt;
            &lt;project&gt;ab://myprojectpath&lt;/project&gt;
            &lt;/sourcecontrol&gt;
            </code>
            <code title="Full example">
            &lt;sourcecontrol type="alienbrain"&gt;
            &lt;server&gt;MyServer&lt;/server&gt;
            &lt;database&gt;MyDatabase&lt;/database&gt;
            &lt;username&gt;Username&lt;/username&gt;
            &lt;password&gt;Password&lt;/password&gt;
            &lt;project&gt;ab://myprojectpath&lt;/project&gt;
            &lt;executable&gt;c:\alienbrain\ab.exe&lt;/executable&gt;
            &lt;workingDirectory&gt;d:\code&lt;/workingDirectory&gt;
            &lt;branch&gt;Root Branch/Branch1&lt;/branch&gt;
            &lt;autoGetSource&gt;true&lt;/autoGetSource&gt;
            &lt;labelOnSuccess&gt;true&lt;/labelOnSuccess&gt;
            &lt;timeout units="minutes"&gt;10&lt;/timeout&gt;
            &lt;/sourcecontrol&gt;
            </code>
            </example>
            <key name="type">
            <description>The type of source control block.</description>
            <value>alienbrain</value>
            </key>
            <remarks>
            <heading>Contributions</heading>
            <para>
            Alienbrain support added by Francis Tremblay.
            </para>
            </remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Alienbrain.AB_REGISTRY_PATH">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Alienbrain.AB_REGISTRY_KEY">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Alienbrain.AB_COMMMAND_PATH">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Alienbrain.AB_EXE">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Alienbrain.BRANCH_COMMAND_TEMPLATE">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Alienbrain.MODIFICATIONS_COMMAND_TEMPLATE">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Alienbrain.LABEL_COMMAND_TEMPLATE">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Alienbrain.GET_COMMAND_TEMPLATE">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Alienbrain.NO_CHANGE">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Alienbrain.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Alienbrain"/> class.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Alienbrain.#ctor(ThoughtWorks.CruiseControl.Core.Sourcecontrol.IHistoryParser,ThoughtWorks.CruiseControl.Core.Util.ProcessExecutor,ThoughtWorks.CruiseControl.Core.Util.IRegistry)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Alienbrain"/> class.	
            </summary>
            <param name="parser">The parser.</param>
            <param name="executor">The executor.</param>
            <param name="registry">The registry.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Alienbrain.GetModifications(ThoughtWorks.CruiseControl.Core.IIntegrationResult,ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Gets the modifications.	
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Alienbrain.LabelSourceControl(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Labels the source control.	
            </summary>
            <param name="result">The result.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Alienbrain.GetSource(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Gets the source.	
            </summary>
            <param name="result">The result.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Alienbrain.HasChanges(ThoughtWorks.CruiseControl.Core.Util.ProcessInfo)">
            <summary>
            Determines whether the specified process info has changes.	
            </summary>
            <param name="processInfo">The process info.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Alienbrain.CreateModificationProcess(System.String,System.DateTime,System.DateTime)">
            <summary>
            Creates the modification process.	
            </summary>
            <param name="processCommand">The process command.</param>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Alienbrain.CreateLabelProcess(System.String,ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Creates the label process.	
            </summary>
            <param name="processCommand">The process command.</param>
            <param name="result">The result.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Alienbrain.CreateGetProcess">
            <summary>
            Creates the get process.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Alienbrain.CreateGetProcess(System.String)">
            <summary>
            Creates the get process.	
            </summary>
            <param name="filename">The filename.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Alienbrain.CreateBranchProcess(System.String)">
            <summary>
            Creates the branch process.	
            </summary>
            <param name="processCommand">The process command.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Alienbrain.Executable">
            <summary>
            The executable to use.
            </summary>
            <remarks>
            If not set, then the executable location will come from the registry.
            </remarks>
            <version>1.0</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Alienbrain.Server">
            <summary>
            Alienbrain server hostname or ip adress. The list of valid server name and ip adresses are listed in the File, Connect to
            project database, Step 1, list box.
            </summary>
            <version>1.0</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Alienbrain.Database">
            <summary>
            Alienbrain project database name. The list of valid project databases are listed in the File, Connect to project database, Step 2,
            list box. 
            </summary>
            <version>1.0</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Alienbrain.Username">
            <summary>
            The name of the user you want to use to connect to the server project database.
            </summary>
            <version>1.0</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Alienbrain.Password">
            <summary>
            The password of the user you want to use to connect to the server project database.
            </summary>
            <version>1.0</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Alienbrain.Branch">
            <summary>
            The path of the branch specification. to enumarate the name of the branches, use the ab enumbranch command line.
            </summary>
            <remarks>
            If this is not set, then the root branch will be used.
            </remarks>
            <version>1.0</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Alienbrain.Project">
            <summary>
            This is the path of to monitor the file changes. Use alienbrain://Code or ab://Code project path format.
            </summary>
            <version>1.0</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Alienbrain.AutoGetSource">
            <summary>
            Specifies whether the current version of the source should be retrieved from Alienbrain. 
            </summary>
            <version>1.0</version>
            <default>true</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Alienbrain.WorkingDirectory">
            <summary>
            The path where the get latest will update the files. 
            </summary>
            <version>1.0</version>
            <default>Project Working Directory</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Alienbrain.LabelOnSuccess">
            <summary>
            Specifies whether or not the repository should be labelled after a successful build. 
            </summary>
            <version>1.0</version>
            <default>false</default>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.AlienbrainHistoryParser">
            <summary>
            	
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.AlienbrainHistoryParser.FILE_REGEX">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.AlienbrainHistoryParser.DELIMITER">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.AlienbrainHistoryParser.Parse(System.IO.TextReader,System.DateTime,System.DateTime)">
            <summary>
            Parses the specified history.	
            </summary>
            <param name="history">The history.</param>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.AlienbrainHistoryParser.AllModificationParams(System.String)">
            <summary>
            Alls the modification params.	
            </summary>
            <param name="matchedLine">The matched line.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.AlienbrainHistoryParser.ParseModification(System.String[])">
            <summary>
            Parses the modification.	
            </summary>
            <param name="modificationParams">The modification params.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.BitKeeper.BitKeeper">
            <summary>
            <para>
            Source control integration for the BitKeeper source control product.
            </para>
            </summary>
            <title>BitKeeper Source Control Block</title>
            <version>1.0</version>
            <example>
            <code>
            &lt;sourcecontrol type="bitkeeper"&gt;
            &lt;workingDirectory&gt;c:\build\dev-1.0&lt;/workingDirectory&gt;
            &lt;autoGetSource&gt;true&lt;/autoGetSource&gt;
            &lt;cloneTo&gt;..\Source&lt;/cloneTo&gt;
            &lt;/sourcecontrol&gt;
            </code>
            </example>
            <key name="type">
            <description>The type of source control block.</description>
            <value>bitkeeper</value>
            </key>
            <remarks>
            <para type="warning">
            <title>SSH Access Not Supported</title>
            Your permanent BK repository must have a parent accessed via bkd or the local filesystem; ssh access is not supported at this time.
            </para>
            <heading>Contributions</heading>
            <para>
            BitKeeper support added by Harold L Hunt II of StarNet Communications Corp.
            </para>
            </remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.BitKeeper.BitKeeper.DefaultExecutable">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.BitKeeper.BitKeeper.#ctor(ThoughtWorks.CruiseControl.Core.Sourcecontrol.IHistoryParser,ThoughtWorks.CruiseControl.Core.Util.ProcessExecutor)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.BitKeeper.BitKeeper"/> class.
            </summary>
            <param name="parser">The parser.</param>
            <param name="executor">The executor.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.BitKeeper.BitKeeper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.BitKeeper.BitKeeper"/> class.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.BitKeeper.BitKeeper.InitialiseDefaults">
            <summary>
            Initialises the defaults.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.BitKeeper.BitKeeper.GetModifications(ThoughtWorks.CruiseControl.Core.IIntegrationResult,ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Gets the modifications.	
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.BitKeeper.BitKeeper.LabelSourceControl(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Labels the source control.	
            </summary>
            <param name="result">The result.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.BitKeeper.BitKeeper.GetSource(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Gets the source.	
            </summary>
            <param name="result">The result.</param>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.BitKeeper.BitKeeper.Executable">
            <summary>
            Absolute, DOS-style, path to bk.exe.
            </summary>
            <version>1.0</version>
            <default>c:\Program Files\BitKeeper\bk.exe</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.BitKeeper.BitKeeper.WorkingDirectory">
            <summary>
            Absolute, DOS-style, path to permanent BK repository.
            </summary>
            <version>1.0</version>
            <default>Project Working Directory</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.BitKeeper.BitKeeper.TagOnSuccess">
            <summary>
            Add BK tag on successful build.
            </summary>
            <version>1.0</version>
            <default>false</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.BitKeeper.BitKeeper.AutoGetSource">
            <summary>
            Automatically pull latest source into permanent BK repository.
            </summary>
            <version>1.0</version>
            <default>true</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.BitKeeper.BitKeeper.FileHistory">
            <summary>
            Include history of each file, rather than just ChangeSets.
            </summary>
            <version>1.0</version>
            <default>false</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.BitKeeper.BitKeeper.CloneTo">
            <summary>
            Make a clone of the permanent BK repository into the designated path. The DOS-style path can be relative to WorkingDirectory or
            absolute.
            </summary>
            <version>1.0</version>
            <default>None</default>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.BitKeeper.BitKeeperHistoryParser">
            <summary>
            	
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.BitKeeper.BitKeeperHistoryParser.BK_CHANGESET_LINE">
            <summary>
            This is the keyword that precedes a change set in the bk log information.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.BitKeeper.BitKeeperHistoryParser.Parse(System.IO.TextReader,System.DateTime,System.DateTime)">
            <summary>
            Parses the specified bk log.	
            </summary>
            <param name="bkLog">The bk log.</param>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.BitKeeper.BitKeeperHistoryParser.DetermineHistoryType">
            <summary>
            Called on first ChangeSet line to determine if this is verbose or non-verbose output
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.ClearCase">
            <summary>
            Rational ClearCase source control block.
            </summary>
            <title>Rational ClearCase Source Control Block</title>
            <version>1.0</version>
            <key name="type">
            <description>The type of source control block.</description>
            <value>clearCase</value>
            </key>
            <example>
            <code title="Minimalist example">
            &lt;sourcecontrol type="clearCase"&gt;
            &lt;viewPath&gt;C:\PATH\TO\SOURCE&lt;/viewPath&gt;
            &lt;autoGetSource&gt;true&lt;/autoGetSource&gt;
            &lt;/sourcecontrol&gt;
            </code>
            <code title="Full example">
            &lt;sourcecontrol type="clearCase"&gt;
            &lt;viewPath&gt;C:\PATH\TO\SOURCE&lt;/viewPath&gt;
            &lt;branch&gt;main&lt;/branch&gt;
            &lt;autoGetSource&gt;false&lt;/autoGetSource&gt;
            &lt;useLabel&gt;true&lt;/useLabel&gt;
            &lt;useBaseline&gt;false&lt;/useBaseline&gt;
            &lt;projectVobName&gt;PROJECT_VOB_NAME&lt;/projectVobName&gt;
            &lt;viewName&gt;PROJECT_VIEW_NAME&lt;/viewName&gt;
            &lt;executable&gt;cleartool.exe&lt;/executable&gt;
            &lt;timeout&gt;50000&lt;/timeout&gt;
            &lt;/sourcecontrol&gt;
            </code>
            </example>
            <remarks>
            <heading>Common Problems</heading>
            <para>
            <b>The build is initiated when users check in on private branches</b>
            </para>
            <para>
            By default, ClearCase returns a history for every file in every branch, even if the config spec limits to a
            single branch. You must specify &lt;branch&gt; in order to limit which changes CCNet can see.
            </para>
            <para>
            <b>After the build is successful I get a "Baseline not found" error message.</b>
            </para>
            <para>
            An example of this message is:
            </para>
            <code type="None">
            ThoughtWorks.CruiseControl.Core.CruiseControlException: Source control operation failed:
            cleartool: Error: Baseline not found: "CruiseControl.NETTemporaryBaseline_05-06-2004-16-34-15".
            </code>
            <para>
            This happens when &lt;projectVobName&gt; is not set to the project VOB. Typically this happens when the user
            specifies the UCM VOB instead of the project VOB.
            </para>
            <para>
            To correct the problem, change the value in that element to the name of the project VOB.
            </para>
            <heading>Known Bugs</heading>
            <para>
            <b>When I view my baselines, I see that they're called CruiseControl.NET[something] instead of v1.0.0.4.</b>
            </para>
            <para>
            This is a bug in ClearCase; Rational is aware of it. It only occurs if you're using baselines.
            </para>
            <para>
            CCNet creates a temporary baseline with the prefix CruiseControl.NET before renaming it to the final value, such
            as v1.5.2.3. Depending on how you view baselines in ClearCase, you may see the temporary or real name.
            </para>
            <para>
            For example, if you use the admin console, you'll see the old, temporary value. If use use cleartool lsbl,
            you'll see the correct one:
            </para>
            <code type="None">
            M:\gsmith_GS_Project_int\GS_UCM_VOB&gt;cleartool lsbl
            06-May-04.16:28:27  v1.0.0.1  gsmith   "CruiseControlTemporaryBaseline_05-06-200
            4-16-28-26"
              stream: GS_Project_Integration@\GS_PVOB
              component: GS_UCM_VOB@\GS_PVOB
            06-May-04.16:34:16  v1.0.0.2  gsmith   "CruiseControl.NETTemporaryBaseline_05-06
            -2004-16-34-15"
              stream: GS_Project_Integration@\GS_PVOB
              component: GS_UCM_VOB@\GS_PVOB
            </code>
            <para>
            <b>CruiseControl.NET sees checkins on all branches, not just the one specified in my config spec</b>
            </para>
            <para>
            This is due to the fact that the ClearCase history command (lshist) returns a complete history for the file, not
            just the history that can be seen by the config spec.
            </para>
            <para>
            The workaround is to make sure you include a &lt;branch&gt; element in your configuration. This will force ccnet
            to just see changes on that branch.
            </para>
            <para>
            <b>CruiseControl.NET doesn't see my changes</b>
            </para>
            <para>
            Make sure the clock of your build server is synchronised to the clock of your ClearCase server.
            </para>
            </remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.ClearCase.DATETIME_FORMAT">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.ClearCase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.ClearCase"/> class.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.ClearCase.#ctor(ThoughtWorks.CruiseControl.Core.Util.ProcessExecutor)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.ClearCase"/> class.	
            </summary>
            <param name="executor">The executor.</param>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.ClearCase.TempBaseline">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.ClearCase.GetModifications(ThoughtWorks.CruiseControl.Core.IIntegrationResult,ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Gets the modifications.	
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.ClearCase.LabelSourceControl(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Executes the two processes needed to label the source tree in ClearCase.
            </summary>
            <remarks>
            ClearCase needs to execute two processes to label a source tree; most source control systems
            take only one.
            </remarks>
            <param name="result">the timestamp of the label; ignored for this implementation</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.ClearCase.DeleteTemporaryLabel">
            <summary>
            Deletes the temporary label.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.ClearCase.CreateTempBaselineProcessInfo(System.String)">
            <summary>
            Creates the temp baseline process info.	
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.ClearCase.HasFatalError(System.String)">
            <summary>
            Returns true if there is an error indicating the operation did not complete successfully.
            </summary>
            <remarks>
            Currently, a fatal error is any error output line that is not <c>Error: Not a vob object:</c>.
            We ignore this error because it occurs any time there is a non-versioned (i.e. compiled .DLL) file
            in the viewpath.  But the make label operation completed successfully.
            </remarks>
            <param name="standardError">the standard error from the process</param>
            <returns><c>true</c> if there is a fatal error</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.ClearCase.CreateHistoryProcessInfo(System.DateTime,System.DateTime)">
            <summary>
            Creates the history process info.	
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.ClearCase.CreateLabelTypeProcessInfo(System.String)">
            <summary>
            Creates a process info object for the process that creates a new label type.
            </summary>
            <param name="label">the label to apply</param>
            <returns>the process execution info</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.ClearCase.CreateMakeLabelProcessInfo(System.String)">
            <summary>
            Creates a process info object for the process that applies a label.
            </summary>
            <param name="label">the label to apply</param>
            <returns>the process execution info</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.ClearCase.CreateRemoveBaselineProcessInfo">
            <summary>
            Creates the remove baseline process info.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.ClearCase.CreateRenameBaselineProcessInfo(System.String)">
            <summary>
            Creates the rename baseline process info.	
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.ClearCase.ValidateBaselineName(System.String)">
            <summary>
            Validates the name of the baseline.	
            </summary>
            <param name="name">The name.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.ClearCase.GetSource(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Gets the source.	
            </summary>
            <param name="result">The result.</param>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.ClearCase.Executable">
            <summary>
            Specifies the path to the ClearCase command line tool. You should only have to include this element if the
            tool isn't in your path. By default, the ClearCase client installation puts cleartool in your path. 
            </summary>
            <version>1.0</version>
            <default>cleartool.exe</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.ClearCase.ProjectVobName">
            <summary>
            The name of the project VOB that the view path uses. 
            </summary>
            <remarks>
            This is required if useBaseline="true".
            </remarks>
            <version>1.0</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.ClearCase.UseBaseline">
            <summary>
            Specifies whether a baseline should be applied when the build is successful. Requires the VOB your view
            references to be a UCM VOB. 
            </summary>
            <remarks>
            Requires that you specify viewName and projectVobName. 
            </remarks>
            <version>1.0</version>
            <default>false</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.ClearCase.UseLabel">
            <summary>
            Specifies whether a label should be applied when the build is successful. 
            </summary>
            <version>1.0</version>
            <default>true</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.ClearCase.ViewName">
            <summary>
            The name of the view that you're using. 
            </summary>
            <remarks>
            This is required if useBaseline="true".
            </remarks>
            <version>1.0</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.ClearCase.ViewPath">
            <summary>
            The path that CCNet will check for modifications and use to apply the label. 
            </summary>
            <version>1.0</version>
            <default>None</default>
            <remarks>
            Specifies a directory on your filesystem that CCNet monitors for changes. The path must be a versioned
            object. CCNet checks the actual VOB for changes, not the local filesystem.
            This doesn't have to be the root of the local ClearCase view. It may be any of the root's children or even
            a single object.
            </remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.ClearCase.AutoGetSource">
            <summary>
            Specifies whether the current version of the source should be retrieved from ClearCase.
            </summary>
            <version>1.0</version>
            <default>true</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.ClearCase.Branch">
            <summary>
            The name of the branch that CCNet will monitor for modifications. Note that the config spec of the view
            being built from must also be set up to reference this branch.
            </summary>
            <version>1.0</version>
            <default>None</default>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.ClearCaseHistoryParser">
            <summary>
            Provides for parsing output from a ClearCase cleartool.exe lshist command.
            </summary>
            <remarks>
            Written by Garrett M. Smith (gsmith@thoughtworks.com).
            Parsing logic inspired from (but improved upon) CruiseControl for Java.
            </remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.ClearCaseHistoryParser.DELIMITER">
            <summary>
            Unlikely combination of characters to separate fields
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.ClearCaseHistoryParser.END_OF_LINE_DELIMITER">
            <summary>
            Unlikely combination of characters to indicate end of one line in query.
            Carriage return (\n) may be used in comments and so is not available to us.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.ClearCaseHistoryParser.Parse(System.IO.TextReader,System.DateTime,System.DateTime)">
            <summary>
            Parses the specified history.	
            </summary>
            <param name="history">The history.</param>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.ClearCaseHistoryParser.AssignFileInfo(ThoughtWorks.CruiseControl.Core.Modification,System.String)">
            <summary>
            Assigns the file info.	
            </summary>
            <param name="modification">The modification.</param>
            <param name="file">The file.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.ClearCaseHistoryParser.AssignModificationTime(ThoughtWorks.CruiseControl.Core.Modification,System.String)">
            <summary>
            Assigns the modification time.	
            </summary>
            <param name="modification">The modification.</param>
            <param name="time">The time.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.ClearCaseHistoryParser.CreateNewModification(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates the new modification.	
            </summary>
            <param name="userName">Name of the user.</param>
            <param name="time">The time.</param>
            <param name="elementName">Name of the element.</param>
            <param name="modificationType">Type of the modification.</param>
            <param name="comment">The comment.</param>
            <param name="change">The change.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.ClearCaseHistoryParser.ParseEntry(System.String)">
            <summary>
            Parses the entry.	
            </summary>
            <param name="line">The line.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.ClearCaseHistoryParser.TokenizeEntry(System.String)">
            <summary>
            Tokenizes the entry.	
            </summary>
            <param name="line">The line.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.CommentFilter">
            <summary>
            A FilteredSourceControl filter that compares modification comments to a specified regular expression.
            </summary>
            <title>CommentFilter</title>
            <version>1.3</version>
            <example>
            <code>
            &lt;commentFilter&gt;
            &lt;pattern&gt;Ignore: .*&lt;/pattern&gt;
            &lt;/commentFilter&gt;
            </code>
            </example>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.CommentFilter.Accept(ThoughtWorks.CruiseControl.Core.Modification)">
            <summary>
            Does the modification pass the filter?
            </summary>
            <param name="modification">The modification to check.</param>
            <returns>True if the modification's comment matches the pattern, false otherwise.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.CommentFilter.ToString">
            <summary>
            Toes the string.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.CommentFilter.Pattern">
            <summary>
            This is the pattern used to compare the modification comment against. The pattern is specified according to the rules of the .net
            System.Text.RegularExpressions.Regex class. Each CommentFilter contains a single pattern element. 
            </summary>
            <version>1.3</version>
            <default>n/a</default>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Common">
            <summary>
            Class holding common definitions used by all source controls
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Common.SourceControlErrorHandlingPolicy">
            <summary>
            Ways of handling source control errors
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Common.SourceControlErrorHandlingPolicy.ReportEveryFailure">
            <summary>
            A build log is made on every failure
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Common.SourceControlErrorHandlingPolicy.ReportOnRetryAmount">
            <summary>
            A build log is only made once when the amount of consecutive build failures reaches the retry amount
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Common.SourceControlErrorHandlingPolicy.ReportOnEveryRetryAmount">
            <summary>
            A build log is made every time when the amount of consecutive build failures reaches the retry amount
            Build failure counter is reset to 0 when retry amount has been reached.
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Cvs">
            <summary>
            <para>
            Please refer to <link>Using CruiseControl.NET with CVS</link> for an overview of this block.
            </para>
            <para>
            For CVS you must define where the CVS executable (if you give a relative path, it must be relative to the ccnet.exe application) is and the working directory for checked out code.
            </para>
            </summary>
            <title> CVS Source Control Block </title>
            <version>1.2</version>
            <example>
            <code title="pserver authentication example">
            &lt;sourcecontrol type="cvs"&gt;
            &lt;executable&gt;..\tools\cvs.exe&lt;/executable&gt;
            &lt;cvsroot&gt;:pserver:anonymous@cvs.sourceforge.net:/cvsroot/ccnet&lt;/cvsroot&gt;
            &lt;module&gt;ccnet&lt;/module&gt;
            &lt;workingDirectory&gt;c:\projects\ccnet&lt;/workingDirectory&gt;
            &lt;/sourcecontrol&gt;
            </code>
            <code title="SSH via putty example">
            &lt;sourcecontrol type="cvs"&gt;
            &lt;executable&gt;c:\putty\cvswithplinkrsh.bat&lt;/executable&gt;
            &lt;cvsroot&gt;:ext:mycvsserver:/cvsroot/myrepo&lt;/cvsroot&gt;
            &lt;module&gt;mymodule&lt;/module&gt;
            &lt;workingDirectory&gt;c:\fromcvs\myrepo&lt;/workingDirectory&gt;
            &lt;/sourcecontrol&gt;
            </code>
            </example>
            <key name="type">
            <description>The type of source control block.</description>
            <value>cvs</value>
            </key>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Cvs.DefaultCvsExecutable">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Cvs.COMMAND_DATE_FORMAT">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Cvs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Cvs"/> class.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Cvs.#ctor(ThoughtWorks.CruiseControl.Core.Sourcecontrol.IHistoryParser,ThoughtWorks.CruiseControl.Core.Util.ProcessExecutor,ThoughtWorks.CruiseControl.Core.Util.IFileSystem,ThoughtWorks.CruiseControl.Core.Util.IExecutionEnvironment)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Cvs"/> class.	
            </summary>
            <param name="parser">The parser.</param>
            <param name="executor">The executor.</param>
            <param name="fileSystem">The file system.</param>
            <param name="executionEnvironment">The execution environment.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Cvs.FormatCommandDate(System.DateTime)">
            <summary>
            Formats the command date.	
            </summary>
            <param name="date">The date.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Cvs.GetModifications(ThoughtWorks.CruiseControl.Core.IIntegrationResult,ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Gets the modifications.	
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Cvs.LabelSourceControl(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Labels the source control.	
            </summary>
            <param name="result">The result.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Cvs.GetSource(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Gets the source.	
            </summary>
            <param name="result">The result.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Cvs.SetEnvironmentVariables(ThoughtWorks.CruiseControl.Core.Util.ProcessInfo,ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Set default environment variables for CVS
            </summary>
            <param name="pi">The command.</param>
            <param name="result">IntegrationResult for which the command is being run.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Cvs.GetRepositoryFolder">
            <summary>
            Get the repository folder in order to strip it from the RCS file.
            The repository folder is the last part of the CVSRoot path -- unless the local protocol is used on windows machines.
            Examples: 
            	CvsRoot=":pserver:anonymous@cruisecontrol.cvs.sourceforge.net:/cvsroot/cruisecontrol", Module="cruisecontrol", RepositoryFolder="/cvsroot/cruisecontrol/cruisecontrol"
            	CvsRoot=":local:C:\dev\CVSRoot", Module="fitwebservice", RepositoryFolder="C:\dev\CVSRoot/fitwebservice"
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Cvs.Executable">
            <summary>
            The location of the cvs.exe executable. 
            </summary>
            <version>1.2</version>
            <default>cvs</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Cvs.CvsRoot">
            <summary>
            The cvs connection string. If this is unspecified and your working directory contains a previous checkout, then the CVS client
            will attempt to determine the correct root based on the CVS folder in your working directory. If the working directory does not
            contain the source, then this element must be specfied.
            </summary>
            <version>1.2</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Cvs.Module">
            <summary>
            The cvs module to monitor. This element is used both when checking for modifications and when checking out the source into an
            empty working directory.
            </summary>
            <version>1.2</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Cvs.WorkingDirectory">
            <summary>
            The folder that the source has been checked out into. 
            </summary>
            <version>1.2</version>
            <default>Project Working Directory</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Cvs.LabelOnSuccess">
            <summary>
            Specifies whether or not the repository should be labelled after a successful build.
            </summary>
            <version>1.2</version>
            <default>false</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Cvs.RestrictLogins">
            <summary>
            Only list modifications checked in by specified logins.
            </summary>
            <version>1.2</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Cvs.UrlBuilder">
            <summary>
            Converts the comment (or parts from it) into an url pointing to the issue for this build. See <link>IssueUrlBuilder</link> for
            more details 
            </summary>
            <version>1.2</version>
            <default>false</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Cvs.AutoGetSource">
            <summary>
            Specifies whether the current version of the source should be retrieved from CVS. 
            </summary>
            <version>1.2</version>
            <default>true</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Cvs.CleanCopy">
            <summary>
            Specifies whether or not a clean copy should be retrieved.
            </summary>
            <version>1.2</version>
            <default>true</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Cvs.ForceCheckout">
            <summary>
            Specifies whether the checkout command should be used instead of update.
            </summary>
            <version>1.2</version>
            <default>false</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Cvs.Branch">
            <summary>
            The branch to check for modifications on. 
            </summary>
            <version>1.2</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Cvs.TagPrefix">
            <summary>
            By default the CVS tag name used when labelOnSuccess is set to true is ver-BuildLabel. If you specify this property, the
            prefix ver- will be replaced with the value you specify. 
            </summary>
            <version>1.2</version>
            <default>ver-</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Cvs.SuppressRevisionHeader">
            <summary>
            Suppresses headers that do not have revisions within the specified modification window. Setting this option to true will reduce
            the time that it takes for CCNet to poll CVS for changes. Only fairly recent versions of CVS support this option. Run cvs --help
            log to see if the -S option is listed.
            </summary>
            <version>1.2</version>
            <default>false</default>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.CvsHistoryParser">
            <summary>
            	
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.CvsHistoryParser.CVS_FILE_DELIM">
            <summary>
             This line delimits seperate files in the CVS log information.
             </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.CvsHistoryParser.CvsModificationDelimiter">
            <summary>
            This line delimits the different revisions of a file in the CVS log information.
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.CvsHistoryParser.CVS_RCSFILE_LINE">
            <summary>
            This is the keyword that precedes the name of the RCS filename in the CVS log information.
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.CvsHistoryParser.CVS_REVISION_DATE">
            <summary>
            This is the keyword that precedes the timestamp of a file revision in the CVS log information.
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.CvsHistoryParser.CVS_REVISION_DEAD">
            <summary>
            This is a state keyword which indicates that a revision to a file was not
            relevant to the current branch, or the revision consisted of a deletion
            of the file (removal from branch..).
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.CvsHistoryParser.Parse(System.IO.TextReader,System.DateTime,System.DateTime)">
            <summary>
            Parses the specified CVS log.	
            </summary>
            <param name="cvsLog">The CVS log.</param>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.CvsHistoryParser.ParseFolderName(System.String)">
            <summary>
            Strip the filename, Attic folder (if the file has been deleted) and repository folder prefix to get folder name.
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.ExternalSourceControl">
            <summary>
            A source control implementation for use when the source control system 
            doesn't integrate directly with CCNet.
            </summary>
            <title>External Source Control Configuration</title>
            <version>1.3</version>
            <key name="type">
            <description>The type of source control block.</description>
            <value>external</value>
            </key>
            <example>
            <code title="Minimal Configuration">
            &lt;sourcecontrol type="external"&gt;
            &lt;executable&gt;path to command-line application&lt;/executable&gt;
            &lt;/sourcecontrol&gt;
            </code>
            <code title="Full Example">
            &lt;sourcecontrol type="external"&gt;
            &lt;executable&gt;path to command-line application&lt;/executable&gt;
            &lt;args&gt;arguments for the command-line application&lt;/args&gt;
            &lt;autoGetSource&gt;false&lt;/autoGetSource&gt;
            &lt;labelOnSuccess&gt;false&lt;/labelOnSuccess&gt;
            &lt;environment&gt;
            &lt;var&gt;name=value&lt;/var&gt;
            &lt;var&gt;name=value&lt;/var&gt;
            &lt;/environment&gt;
            &lt;timeout units="minutes"&gt;10&lt;/timeout&gt;
            &lt;/sourcecontrol&gt;
            </code>
            </example>
            <remarks>
            <para>
            Each of the three sourcecontrol operations (GetModifications(), GetSource(), and LabelSourceControl()) are passed to the source control
            command as a command line.
            </para>
            <heading>GetModifications</heading>
            <para>
            The GetModifications function is invoked as the GETMODS operation, and specifying a starting and ending timestamp:
            </para>
            <code type="None">
            executable GETMODS "fromtimestamp" "totimestamp" args
            </code>
            <para>
            The source control command should search for modifications between these two times inclusively, write their details to the standard
            output stream in the XML format used by the <link>Modification Writer Task</link>, and exit with exit status 0 (any other status
            indicates an error and will fail the build). For example, the following represents two modifications, numbered 12244 and 12245.
            </para>
            <code>
            &lt;ArrayOfModification&gt;
            &lt;Modification&gt;
            &lt;ChangeNumber&gt;12245&lt;/ChangeNumber&gt;
            &lt;Comment&gt;New Project for testing stuff&lt;/Comment&gt;
            &lt;EmailAddress&gt;JUser@Example.Com&lt;/EmailAddress&gt;
            &lt;FileName&gt;AssemblyInfo.cs&lt;/FileName&gt;
            &lt;FolderName&gt;Dev\Server\Interface\Properties\&lt;/FolderName&gt;
            &lt;ModifiedTime&gt;2006-11-22T11:11:00-0500&lt;/ModifiedTime&gt;
            &lt;Type&gt;add&lt;/Type&gt;
            &lt;UserName&gt;joe_user&lt;/UserName&gt;
            &lt;Url&gt;http://www.example.com/index.html&lt;/Url&gt;
            &lt;Version&gt;5&lt;/Version&gt;
            &lt;/Modification&gt;
            &lt;Modification&gt;
            &lt;ChangeNumber&gt;12244&lt;/ChangeNumber&gt;
            &lt;Comment&gt;New Project for accessing web services&lt;/Comment&gt;
            &lt;EmailAddress&gt;SSpade@Example.Com&lt;/EmailAddress&gt;
            &lt;FileName&gt;Interface&lt;/FileName&gt;
            &lt;FolderName&gt;Dev\Server\&lt;/FolderName&gt;
            &lt;ModifiedTime&gt;2006-11-22T11:10:44-0500&lt;/ModifiedTime&gt;
            &lt;Type&gt;add&lt;/Type&gt;
            &lt;UserName&gt;sam_spade&lt;/UserName&gt;
            &lt;Url&gt;http://www.example.com/index.html&lt;/Url&gt;
            &lt;Version&gt;4&lt;/Version&gt;
            &lt;/Modification&gt;
            &lt;/ArrayOfModification&gt;
            </code>
            <heading>GetSource</heading>
            <para>
            The GetSource function is invoked as the GETSOURCE operation, and specifying a working directory path and the target timestamp:
            </para>
            <code type="None">
            executable GETSOURCE "workingdirectory" "timestamp" args
            </code>
            <para>
            The source control command should update the files in the specified working directory to the versions current as of the specified time
            stamp and exit with exit status 0 (any other status indicates an error and will fail the build).
            </para>
            <heading>LabelSourceControl</heading>
            <para>
            The LabelSourceControl function is invoked as the SETLABEL operation, and specifying a label to be applied and the target timestamp:
            </para>
            <code type="None">
            executable SETLABEL "label" "sourcetimestamp" args
            </code>
            <para>
            The source control command should add the label to source repository and exit with exit status 0 (any other status indicates an error 
            and will fail the build).
            </para>
            <para type="warning">
            <para>
            Watch out for the comment tag, if this contains dodgy charatecters eg.: &lt;   it will fail the getsource. Be sure to escape these
            characters.  So replace these with there XML equivalents : &amp;amp;lt;
            </para>
            <para>
            Be careful of the &lt;ModifiedTime&gt;, this MUST be more than the fromtimestamp if it is &lt;= then the modification will not be
            detected.
            </para>
            <para>
            You don't need the following parameters for this to work:
            </para>
            <list type="1">
            <item>&lt;Type /&gt;</item>
            <item>&lt;FileName /&gt;</item>
            <item>&lt;FolderName /&gt;</item>
            <item>&lt;Version /&gt;</item>
            <item>&lt;EmailAddress /&gt;</item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.ExternalSourceControl.#ctor">
            <summary>
            Create an instance of the source control integration with the default history parser and
            process executor.
            </summary>
            <remarks>
            Uses <see cref="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.ExternalSourceControl.#ctor(ThoughtWorks.CruiseControl.Core.Sourcecontrol.IHistoryParser,ThoughtWorks.CruiseControl.Core.Util.ProcessExecutor)"/> to do the heavy lifting.
            </remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.ExternalSourceControl.#ctor(ThoughtWorks.CruiseControl.Core.Util.ProcessExecutor)">
            <summary>
            Create an instance of the source control integration with the default history parser.
            </summary>
            <remarks>
            Uses <see cref="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.ExternalSourceControl.#ctor(ThoughtWorks.CruiseControl.Core.Sourcecontrol.IHistoryParser,ThoughtWorks.CruiseControl.Core.Util.ProcessExecutor)"/> to do the heavy lifting.
            </remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.ExternalSourceControl.#ctor(ThoughtWorks.CruiseControl.Core.Sourcecontrol.IHistoryParser,ThoughtWorks.CruiseControl.Core.Util.ProcessExecutor)">
            <summary>
            Create an instance of the source control integration.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.ExternalSourceControl.GetModifications(ThoughtWorks.CruiseControl.Core.IIntegrationResult,ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Obtain a list of modified files between the specified points on the revision history.
            </summary>
            <param name="from">the IntegrationResult containing the starting timestamp</param>
            <param name="to">the IntegrationResult containing the ending timestamp</param>
            <remarks>
            This method creates and runs a command to list all the modifications in the specified 
            timespan, and expects the modifications to be returned in the serialized form of the
            ThoughtWorks.CruiseControl.Core.Modification class <i>a la</i> 
            <see cref="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.Stream,System.Object)"/>.
            
            The command executed is:
            <param>executable</param> <code>GETMODS</code> "<param>fromtimestamp</param>" "<param>totimestamp</param>" <param>argstring</param>
            with timestamps represented as "<i>yyyy</i>-<i>mm</i>-<i>dd</i> <i>hh</i>:<i>mm</i>:<i>ss</i>"
            in local 24-hour time.
            The command must return the modification list as its standard output.
            </remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.ExternalSourceControl.GetSource(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Obtain the specified level on the source code. 
            </summary>
            <param name="result">the the IntegrationResult containing the timestamp</param>
            <remarks>
            The command executed is:
            <param>executable</param> <code>GETSOURCE</code> "<param>workingdirectory</param>" "<param>timestamp</param>" <param>argstring</param>
            with the timestamp represented as "<i>yyyy</i>-<i>mm</i>-<i>dd</i> <i>hh</i>:<i>mm</i>:<i>ss</i>"
            in local 24-hour time.
            </remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.ExternalSourceControl.LabelSourceControl(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Label the specified source level.
            </summary>
            <param name="result">the IntegrationResult containing the label</param>
            <remarks>
            The command executed is:
            <param>executable</param> <code>SETLABEL</code> "<param>label</param>" "<param>sourcetimestamp</param>" <param>argstring</param>
            with the source timestamp represented as "<i>yyyy</i>-<i>mm</i>-<i>dd</i> <i>hh</i>:<i>mm</i>:<i>ss</i>"
            in local 24-hour time.
            </remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.ExternalSourceControl.FormatCommandDate(System.DateTime)">
            <summary>
            Format a timestamp the way the commands need to see it.
            </summary>
            <param name="date">the timestamp to format.</param>
            <returns>the timestamp as a string in "yyyy-mm-dd hh:mm:ss" form in local time</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.ExternalSourceControl.PrepCommand(System.String,System.String,ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Prepare a command for execution.
            </summary>
            <param name="executable">name of command to run</param>
            <param name="args">arguments for the command</param>
            <param name="result">IntegrationResult for which the command will be run</param>
            <returns>a ProcessInfo object primed to execute the specified command</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.ExternalSourceControl.RunCommand(System.String,System.String,ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Execute a command and check the results.
            </summary>
            <param name="executable">name of command to run</param>
            <param name="args">arguments for the "accurev" command</param>
            <param name="result">IntegrationResult for which the command is being run</param>
            <returns>a ProcessResult object with the results from the command</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.ExternalSourceControl.SetCCNetEnvironmentVariables(System.Collections.Specialized.StringDictionary,System.Collections.IDictionary)">
            <summary>
            Pass CCNet's standard environment variables to the process.
            </summary>
            <param name="variablePool">The collection of environment variables to be updated.</param>
            <param name="varsToSet">The collection of variables to set.</param>
            <remarks>
            Any variable without a value will be set to null (just as in 
            <see cref="!:ExecutableTask.SetConfiguredEnvironmentVariables"/>).
            </remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.ExternalSourceControl.SetConfiguredEnvironmentVariables(System.Collections.Specialized.StringDictionary,ThoughtWorks.CruiseControl.Core.Util.EnvironmentVariable[])">
            <summary>
            Pass the project's environment variables to the process.
            </summary>
            <param name="variablePool">The collection of environment variables to be updated.</param>
            <param name="varsToSet">An array of environment variables to set.</param>
            <remarks>
            Any variable without a value will be set to an empty string.
            </remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.ExternalSourceControl.ArgString">
            <summary>
            A string to be passed to the external source control program in commands.
            </summary>
            <remarks>
            The string will be passed exactly as specified.  In particular, it will not be enclosed
            quotation marks, thus allowing you to specify what the executable will see as multiple
            parameters.
            </remarks>
            <version>1.3</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.ExternalSourceControl.AutoGetSource">
            <summary>
            Should we automatically obtain updated source from the source control system or not? 
            </summary>
            <version>1.3</version>
            <default>false</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.ExternalSourceControl.EnvironmentVariables">
            <summary>
            A set of environment variables set for commands that are executed.
            </summary>
            <version>1.3</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.ExternalSourceControl.Executable">
            <summary>
            Name of the source control system executable to run.
            </summary>
            <version>1.3</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.ExternalSourceControl.LabelOnSuccess">
            <summary>
            If set, the source repository will be tagged with the build label upon successful builds.
            </summary>
            <version>1.3</version>
            <default>false</default>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.ExternalSourceControlHistoryParser">
            <summary>
            Parser for ExternalSourceControl modification output.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.ExternalSourceControlHistoryParser.#ctor">
            This method creates and runs a command to list all the modifications in the specified 
            timespan, and expects the modifications to be returned in the serialized form of the
            ThoughtWorks.CruiseControl.Core.Modification class <i>ala</i> 
            <see cref="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.Stream,System.Object)"/>.
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.ExternalSourceControlHistoryParser.Parse(System.IO.TextReader,System.DateTime,System.DateTime)">
            <summary>
            Construct and return an array of Modifications describing the changes in
            the AccuRev workspace, based on the output of the "accurev hist" command.
            </summary>
            <param name="history">the stream of <code>&lt;modifications&gt;</code> input</param>
            <param name="from">the starting date and time for the range of modifications we want.</param>
            <param name="to">the ending date and time for the range of modifications we want.</param>
            <returns>the changes in the specified time range.</returns>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.FileSourceControl">
            <summary>
            Use the 'Filesystem' Source Control plugin to check for modifications on a directory accessible by the build server. A file is
            considered modified if the file's modified time stamp is more recent than the last time CruiseControl.Net checked for modifications.
            You can use either directories on 'mapped' drives (local or remote), or UNC paths (remote).
            </summary>
            <title>Filesystem Source Control Block</title>
            <version>1.0</version>
            <key name="type">
            <description>The type of source control block.</description>
            <value>filesystem</value>
            </key>
            <example>
            <code title="Minimalist example">
            &lt;sourcecontrol type="filesystem"&gt;
            &lt;repositoryRoot&gt;c:\mycode&lt;/repositoryRoot&gt;
            &lt;/sourcecontrol&gt;
            </code>
            <code title="Full example">
            &lt;sourcecontrol type="filesystem"&gt;
            &lt;repositoryRoot&gt;c:\mycode&lt;/repositoryRoot&gt;
            &lt;autoGetSource&gt;true&lt;/autoGetSource&gt;
            &lt;ignoreMissingRoot&gt;false&lt;/ignoreMissingRoot&gt;
            &lt;/sourcecontrol&gt;
            </code>
            </example>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.FileSourceControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.FileSourceControl"/> class.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.FileSourceControl.#ctor(ThoughtWorks.CruiseControl.Core.Util.IFileSystem)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.FileSourceControl"/> class.	
            </summary>
            <param name="fileSystem">The file system.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.FileSourceControl.GetModifications(ThoughtWorks.CruiseControl.Core.IIntegrationResult,ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Gets the modifications.	
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.FileSourceControl.LabelSourceControl(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Labels the source control.	
            </summary>
            <param name="result">The result.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.FileSourceControl.GetSource(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Gets the source.	
            </summary>
            <param name="result">The result.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.FileSourceControl.Initialize(ThoughtWorks.CruiseControl.Core.IProject)">
            <summary>
            Initializes the specified project.	
            </summary>
            <param name="project">The project.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.FileSourceControl.Purge(ThoughtWorks.CruiseControl.Core.IProject)">
            <summary>
            Purges the specified project.	
            </summary>
            <param name="project">The project.</param>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.FileSourceControl.RepositoryRoot">
            <summary>
            The directory to check for changes. This directory will be checked recursively. 
            </summary>
            <version>1.0</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.FileSourceControl.IgnoreMissingRoot">
            <summary>
            Whether to automatically (recursively) copy the contents of the repositoryRoot directory to the Project Working Directory.
            </summary>
            <version>1.0</version>
            <default>false</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.FileSourceControl.AutoGetSource">
            <summary>
            Whether to not fail if the repository doesn't exist.
            </summary>
            <version>1.0</version>
            <default>false</default>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.FilteredSourceControl">
            <summary>
            <para>
            The FilteredSourceControl allows you to filter out modifications that are used to trigger a build. If for example, you have certain
            files (such as web pages or document files) under source control that you don't want to have trigger the build, you can use this class
            to ensure that their changes will keep a new build from launching.
            </para>
            <para>
            The FilteredSourceControl works together with all of the source controls supported by CCNet (including the <link>Multi Source Control
            Block</link>). It can also be included under the <link>Multi Source Control Block</link> provider so that you could have multiple
            FilterSourceControls each filtering a different set of modifications from different source control providers. Essentially, it acts as a
            decorator (or an example of the pipes and filters pattern ), wrapping around the specific SourceControl provider that you want to use.
            </para>
            <para>
            The FilteredSourceControl includes both inclusion and exclusion filters for specifying what modifications should be included/excluded.
            Multiple inclusion and exclusion filters can be specified or, alternately, no inclusion or exclusion filter could be specified. If a
            modification is matched by both the inclusion and exclusion filter, then the exclusion filter will take preference and the modification
            will not be included in the modification set. It is relatively straightforward to build new filters, (such as one to filter
            modifications based on email address).
            </para>
            </summary>
            <title>Filtered Source Control Block</title>
            <version>1.0</version>
            <key name="type">
            <description>The type of source control block.</description>
            <value>filtered</value>
            </key>
            <example>
            <code>
            &lt;sourcecontrol type="filtered"&gt;
            &lt;sourceControlProvider type="vss" autoGetSource="true"&gt;
            &lt;project&gt;$/Kunigunda/ServiceLocator&lt;/project&gt;
            &lt;workingDirectory&gt;C:\CCNet\Kunigunda\ServiceLocator&lt;/workingDirectory&gt;
            &lt;username&gt;urosn&lt;/username&gt;
            &lt;password&gt;&lt;/password&gt;
            &lt;ssdir&gt;c:\localvss&lt;/ssdir&gt;
            &lt;/sourceControlProvider&gt;
            &lt;inclusionFilters&gt;
            &lt;pathFilter&gt;
            &lt;pattern&gt;$/Kunigunda/ServiceLocator/Sources/**/*.*&lt;/pattern&gt;
            &lt;/pathFilter&gt;
            &lt;/inclusionFilters&gt;
            &lt;exclusionFilters&gt;
            &lt;pathFilter&gt;
            &lt;pattern&gt;$/Kunigunda/ServiceLocator/Sources/Kunigunda.ServiceLocator/AssemblyInfo.cs&lt;/pattern&gt;
            &lt;/pathFilter&gt;
            &lt;pathFilter&gt;
            &lt;pattern&gt;$/**/*.vssscc&lt;/pattern&gt;
            &lt;/pathFilter&gt;
            &lt;userFilter&gt;
            &lt;names&gt;&lt;name&gt;Perry&lt;/name&gt;&lt;name&gt;Joe&lt;/name&gt;&lt;/names&gt;
            &lt;/userFilter&gt;
            &lt;actionFilter&gt;
            &lt;actions&gt;&lt;action&gt;deleted&lt;/action&gt;&lt;/actions&gt;
            &lt;/actionFilter&gt;
            &lt;commentFilter&gt;
            &lt;pattern&gt;Ignore: .*&lt;/pattern&gt;
            &lt;/commentFilter&gt;
            &lt;/exclusionFilters&gt;
            &lt;/sourcecontrol&gt;
            </code>
            </example>
            <remarks>
            Implemented and contributed by Uros Novak.
            </remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.FilteredSourceControl.GetModifications(ThoughtWorks.CruiseControl.Core.IIntegrationResult,ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Get the list of modifications from the inner source control provider and filter it.
            </summary>
            <returns>The filtered modification list.</returns>
            <remarks>
            A modification survives filtering if it is accepted by the inclusion filters and not accepted
            by the exclusion filters.
            </remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.FilteredSourceControl.LabelSourceControl(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Labels the source control.	
            </summary>
            <param name="result">The result.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.FilteredSourceControl.GetSource(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Gets the source.	
            </summary>
            <param name="result">The result.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.FilteredSourceControl.Initialize(ThoughtWorks.CruiseControl.Core.IProject)">
            <summary>
            Initializes the specified project.	
            </summary>
            <param name="project">The project.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.FilteredSourceControl.Purge(ThoughtWorks.CruiseControl.Core.IProject)">
            <summary>
            Purges the specified project.	
            </summary>
            <param name="project">The project.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.FilteredSourceControl.IsAcceptedByInclusionFilters(ThoughtWorks.CruiseControl.Core.Modification)">
            <summary>
            Determine if the specified modification should be included.
            </summary>
            <param name="m">The modification to check.</param>
            <returns>True if the modification should be included, false otherwise.</returns>
            <remarks>
            Modification is accepted by default if there isn't any
            inclusion filter or if the modification is accepted by
            at least one of the defined filters.
            </remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.FilteredSourceControl.IsAcceptedByExclusionFilters(ThoughtWorks.CruiseControl.Core.Modification)">
            <summary>
            Determine if the specified modification should be excluded.
            </summary>
            <param name="m">The modification to check.</param>
            <returns>True if the modification should be excluded, false otherwise.</returns>
            <remarks>
            Modification is not accepted if there isn't any exclusion
            filter. Modification is accepted if it is accepted by at 
            least one of the defined exclusion filters.
            </remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.FilteredSourceControl.ApplyParameters(System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.IEnumerable{ThoughtWorks.CruiseControl.Remote.Parameters.ParameterBase})">
            <summary>
            Applies the input parameters to the task.
            </summary>
            <param name="parameters">The parameters to apply.</param>
            <param name="parameterDefinitions">The original parameter definitions.</param>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.FilteredSourceControl.SourceControlProvider">
            <summary>
            This element is used to specify the type of source control provider to retrieve modifications from. With the exception of the
            element name, the configuration for this element is identical to the xml configuration for the specific source control provider you
            intend to use.
            </summary>
            <version>1.0</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.FilteredSourceControl.ExclusionFilters">
            <summary>
            The list of filters that decide what modifications to exclude.
            </summary>
            <version>1.0</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.FilteredSourceControl.InclusionFilters">
            <summary>
            The list of filters that decide what modifications to include.
            </summary>
            <version>1.0</version>
            <default>None</default>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.FtpSourceControl">
            <summary>
            <para>
            The Ftp Soure control block allows to detect new and changed files at an Ftp site.
            </para>
            <para type="warning">
            Deleted files are <b>NOT</b> detected.
            </para>
            </summary>
            <title>FTP Source control</title>
            <version>1.4.4</version>
            <key name="type">
            <description>The type of source control block.</description>
            <value>ftpSourceControl</value>
            </key>
            <example>
            <code>
            &lt;sourcecontrol type="ftpSourceControl"&gt;
            &lt;serverName&gt;ftp.isp.com&lt;/serverName&gt;
            &lt;userName&gt;john&lt;/userName&gt;
            &lt;password&gt;doe&lt;/password&gt;
            &lt;ftpFolderName&gt;config&lt;/ftpFolderName&gt;
            &lt;localFolderName&gt;d:\temp\config&lt;/localFolderName&gt;
            &lt;recursiveCopy&gt;true&lt;/recursiveCopy&gt;
            &lt;/sourcecontrol&gt;
            </code>
            </example>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.FtpSourceControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.FtpSourceControl"/> class.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.FtpSourceControl.GetModifications(ThoughtWorks.CruiseControl.Core.IIntegrationResult,ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Gets the modifications.	
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.FtpSourceControl.LabelSourceControl(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Labels the source control.	
            </summary>
            <param name="result">The result.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.FtpSourceControl.GetSource(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Gets the source.	
            </summary>
            <param name="result">The result.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.FtpSourceControl.Initialize(ThoughtWorks.CruiseControl.Core.IProject)">
            <summary>
            Initializes the specified project.	
            </summary>
            <param name="project">The project.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.FtpSourceControl.Purge(ThoughtWorks.CruiseControl.Core.IProject)">
            <summary>
            Purges the specified project.	
            </summary>
            <param name="project">The project.</param>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.FtpSourceControl.ServerName">
            <summary>
            The name of the server to connect to.
            </summary>
            <version>1.4.4</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.FtpSourceControl.UserName">
            <summary>
            The user name to log in with.
            </summary>
            <version>1.4.4</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.FtpSourceControl.Password">
            <summary>
            The password for the user.
            </summary>
            <version>1.4.4</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.FtpSourceControl.UseActiveConnectionMode">
            <summary>
            Whether to use active connection mode or not.
            </summary>
            <version>1.4.4</version>
            <default>true</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.FtpSourceControl.FtpFolderName">
            <summary>
            The folder name of on the ftp site.
            </summary>
            <version>1.4.4</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.FtpSourceControl.LocalFolderName">
            <summary>
            The folder name on the local system.
            </summary>
            <version>1.4.4</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.FtpSourceControl.RecursiveCopy">
            <summary>
            Whether to recurse into subfolders or not.
            </summary>
            <version>1.4.4</version>
            <default>true</default>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Git">
            <summary>
              Source Control Plugin for CruiseControl.NET that talks to git.
            </summary>
            <title>Git Source Control Block</title>
            <version>1.5</version>
            <key name="type">
            <description>The type of source control block.</description>
            <value>git</value>
            </key>
            <example>
            <code title="Minimalist Example">
            &lt;sourcecontrol type="git"&gt;
            &lt;repository&gt;git://github.com/rails/rails.git&lt;/repository&gt;
            &lt;/sourcecontrol&gt;
            </code>
            <code title="Full Example">
            &lt;sourcecontrol type="git"&gt;
            &lt;repository&gt;git://github.com/rails/rails.git&lt;/repository&gt;
            &lt;branch&gt;master&lt;/branch&gt;
            &lt;autoGetSource&gt;true&lt;/autoGetSource&gt;
            &lt;fetchSubmodules&gt;true&lt;/fetchSubmodules&gt;
            &lt;executable&gt;git&lt;/executable&gt;
            &lt;tagOnSuccess&gt;false&lt;/tagOnSuccess&gt;
            &lt;commitBuildModifications&gt;false&lt;/commitBuildModifications&gt;
            &lt;commitUntrackedFiles&gt;false&lt;/commitUntrackedFiles&gt;
            &lt;tagCommitMessage&gt;CCNet Build {0}&lt;/tagCommitMessage&gt;
            &lt;tagNameFormat&gt;CCNet-Build-{0}&lt;/tagNameFormat&gt;
            &lt;committerName&gt;Max Mustermann&lt;/committerName&gt;
            &lt;committerEMail&gt;max.mustermann@gmx.de&lt;/committerEMail&gt;
            &lt;workingDirectory&gt;c:\build\rails&lt;/workingDirectory&gt;
            &lt;timeout&gt;60000&lt;/timeout&gt;
            &lt;/sourcecontrol&gt;
            </code>
            </example>
            <remarks>
            <heading>How does this work?</heading>
            <para>
            <b>Local repository initialization</b>
            </para>
            <para>
            The Git Source Control Block will check whenever the specified working directory exist or not. If it does not exist a "git clone"
            command is issued to create and setup the local repository. Also the configuration settings "user.name" and "user.email" for the local
            repository will be set with "git config" if both are provided. If 'fetchSubmodules' is set to 'true' git submodules will be initialized.
            </para>
            <para>
            If the working directory exists but is not a git repository (e.g. the .git directory is missing) it will be deleted and the "git clone"
            and configuration instructions described above will be issued.
            </para>
            <para>
            If the working directory is already the root of an existing git repository no initialization is done.
            </para>
            <para>
            <b>Checking for modifications</b>
            </para>
            <para>
            One the repository is initialized the "git fetch origin" command is issued to fetch the remote changes. In the next step the sha-1 hash
            of the specified remote branch and the local checkout is compared. If they're identical Cruise Control.NET will expect that there are
            no changes.
            </para>
            <para>
            If the 2 sha-1 hashes are different a "git log --name-status -c --before=... --after=..." command is issued to get a list of the new
            commits and their changes.
            </para>
            <para>
            <b>Getting the source</b>
            </para>
            <para>
            Once Cruise Control.NET has modifications detected and the 'autoGetSource' property is set to 'true' the "git checkout -f
            origin/$NameOfTheBranch" command is issued. Also the "git clean -f -d -x" command to get a clean working copy to start a new build.
            If 'fetchSubmodules' is set to 'true' git submodules will be fetched and updated.
            </para>
            <para>
            <b>Tagging a successful build</b>
            </para>
            <para>
            After a successful build and when the 'tagOnSuccess' property is set to 'true' the "git -a -m 'tagCommitMessage' tag 'build label'"
            command is issued and a "git push origin tag 'name of the tag'" to push the tag to the remote repository.
            </para>
            <para>
            If 'commitBuildModifications' is set to 'true' then all modified files will be committed before tagging with a "git commit --all
            --allow-empty -m 'tagCommitMessage'". If you also set 'commitUntrackedFiles' to 'true' all untracked files that are not ignored by
            .gitignores will be added to the git index before committing and tagging with a "git add --all" command.
            </para>
            <heading>Using Git on Windows</heading>
            <para>
            Download and install the latest version of msysgit.
            </para>
            <list type="1">
            <item>
            Point the "executable" property to the git.cmd file (e.g. C:\Program Files\Git\cmd\git.cmd)
            </item>
            <item>
            Or set the "path" environment variable to the "bin" directory of your msysgit instalation (e.g. C:\Program Files\Git\bin), the "HOME"
            environment variable to "%USERPROFILE%" and the "PLINK_PROTOCOL" environment variable to "ssh".
            </item>
            </list>
            <para></para>
            <para></para>
            <para>
            Homepage: http://code.google.com/p/msysgit/
            </para>
            <heading>Using Git on Unix (CruiseControl.NET with Mono)</heading>
            <para>
            Make sure that you've the latest Git installed via your distributions packet manager and that git and all its required applications are
            in $PATH.
            </para>
            <heading>Additional Information</heading>
            <para>
            The default port git uses is 9418. Git over SSH uses port 22 by default. Make sure that your firewall is set up to handle this.
            </para>
            </remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Git.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Git"/> class.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Git.#ctor(ThoughtWorks.CruiseControl.Core.Sourcecontrol.IHistoryParser,ThoughtWorks.CruiseControl.Core.Util.ProcessExecutor,ThoughtWorks.CruiseControl.Core.Util.IFileSystem,ThoughtWorks.CruiseControl.Core.Util.IFileDirectoryDeleter)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Git"/> class.	
            </summary>
            <param name="historyParser">The history parser.</param>
            <param name="executor">The executor.</param>
            <param name="fileSystem">The file system.</param>
            <param name="fileDirectoryDeleter">The file directory deleter.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Git.GetModifications(ThoughtWorks.CruiseControl.Core.IIntegrationResult,ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Gets the modifications.	
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Git.GetSource(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Gets the source.	
            </summary>
            <param name="result">The result.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Git.LabelSourceControl(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Labels the source control.	
            </summary>
            <param name="result">The result.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Git.CreateUpateLocalRepository(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Fetches a git repository.
            
            If the working directory doesn't exist then a 'git clone' is issued to
            initialize the local repo and fetch changes from the remote repo.
            Also setup the local repository with some required configuration settings.
            
            Else if the .git directory doesn't exist then delete the working directory
            and call the method recursive again.
            
            Else if the working directory is already a git repository then a 'git fetch'
            is issued to fetch changes from the remote repo.
            </summary>
            <param name="result">IIntegrationResult of the current build.</param>
            <returns>The action that was done, repository created or updated.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Git.SetupLocalRepository(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Setup the local repository with some required config settings.
            
            For tagging:
            - User name
            - User e-mail
            </summary>
            <param name="result">IIntegrationResult of the current build.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Git.GitLogOriginHash(System.String,ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Get the hash of the latest commit in the remote repository.
            </summary>
            <param name="branchName">Name of the branch.</param>
            <param name="result">IIntegrationResult of the current build.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Git.GitLogLocalHash(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Get the hash of the latest commit in the local repository
            </summary>
            <param name="result">IIntegrationResult of the current build.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Git.GitLogHistory(System.String,ThoughtWorks.CruiseControl.Core.IIntegrationResult,ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Get the commit history including changes in date order in the provided upper and lower time limit.
            </summary>
            <param name="branchName">Name of the branch.</param>
            <param name="from">IIntegrationResult of the last build.</param>
            <param name="to">IIntegrationResult of the current build.</param>
            <returns>Result of the "git log" command.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Git.GitClone(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Clone a repository into a new directory with "git clone 'repository' 'working directory'".
            </summary>
            <param name="result">IIntegrationResult of the current build.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Git.GitConfigSet(System.String,System.String,ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Call "git config 'name' 'value'" to set local repository properties.
            </summary>
            <param name="name">Name of the config parameter.</param>
            <param name="value">Value of the config parameter.</param>
            <param name="result">IIntegrationResult of the current build.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Git.GitConfigGet(System.String,ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Call "git config --get 'name'" to get the value of a local repository property.
            The command returns error code 1 if the key was not found and error code 2 if multiple key values were found. 
            </summary>
            <param name="name">Name of the config parameter.</param>
            <param name="result">IIntegrationResult of the current build.</param>
            <returns>Result of the "git config --get 'name'" command.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Git.GitFetch(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Download objects and refs from another repository via the
            "git fetch origin" command.
            </summary>
            <param name="result">IIntegrationResult of the current build.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Git.GitCheckoutRemoteBranch(System.String,ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Checkout a remote branch with the "git checkout -q -f 'origin/branchName'" command.
            </summary>
            <param name="branchName">Name of the branch to checkout.</param>
            <param name="result">IIntegrationResult of the current build.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Git.GitClean(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Clean the working tree with "git clean -d -f -x".
            </summary>
            <param name="result">IIntegrationResult of the current build.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Git.GitCommitAll(System.String,ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Automatically stage files that have been modified and deleted
            and commit them with the "git commit --all --allow-empty -m 'message'"
            command.
            </summary>
            <param name="commitMessage">Commit message.</param>
            <param name="result">IIntegrationResult of the current build.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Git.GitAddAll(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Add all modified and all untracked files that are not ignored by .gitignore
            to the git index with the "git add --all" command.
            </summary>
            <param name="result">IIntegrationResult of the current build.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Git.GitCreateTag(System.String,System.String,ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Create a unsigned tag with "git tag -a -m 'message' 'tag name'".
            </summary>
            <param name="tagName">Name of the tag.</param>
            <param name="tagMessage">Tag commit message.</param>
            <param name="result">IIntegrationResult of the current build.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Git.GitPushTag(System.String,ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Push a specific tag with "git push origin tag 'tag name'".
            </summary>
            <param name="tagName">Naem of the tag to push.</param>
            <param name="result">IIntegrationResult of the current build.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Git.GitInitSubmodules(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Initialize the git submodules.
            </summary>
            <param name="result">IIntegrationResult of the current build.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Git.GitUpdateSubmodules(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Updates and fetches git submodules.
            </summary>
            <param name="result"></param>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Git.AutoGetSource">
            <summary>
            Whether to fetch the updates from the repository and checkout the branch for a particular build. 
            </summary>
            <version>1.5</version>
            <default>true</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Git.Executable">
            <summary>
            The location of the Git executable. 
            </summary>
            <version>1.5</version>
            <default>git</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Git.Repository">
            <summary>
            The url to the remote repository. 
            </summary>
            <version>1.5</version>
            <default>false</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Git.Branch">
            <summary>
            Remote repository branch to monitor and checkout. 
            </summary>
            <version>1.5</version>
            <default>master</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Git.FetchSubmodules">
            <summary>
            Indicates that CruiseControl.NET should initialize and fetch git submodules.
            </summary>
            <version>1.6</version>
            <default>false</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Git.TagCommitMessage">
            <summary>
            Format string for the commit message of each tag. \{0\} is the placeholder for the current build label. 
            </summary>
            <version>1.5</version>
            <default>CCNet Build \{0\}</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Git.TagNameFormat">
            <summary>
            Format string for the name of each tag. Make sure you're only using allowed characters. \{0\} is the placeholder for the current
            build label. 
            </summary>
            <version>1.5</version>
            <default>CCNet-Build-\{0\}</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Git.TagOnSuccess">
            <summary>
            Indicates that the repository should be tagged if the build succeeds.
            </summary>
            <version>1.5</version>
            <default>false</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Git.CommitBuildModifications">
            <summary>
            Indicates that all modifications during the build process should be committed before tagging. This requires 'tagOnSuccess ' to be
            set to 'true'.
            </summary>
            <version>1.5</version>
            <default>false</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Git.CommitUntrackedFiles">
            <summary>
            Indicates that files created during the build process should be committed before tagging. This requires 'commitBuildModifications'
            and 'tagOnSuccess ' to be set to 'true'.
            </summary>
            <version>1.5</version>
            <default>false</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Git.CommitterName">
            <summary>
            Used to set the "user.name" configuration setting in the local repository. Required for the 'tagOnSuccess ' feature. 
            </summary>
            <version>1.5</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Git.CommitterEMail">
            <summary>
            Used to set the "user.email" configuration setting in the local repository. Required for the 'tagOnSuccess ' feature. 
            </summary>
            <version>1.5</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Git.WorkingDirectory">
            <summary>
            The directory containing the local git repository. 
            </summary>
            <version>1.5</version>
            <default>Project Working Directory</default>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Git.RepositoryAction">
            <summary>
            Private enum that is used to determine the action done
            by the CreateUpateLocalRepository() method.
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.GitHistoryParser">
            <summary>
            	
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.GitHistoryParser.Parse(System.IO.TextReader,System.DateTime,System.DateTime)">
            <summary>
            Parse and filter the supplied modifications.  The position of each modification in the list is used as the ChangeNumber.
            </summary>
            <param name="history"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.GitHistoryParser.GetCommitModifications(System.Text.RegularExpressions.Match,System.DateTime,System.DateTime)">
            <summary>
            Parse a commit for modifications and returns a list with every modification in the date/time limits.
            </summary>
            <param name="commitMatch"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.GitHistoryParser.GetModificationType(System.String)">
            <summary>
            Convert a "git log --name-status" action value to a modification type name.
            </summary>
            <param name="actionAbbreviation">The action abbreviation.</param>
            <returns>The modification type name.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.GitHistoryParser.GetFolderFromPath(System.String)">
            <summary>
            Extract the folder name from a file path name in a "git log --name-status" command.
            </summary>
            <param name="fullFileName">The path name.</param>
            <returns>The folder name.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.GitHistoryParser.GetFileFromPath(System.String)">
            <summary>
            Extract the file name from a file path name in a "git log --name-status" command.
            </summary>
            <param name="fullFileName">The path name.</param>
            <returns>The file name.</returns>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.IModificationUrlBuilder">
            <summary>
            A builder to convert URLs within modifications into links.
            </summary>
            <title>IssueUrlBuilder</title>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.IModificationUrlBuilder.SetupModification(ThoughtWorks.CruiseControl.Core.Modification[])">
            <summary>
            Setups the modification.	
            </summary>
            <param name="modifications">The modifications.</param>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.IStarTeamRegExProvider">
            <summary>
            	
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.IStarTeamRegExProvider.FolderRegEx">
            <summary>
            Gets the folder reg ex.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.IStarTeamRegExProvider.FileRegEx">
            <summary>
            Gets the file reg ex.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.IStarTeamRegExProvider.FileHistoryRegEx">
            <summary>
            Gets the file history reg ex.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.IVssLocale">
            <summary>
            	
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.IVssLocale.ParseDateTime(System.String,System.String)">
            <summary>
            Parses the date time.	
            </summary>
            <param name="date">The date.</param>
            <param name="time">The time.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.IVssLocale.FormatCommandDate(System.DateTime)">
            <summary>
            Formats the command date.	
            </summary>
            <param name="date">The date.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.IVssLocale.CommentKeyword">
            <summary>
            Gets the comment keyword.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.IVssLocale.CheckedInKeyword">
            <summary>
            Gets the checked in keyword.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.IVssLocale.AddedKeyword">
            <summary>
            Gets the added keyword.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.IVssLocale.DeletedKeyword">
            <summary>
            Gets the deleted keyword.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.IVssLocale.DestroyedKeyword">
            <summary>
            Gets the destroyed keyword.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.IVssLocale.UserKeyword">
            <summary>
            Gets the user keyword.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.IVssLocale.DateKeyword">
            <summary>
            Gets the date keyword.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.IVssLocale.TimeKeyword">
            <summary>
            Gets the time keyword.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.IVssLocale.ServerCulture">
            <summary>
            Gets or sets the server culture.	
            </summary>
            <value>The server culture.</value>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Mercurial.HgWebUrlBuilder">
            <summary>
            Build a Mercurial URL.
            </summary>
            <title>Mercurial Issue Tracker URL Builder</title>
            <version>1.5</version>
            <example>
            <code>
            &lt;webUrlBuilder type="hgweb"&gt;
            &lt;url&gt;http://hg.mycompany.com/hgwebdir.cgi/myproject/&lt;/url&gt;
            &lt;/webUrlBuilder&gt;
            </code>
            </example>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Mercurial.HgWebUrlBuilder.SetupModification(ThoughtWorks.CruiseControl.Core.Modification[])">
            <summary>
            Setups the modification.
            </summary>
            <param name="modifications">The modifications.</param>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Mercurial.HgWebUrlBuilder.Url">
            <summary>
            The base URL to use.
            </summary>
            <version>1.5</version>
            <default>n/a</default>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Mercurial.Mercurial">
            <summary>
            Provides support for Mercurial repositories. Checking for changes, checking out or updating sources,
            committing build modifications and untracked files, tagging, pushing to the remote repository,
            reverting modifications and purging untracked and ignored files are supported.
            </summary>
            <title> Mercurial Source Control Block </title>
            <version>1.5</version>
            <example>
            <code>
            &lt;sourcecontrol type="hg"&gt;
            &lt;workingDirectory&gt;c:\dev\ccnet\myproject&lt;/workingDirectory&gt;
            &lt;timeout&gt;60000&lt;/timeout&gt;
            &lt;repo&gt;http://hg.mycompany.com/hgwebdir.cgi/myproject/&lt;/repo&gt;
            &lt;branch&gt;trunk&lt;/branch&gt;
            &lt;multipleHeadsFail&gt;true&lt;/multipleHeadsFail&gt;
            &lt;tagOnSuccess&gt;true&lt;/tagOnSuccess&gt;
            &lt;commitModifications&gt;true&lt;/commitModifications&gt;
            &lt;commitUntracked&gt;true&lt;/commitUntracked&gt;
            &lt;purgeModifications&gt;true&lt;/purgeModifications&gt;
            &lt;revertModifications&gt;true&lt;/revertModifications&gt;
            &lt;tagCommitMessage&gt;Tagging CC.NET build {0}&lt;/tagCommitMessage&gt;
            &lt;modificationsCommitMessage&gt;Modifications of CC.NET build {0}&lt;/modificationsCommitMessage&gt;
            &lt;tagNameFormat&gt;ccnet_build_{0}&lt;/tagNameFormat&gt;
            &lt;committerName&gt;CruiseControl.NET&lt;/committerName&gt;
            &lt;/sourcecontrol&gt;
            </code>
            </example>
            <key name="type">
            <description>The type of source control block.</description>
            <value>hg</value>
            </key>
            <remarks>
            <para>
            You need to make sure your hg client settings are such that all authentication is automated.
            Typically you can do this by using anonymous access or appropriate SSH setups if using hg over SSH.
            </para>
            <para>
            You can link the modifications detected by CruiseControl.NET to the appropriate hgweb page by
            adding the following additional configuration information to the Mercurial source control section
            by using the <link>Mercurial Issue Tracker URL Builder</link>.
            </para>
            <para>
            External contributors:
            Bill Barry (initial version),
            Aaron Jensen (new history parser)
            </para>
            </remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Mercurial.Mercurial.DefaultExecutable">
            <summary>
            The default executable of mercurial.
            </summary>
            <remarks>Usually just "hg"</remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Mercurial.Mercurial.DefaultBranch">
            <summary>
            The default branch of mercurial repositories.
            </summary>
            <remarks>Usually "default".</remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Mercurial.Mercurial.DefaultCommitterName">
            <summary>
            The default committer name for commit and tag operations that are done during integration.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Mercurial.Mercurial.DefaultModificationsCommitMessage">
            <summary>
            The default format string to build the log message for commits of build modifications.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Mercurial.Mercurial.DefaultTagNameFormat">
            <summary>
            The format string to build the tag (label) names.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Mercurial.Mercurial.DefaultTagCommitMessage">
            <summary>
            The format string to build the log message for tag (label) operations.
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Mercurial.Mercurial._fileSystem">
            <summary>
            The _fileSystem is used to create working directories.
            </summary>
            <remarks>Initialized with an SystemIoFileSystem instance.</remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Mercurial.Mercurial._fileDirectoryDeleter">
            <summary>
            The _fileDirectoryDeleter is used to delete suspect working directories.
            </summary>
            <remarks>Initialized with an IoSystem instance.</remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Mercurial.Mercurial._buildProgressInformation">
            <summary>
            The _buildProgressInformation is a reference to the current integration results BuildProgressInformation.
            </summary>
            <remarks>Use GetBuildProgressInfomation(result) to initialize and get the reference.</remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Mercurial.Mercurial.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Mercurial.Mercurial"/> class.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Mercurial.Mercurial.#ctor(ThoughtWorks.CruiseControl.Core.Sourcecontrol.IHistoryParser,ThoughtWorks.CruiseControl.Core.Util.ProcessExecutor,ThoughtWorks.CruiseControl.Core.Util.IFileSystem,ThoughtWorks.CruiseControl.Core.Util.IFileDirectoryDeleter)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Mercurial.Mercurial"/> class.
            </summary>
            <param name="historyParser">The history parser.</param>
            <param name="executor">The executor.</param>
            <param name="fileSystem">The file system.</param>
            <param name="fileDirectoryDeleter">The file directory deleter.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Mercurial.Mercurial.GetModifications(ThoughtWorks.CruiseControl.Core.IIntegrationResult,ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Gets the modifications.
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <returns>List of modifications since the last run.</returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Mercurial.Mercurial.GetSource(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Gets the source.
            </summary>
            <param name="result">The result.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Mercurial.Mercurial.LabelSourceControl(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Labels the source control.
            </summary>
            <param name="result">The result.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Mercurial.Mercurial.HgCreateLocalRepository(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Creates and configures the local repository and initally pulls a set of changes to start with if a remote repository is configured.
            </summary>
            <param name="result">The integration result.</param>
            <returns>The repository status (newly created, already exists or unknown).</returns>
            <remarks>The file system and file directory creator are used to delete and create the directory holding the repository.</remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Mercurial.Mercurial.HgInit(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Initialize the working directory with the hg init command
            </summary>
            <param name="result">The integration result.</param>
            <returns>The process result.</returns>
            <remarks>Uses the file system to ensure the working directory exists before calling hg init.</remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Mercurial.Mercurial.HgConfigureRepository(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Creates a local hg configuration file (.hg/hgrc) and an output template (.hg/ccnet.template) in the repository
            </summary>
            <param name="result">The integration result.</param>
            <returns>The process result.</returns>
            <remarks>Uses the file system to ensure the working directory exists before calling hg init.</remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Mercurial.Mercurial.HgParents(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Gets list of parents for the current state of the working directory, which is usually the revision that has been updated to on the last run.
            </summary>
            <param name="result">The integration result.</param>
            <returns>The process result.</returns>
            <remarks>Uses the output template to render the process output as XML.</remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Mercurial.Mercurial.HgHeads(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Gets list of heads for the local repository, which is usually a list of revisions including the tip and branch head revisions.
            </summary>
            <param name="result">The integration result.</param>
            <returns>The process result.</returns>
            <remarks>Uses the output template to render the process output as XML.</remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Mercurial.Mercurial.HgTip(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Gets the branch head for the current branch or the tip if no branch is configured.
            </summary>
            <param name="result">The integration result.</param>
            <returns>The process result.</returns>
            <remarks>Uses the output template to render the process output as XML.</remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Mercurial.Mercurial.HgLog(ThoughtWorks.CruiseControl.Core.IIntegrationResult,System.Int32,System.Int32)">
            <summary>
            Get the list of changesets within a range of revisions (from, to).
            </summary>
            <param name="to">The integration result.</param>
            <param name="fromId">The start of the range of revisions</param>
            <param name="toId">The end of the range of revisions.</param>
            <returns>The process result.</returns>
            <remarks>Uses the output template to render the process output as XML.</remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Mercurial.Mercurial.HgPull(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Pulls the latest changesets from the remote repository into the local repository without updating the files in the working directory.
            </summary>
            <param name="result">The integration result.</param>
            <returns>The process result.</returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Mercurial.Mercurial.HgUpdate(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Updates the files in the working directory to a given revision, which is usually the tip or the branch head.
            </summary>
            <param name="result">The integration result.</param>
            <returns>The process result.</returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Mercurial.Mercurial.HgPurge(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Deletes all untracked and ignored files, but leaves modified files alone.
            </summary>
            <param name="result">The integration result.</param>
            <returns>The process result.</returns>
            <remarks>Uses the all flag (--all) to also delete ignored files (see .hgignore).</remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Mercurial.Mercurial.HgCommit(System.Boolean,System.String,ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Commits modifications that have been made during the integration and if configured also newly created files to the local repository.
            </summary>
            <param name="addRemove">Bool to indicate if the add-remove option should be used.</param>
            <param name="commitMessage">The commit message to be used.</param>
            <param name="result">The integration result.</param>
            <returns>The process result.</returns>
            <remarks>Optionally uses the add-remove flag (-A) to allow to commit untracked files and file deletions.</remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Mercurial.Mercurial.HgTag(System.String,System.String,ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Creates a named tag (label) for the currently used revision in the local repository.
            </summary>
            <param name="tagName">The name of the tag.</param>
            <param name="tagMessage">The log message to be used.</param>
            <param name="result">The integration result.</param>
            <returns>The process result.</returns>
            <remarks>Uses the force flag (-f) to even create the tag if a tag with the same name already exists.</remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Mercurial.Mercurial.HgPush(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Pushes the committed changesets and created tags to the configured remote repository.
            </summary>
            <param name="result">The integration result.</param>
            <returns>The process result.</returns>
            <remarks>Uses the force flag (-f) to push even if new remote heads are created.</remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Mercurial.Mercurial.HgRevert(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Recursively reverts modifications in tracked files without keeping backups.
            </summary>
            <param name="result">The integration result.</param>
            <returns>The process result.</returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Mercurial.Mercurial.GetTipId(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Gets the tip or branch head revision of the local repository.
            </summary>
            <param name="to">The integration result.</param>
            <returns>The tip or branch head revision.</returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Mercurial.Mercurial.GetSmallestParentId(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Gets the smallest parent revision of the files in the working directory.
            </summary>
            <param name="to">The integration result.</param>
            <returns>The smallest revision from the list of parents.</returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Mercurial.Mercurial.CheckMultipleHeads(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Throws an exception if the repository contains multiple head revisions.
            </summary>
            <param name="to">The integration result.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Mercurial.Mercurial.BaseWorkingDirectory(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Gets the parent directory of the current working directory.
            </summary>
            <param name="result">The integration result.</param>
            <returns>The parent directory.</returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Mercurial.Mercurial.NewProcessInfo(System.String,ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Creates a new ProcessInfo object with the given arguments, normal priority and exit code 0 for indicating success.
            </summary>
            <param name="args">The command line arguments.</param>
            <param name="result">The integration result.</param>
            <returns>The process information.</returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Mercurial.Mercurial.NewProcessInfo(System.String,ThoughtWorks.CruiseControl.Core.IIntegrationResult,System.Diagnostics.ProcessPriorityClass,System.Int32[])">
            <summary>
            Creates a new ProcessInfo object with the given arguments, given priority and given list of exit codes for indicating success.
            </summary>
            <param name="args">The command line arguments.</param>
            <param name="result">The integration result.</param>
            <param name="priority">The process priority class.</param>
            <param name="successExitCodes">The list of exit codes that indicate success.</param>
            <returns>The process information.</returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Mercurial.Mercurial.GetBuildProgressInformation(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Initializes the local reference to the integration results BuildProgressInformation and retzurns it.
            </summary>
            <param name="result">The integration result.</param>
            <returns>The build progress information.</returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Mercurial.Mercurial.ProcessExecutor_ProcessOutput(System.Object,ThoughtWorks.CruiseControl.Core.Util.ProcessOutputEventArgs)">
            <summary>
            Event Handler for the ProcessOutput event of the ProcessExecutor.
            </summary>
            <param name="sender">The event sender.</param>
            <param name="args">The event arguments.</param>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Mercurial.Mercurial.Executable">
            <summary>
            The location of the hg executable.
            </summary>
            <version>1.5</version>
            <default>hg</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Mercurial.Mercurial.Repository">
            <summary>
            The url for your repository (e.g., http://hgserver/myproject/).
            </summary>
            <version>1.5</version>
            <default>None</default>
            <remarks>This ReflectorProperty should really be named repository but is currently kept as repo for backwards compatibility</remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Mercurial.Mercurial.AutoGetSource">
            <summary>
            Whether to update the local working copy from the local repository for a particular build.
            </summary>
            <version>1.5</version>
            <default>true</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Mercurial.Mercurial.Branch">
            <summary>
            Repository branch.
            </summary>
            <version>1.5</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Mercurial.Mercurial.CommitterName">
            <summary>
            User name used for commits.
            </summary>
            <version>1.6</version>
            <default>CruiseControl.NET</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Mercurial.Mercurial.CommitModifications">
            <summary>
            Whether to commit build modifications.
            </summary>
            <version>1.6</version>
            <default>false</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Mercurial.Mercurial.CommitUntracked">
            <summary>
            Whether to commit untracked and removed files along with build modifications.
            </summary>
            <version>1.6</version>
            <default>false</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Mercurial.Mercurial.ModificationsCommitMessage">
            <summary>
            Log message used when committing build modifications.
            </summary>
            <version>1.6</version>
            <default>Modifications of CC.NET build \{0\}</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Mercurial.Mercurial.MultipleHeadsFail">
            <summary>
            Whether the source control operation should fail if multiple heads exist in the repository.
            </summary>
            <version>1.5</version>
            <default>false</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Mercurial.Mercurial.TagOnSuccess">
            <summary>
            Indicates that the repository should be tagged if the build succeeds.
            </summary>
            <version>1.5</version>
            <default>false</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Mercurial.Mercurial.TagNameFormat">
            <summary>
            String format for tags in your repository.
            </summary>
            <version>1.6</version>
            <default>ccnet_build_\{0\}</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Mercurial.Mercurial.TagCommitMessage">
            <summary>
            Log message format to be used for the tag commits.
            </summary>
            <version>1.5</version>
            <default>Tagging CC.NET build \{0\}</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Mercurial.Mercurial.PurgeModifications">
            <summary>
            Whether to purge untracked and ignored files before building.
            </summary>
            <version>1.6</version>
            <default>false</default>
            <remarks>The hg purge extension is activated and used for this feature.</remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Mercurial.Mercurial.PushModifications">
            <summary>
            Whether to push modifications to the remote repository.
            </summary>
            <version>1.6</version>
            <default>false</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Mercurial.Mercurial.RevertModifications">
            <summary>
            Whether to revert modifications in tracked files before building.
            </summary>
            <version>1.6</version>
            <default>false</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Mercurial.Mercurial.WorkingDirectory">
            <summary>
            The directory containing the locally checked out workspace.
            </summary>
            <version>1.5</version>
            <default>Project Working Directory</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Mercurial.Mercurial.UrlBuilder">
            <summary>
            Generates a web URL.
            </summary>
            <version>1.5</version>
            <default>None</default>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Mercurial.MercurialHistoryParser">
            <summary>
            Parses <see cref="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Mercurial.MercurialModification"/> objects from a <see cref="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Mercurial.Mercurial"/> change log.
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Mercurial.MercurialModification">
            <summary>
            Represents a modification object of the <see cref="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Mercurial.Mercurial"/> soiurce control.
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Mercurial.MultipleHeadsFoundException">
            <summary>
            Exception that indicates that a <see cref="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Mercurial.Mercurial"/> repository contains multiple heads.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Mercurial.MultipleHeadsFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Mercurial.MultipleHeadsFoundException"/> class.
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Mercurial.RepositoryStatus">
            <summary>
            Enumeration to indicate the status of the repository after HgCreateLocalRepository was called.
            </summary>
            <remarks>Unknown is not currently used.</remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Mks">
            <summary>
            MKS Source Integrity Source Control Block.
            </summary>
            <title>MKS Source Integrity Source Control Block</title>
            <version>1.0</version>
            <key name="type">
            <description>The type of source control block.</description>
            <value>mks</value>
            </key>
            <example>
            <code>
            &lt;sourceControl type="mks"&gt;
            &lt;executable&gt;C:\MKS\bin\si.exe&lt;/executable&gt;
            &lt;user&gt;CCNetUser&lt;/user&gt;
            &lt;password&gt;CCNetPassword&lt;/password&gt;
            &lt;hostname&gt;hostname&lt;/hostname&gt;
            &lt;port&gt;8722&lt;/port&gt;
            &lt;sandboxroot&gt;C:\MyProject&lt;/sandboxroot&gt;
            &lt;sandboxfile&gt;myproject.pj&lt;/sandboxfile&gt;
            &lt;autoGetSource&gt;true&lt;/autoGetSource&gt;
            &lt;timeout units="minutes"&gt;10&lt;/timeout&gt;
            &lt;/sourceControl&gt;
            </code>
            </example>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Mks.DefaultExecutable">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Mks.DefaultPort">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Mks.DefaultAutoGetSource">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Mks.DefaultAutoDisconnect">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Mks.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Mks"/> class.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Mks.#ctor(ThoughtWorks.CruiseControl.Core.Sourcecontrol.IHistoryParser,ThoughtWorks.CruiseControl.Core.Util.ProcessExecutor)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Mks"/> class.	
            </summary>
            <param name="parser">The parser.</param>
            <param name="executor">The executor.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Mks.GetModifications(ThoughtWorks.CruiseControl.Core.IIntegrationResult,ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Gets the modifications.	
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Mks.LabelSourceControl(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Labels the source control.	
            </summary>
            <param name="result">The result.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Mks.GetSource(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Gets the source.	
            </summary>
            <param name="result">The result.</param>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Mks.Executable">
            <summary>
            The local path for the MKS source integrity command-line client (eg. c:\Mks\bin\si.exe).
            </summary>
            <version>1.0</version>
            <default>si.exe</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Mks.User">
            <summary>
            MKS Source Integrity user ID that CCNet should use.
            </summary>
            <version>1.0</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Mks.Password">
            <summary>
            Password for the MKS Source Integrity user ID.
            </summary>
            <version>1.0</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Mks.CheckpointOnSuccess">
            <summary>
            Whether to set a checkpoint on success or not.
            </summary>
            <version>1.0</version>
            <default>false</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Mks.AutoGetSource">
            <summary>
            Instruct CCNet whether or not you want it to automatically retrieve the latest source from the repository.
            </summary>
            <version>1.0</version>
            <default>true</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Mks.AutoDisconnect">
            <summary>
            Whether or not CCNet should automatically disconnect after the sourcecontrol operation has finished.
            </summary>
            <version>1.0</version>
            <default>false</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Mks.Hostname">
            <summary>
            The IP address or machine name of the MKS Source Integrity server. 
            </summary>
            <version>1.0</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Mks.Port">
            <summary>
            The port on the MKS Source Integrity server to connect to. 
            </summary>
            <version>1.0</version>
            <default>8722</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Mks.SandboxRoot">
            <summary>
            The local path MKS Source Integrity sandbox root corresponds to.
            </summary>
            <version>1.0</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Mks.SandboxFile">
            <summary>
            The project file.
            </summary>
            <version>1.0</version>
            <default>n/a</default>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.MksHistoryParser">
            <summary>
            	
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.MksHistoryParser.Parse(System.IO.TextReader,System.DateTime,System.DateTime)">
            <summary>
            Parses the specified history.	
            </summary>
            <param name="history">The history.</param>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.MksHistoryParser.ParseMemberInfoAndAddToModification(ThoughtWorks.CruiseControl.Core.Modification,System.IO.StringReader)">
            <summary>
            Parses the member info and add to modification.	
            </summary>
            <param name="modification">The modification.</param>
            <param name="reader">The reader.</param>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Modification">
            <summary>
            Value object representing the data associated with a source control modification.
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Modification.Type">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Modification.FileName">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Modification.FolderName">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Modification.ModifiedTime">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Modification.UserName">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Modification.ChangeNumber">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Modification.Version">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Modification.Comment">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Modification.Url">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Modification.IssueUrl">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Modification.EmailAddress">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Modification.ToXml">
            <summary>
            Toes the XML.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Modification.ToXml(System.Xml.XmlWriter)">
            <summary>
            Toes the XML.	
            </summary>
            <param name="writer">The writer.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Modification.CompareTo(System.Object)">
            <summary>
            Compares to.	
            </summary>
            <param name="o">The o.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Modification.GetHashCode">
            <summary>
            Gets the hash code.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Modification.Equals(System.Object)">
            <summary>
            Equalses the specified obj.	
            </summary>
            <param name="obj">The obj.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Modification.ToString">
            <summary>
            Toes the string.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Modification.GetLastChangeNumber(ThoughtWorks.CruiseControl.Core.Modification[])">
            <summary>
            Retrieves the change number of the last modification.
            </summary>
            <param name="modifications">The modifications to check.</param>
            <returns>The last change number if there are any changes, null otherwise.</returns>
            <remarks>
            Since ChangeNumbers are no longer numbers, this will return null if there are no 
            modifications.
            </remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.MultiIssueTrackerUrlBuilder">
            <summary>
            This issue tracker allows a combination of the other issuetrackers.
            </summary>
            <title>Multi Issue Tracker URL Builder</title>
            <version>1.0</version>
            <example>
            <code>
            &lt;issueUrlBuilder type="multiIssueTracker"&gt;
            &lt;issueTrackers&gt;
            &lt;defaultIssueTracker&gt;
            &lt;url&gt;http://jira.public.thoughtworks.org/browse/CCNET-{0}&lt;/url&gt;
            &lt;/defaultIssueTracker&gt;
            &lt;regexIssueTracker&gt;
            &lt;find&gt;^.*(CCNET-\d*).*$&lt;/find&gt;
            &lt;replace&gt;http://jira.public.thoughtworks.org/browse/$1&lt;/replace&gt;
            &lt;/regexIssueTracker&gt;
            &lt;/issueTrackers&gt;
            &lt;/issueUrlBuilder&gt;
            </code>
            </example>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.MultiIssueTrackerUrlBuilder.SetupModification(ThoughtWorks.CruiseControl.Core.Modification[])">
            <summary>
            Setups the modification.	
            </summary>
            <param name="modifications">The modifications.</param>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.MultiIssueTrackerUrlBuilder.IssueTrackers">
            <summary>
            The issue trackers to combine.
            </summary>
            <version>1.0</version>
            <default>n/a</default>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.MultiSourceControl">
            <summary>
            You can use the 'Multi' Source Control plugin to check for modifications from any number of source control repositories. You may want
            to do this if (for example) you want to build if the source for your project changes, or if the binaries your project depends on change
            (which may be stored on a file server).
            </summary>
            <title>Multi Source Control Block</title>
            <version>1.0</version>
            <key name="type">
            <description>The type of source control block.</description>
            <value>multi</value>
            </key>
            <example>
            <code>
            &lt;sourcecontrol type="multi"&gt;
            &lt;sourceControls&gt;
            &lt;filesystem&gt;
            &lt;!-- Check for changes in the latest 1.2 version of the server... --&gt;
            &lt;repositoryRoot&gt;\\DistributionFileServer\Server\1.2.latest&lt;/repositoryRoot&gt;
            &lt;/filesystem&gt;
            &lt;cvs&gt;
            &lt;!-- ...or in the source of the client project --&gt;
            &lt;executable&gt;c:\tools\cvs-exe\cvswithplinkrsh.bat&lt;/executable&gt;
            &lt;workingDirectory&gt;c:\localcvs\myproject\client&lt;/workingDirectory&gt;
            &lt;/cvs&gt;
            &lt;/sourceControls&gt;
            &lt;/sourcecontrol&gt;
            </code>
            </example>
            <remarks>
            <para>
            Note that, due to the way the configuration gets parsed, if you are using a "multi" block, then the items within the 
            &lt;sourceControls&gt; element should not be &lt;sourcecontrol&gt; elements (as you may expect). Instead, the name of the element 
            should be the same as you would put in the "type" attribute when using a &lt;sourcecontrol&gt; element.
            </para>
            <para>
            For example, normally you would point to a cvs repository like this:
            </para>
            <code>
            &lt;sourcecontrol type="cvs"&gt;
            &lt;executable&gt;c:\tools\cvs-exe\cvswithplinkrsh.bat&lt;/executable&gt;
            &lt;workingDirectory&gt;c:\localcvs\myproject\client&lt;/workingDirectory&gt;
            &lt;/sourcecontrol&gt;
            </code>
            <para>
            But inside a &lt;sourcecontrol type="multi"&lt; element, this becomes:
            </para>
            <code>
            &lt;sourcecontrol type="multi"&gt;
            &lt;sourceControls&gt;
            &lt;cvs&gt;
            &lt;executable&gt;c:\tools\cvs-exe\cvswithplinkrsh.bat&lt;/executable&gt;
            &lt;workingDirectory&gt;c:\localcvs\myproject\client&lt;/workingDirectory&gt;
            &lt;/cvs&gt;
            &lt;/sourceControls&gt;
            &lt;/sourcecontrol&gt;
            </code>
            </remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.MultiSourceControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.MultiSourceControl"/> class.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.MultiSourceControl.GetModifications(ThoughtWorks.CruiseControl.Core.IIntegrationResult,ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Gets the modifications.	
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.MultiSourceControl.LabelSourceControl(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Labels the source control.	
            </summary>
            <param name="result">The result.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.MultiSourceControl.GetSource(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Gets the source.	
            </summary>
            <param name="result">The result.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.MultiSourceControl.Initialize(ThoughtWorks.CruiseControl.Core.IProject)">
            <summary>
            Initializes the specified project.	
            </summary>
            <param name="project">The project.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.MultiSourceControl.Purge(ThoughtWorks.CruiseControl.Core.IProject)">
            <summary>
            Purges the specified project.	
            </summary>
            <param name="project">The project.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.MultiSourceControl.ApplyParameters(System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.IEnumerable{ThoughtWorks.CruiseControl.Remote.Parameters.ParameterBase})">
            <summary>
            Applies the input parameters to the task.
            </summary>
            <param name="parameters">The parameters to apply.</param>
            <param name="parameterDefinitions">The original parameter definitions.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.MultiSourceControl.PreprocessParameters(Exortech.NetReflector.NetReflectorTypeTable,System.Xml.XmlNode)">
            <summary>
            Preprocesses a node prior to loading it via NetReflector.
            </summary>
            <param name="typeTable">The type table.</param>
            <param name="inputNode">The input node.</param>
            <returns></returns>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.MultiSourceControl.RequireChangesFromAll">
            <summary>
            If true, only return a list of modifications if all sourceControl sections return a non-empty list. Note that this is
            short-circuiting, i.e. if the first sourceControl returns an empty list, the next won't be called (this can be useful for
            situations where you have a slow source control server and you want to check a specific file first as a trigger).
            </summary>
            <version>1.0</version>
            <default>false</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.MultiSourceControl.SourceControls">
            <summary>
            The list of other Source Control Blocks to include.
            </summary>
            <version>1.0</version>
            <default>n/a</default>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.NullSourceControl">
            <summary>
            Use the Null Source Control if you don't want to check a Source Control repository for changes. In this instance you would always want
            to either use a 'Force Build' Trigger or always manually start builds, from the <link>Web Dashboard</link> or <link>CCTray</link>.
            </summary>
            <title>Null Source Control Block</title>
            <version>1.0</version>
            <remarks>
            Strictly speaking, this element isn't required. The build server will behave the same way if there are no Source Control Blocks. Still,
            it's useful to include this in configuration files to make it clear.
            </remarks>
            <example>
            <code>
            &lt;sourcecontrol type="nullSourceControl" /&gt;
            </code>
            </example>
            <key name="type">
            <description>The type of source control block.</description>
            <value>nullSourceControl</value>
            </key>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.NullSourceControl.GetModifications(ThoughtWorks.CruiseControl.Core.IIntegrationResult,ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Gets the modifications from the source control provider
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.NullSourceControl.LabelSourceControl(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Labels the source control.	
            </summary>
            <param name="result">The result.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.NullSourceControl.GetSource(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Gets the source.	
            </summary>
            <param name="result">The result.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.NullSourceControl.Initialize(ThoughtWorks.CruiseControl.Core.IProject)">
            <summary>
            Initializes the specified project.	
            </summary>
            <param name="project">The project.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.NullSourceControl.Purge(ThoughtWorks.CruiseControl.Core.IProject)">
            <summary>
            Purges the specified project.	
            </summary>
            <param name="project">The project.</param>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.NullSourceControl.FailGetModifications">
            <summary>
            Defines wheter or not to fail the checking for modifications.
            </summary>
            <version>1.5</version>
            <default>false</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.NullSourceControl.FailLabelSourceControl">
            <summary>
            Defines wheter or not to fail the labeling.
            </summary>
            <version>1.5</version>
            <default>false</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.NullSourceControl.FailGetSource">
            <summary>
            Defines wheter or not to fail the getting of the source.
            </summary>
            <version>1.5</version>
            <default>false</default>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.NullUrlBuilder">
            <summary>
            	
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.NullUrlBuilder.SetupModification(ThoughtWorks.CruiseControl.Core.Modification[])">
            <summary>
            Setups the modification.	
            </summary>
            <param name="modifications">The modifications.</param>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.PathFilter">
            <summary>
            The PathFilter can be used to filter modifications on the basis of their file path.
            </summary>
            <title>PathFilter</title>
            <version>1.0</version>
            <example>
            <code>
            &lt;pathFilter&gt;
            &lt;pattern&gt;$/Kunigunda/ServiceLocator/Sources/Kunigunda.ServiceLocator/AssemblyInfo.cs&lt;/pattern&gt;
            &lt;/pathFilter&gt;
            </code>
            </example>
            <remarks>
            <includePage> PathFilter Wildcards</includePage>
            </remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.PathFilter.Accept(ThoughtWorks.CruiseControl.Core.Modification)">
            <summary>
            Accepts the specified modification.	
            </summary>
            <param name="modification">The modification.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.PathFilter.ToString">
            <summary>
            Toes the string.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.PathFilter.Pattern">
            <summary>
            This is the pattern used to compare the modification path against. The pattern should match the path of the files in the
            repository (not the path of the files in the working directory). See below for examples of the syntax for this element. Each
            PathFilter contains a single pattern element.
            </summary>
            <version>1.0</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.PathFilter.CaseSensitive">
            <summary>
            Sets casesensitive searching on or off. 
            </summary>
            <version>1.0</version>
            <default>true</default>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Perforce.IP4Initializer">
            <summary>
            	
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Perforce.IP4Initializer.Initialize(ThoughtWorks.CruiseControl.Core.Sourcecontrol.Perforce.P4,System.String,System.String)">
            <summary>
            Initializes the specified p4.	
            </summary>
            <param name="p4">The p4.</param>
            <param name="projectName">Name of the project.</param>
            <param name="workingDirectory">The working directory.</param>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Perforce.IP4ProcessInfoCreator">
            <summary>
            	
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Perforce.IP4ProcessInfoCreator.CreateProcessInfo(ThoughtWorks.CruiseControl.Core.Sourcecontrol.Perforce.P4,System.String)">
            <summary>
            Creates the process info.	
            </summary>
            <param name="p4">The p4.</param>
            <param name="extraArguments">The extra arguments.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Perforce.IP4Purger">
            <summary>
            	
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Perforce.IP4Purger.Purge(ThoughtWorks.CruiseControl.Core.Sourcecontrol.Perforce.P4,System.String)">
            <summary>
            Purges the specified p4.	
            </summary>
            <param name="p4">The p4.</param>
            <param name="workingDirectory">The working directory.</param>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Perforce.P4">
            <summary>
            Perforce source control block.
            </summary>
            <title>Perforce Source Control Block</title>
            <version>1.0</version>
            <key name="type">
            <description>The type of source control block.</description>
            <value>p4</value>
            </key>
            <example>
            <code title="Minimalist example">
            &lt;sourcecontrol type="p4"&gt;
            &lt;view&gt;//projects/myproject/...&lt;/view&gt;
            &lt;/sourcecontrol&gt;
            </code>
            <code title="Full example">
            &lt;sourcecontrol type="p4"&gt;
            &lt;view&gt;//projects/ccnet/...,//tools/nant/...&lt;/view&gt;
            &lt;executable&gt;c:\perforce\p4.exe&lt;/executable&gt;
            &lt;client&gt;ccnet-buildhost&lt;/client&gt;
            &lt;user&gt;public&lt;/user&gt;
            &lt;password&gt;mypassword&lt;/password&gt;
            &lt;port&gt;perforce01.thoughtworks.net:1666&lt;/port&gt;
            &lt;timeZoneOffset&gt;-5&lt;/timeZoneOffset&gt;
            &lt;applyLabel&gt;true&lt;/applyLabel&gt;
            &lt;autoGetSource&gt;true&lt;/autoGetSource&gt;
            &lt;forceSync&gt;true&lt;/forceSync&gt;
            &lt;p4WebURLFormat&gt;http://perforceWebServer:8080/@md=d&amp;amp;cd=//&amp;amp;c=3IB@/{0}?ac=10&lt;/p4WebURLFormat&gt;
            &lt;timeout units="minutes"&gt;10&lt;/timeout&gt;
            &lt;/sourcecontrol&gt;
            </code>
            </example>
            <remarks>
            <heading>Client / User / Password / Port usage</heading>
            <para>
            You may specify any of the Perforce client, user, password and port (ie 'host:port' in Perforce standards) settings to use. If you
            don't specify them, then Cruise Control .NET will use the defaults in your registry (use 'p4 set' to view and edit these.)
            </para>
            <para>
            Note that the client specification is only used for syncing and applying labels, it is not used when checking for changes. This is
            significant since it means that the view in the specified client does not effect the plugin's behaviour when checking for changes.
            </para>
            <heading>Perforce Issues</heading>
            <para>
            Perforce cannot apply purely numeric labels, which is what CCNet uses by default. Therefore, if you have 'applyLabel' set to true, you
            must also setup a custom Labeller in your project, e.g. by using the <link>Default Labeller</link>.
            </para>
            </remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Perforce.P4.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Perforce.P4"/> class.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Perforce.P4.#ctor(ThoughtWorks.CruiseControl.Core.Util.ProcessExecutor,ThoughtWorks.CruiseControl.Core.Sourcecontrol.Perforce.IP4Initializer,ThoughtWorks.CruiseControl.Core.Sourcecontrol.Perforce.IP4Purger,ThoughtWorks.CruiseControl.Core.Sourcecontrol.Perforce.IP4ProcessInfoCreator)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Perforce.P4"/> class.	
            </summary>
            <param name="processExecutor">The process executor.</param>
            <param name="initializer">The initializer.</param>
            <param name="p4Purger">The p4 purger.</param>
            <param name="processInfoCreator">The process info creator.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Perforce.P4.InitialiseDefaults">
            <summary>
            Initialises the defaults.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Perforce.P4.CreateChangeListProcess(System.DateTime,System.DateTime)">
            <summary>
            Creates the change list process.	
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Perforce.P4.CreateDescribeProcess(System.String)">
            <summary>
            Creates the describe process.	
            </summary>
            <param name="changes">The changes.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Perforce.P4.GetModifications(ThoughtWorks.CruiseControl.Core.IIntegrationResult,ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Gets the modifications.	
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Perforce.P4.LabelSourceControl(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Labelling in Perforce requires 2 activities. First you create a 'label specification' which is the name of the label, and what
            part of the source repository it is associated with. Secondly you actually populate the label with files and associated
            revisions by performing a 'label sync'. We take the versioned file set as being the versions that are currently 
            checked out on the client (In theory this could be refined by using the timeStamp, but it would be better
            to wait until CCNet has proper support for atomic-commit change groups, and use that instead)
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Perforce.P4.GetSource(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Gets the source.	
            </summary>
            <param name="result">The result.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Perforce.P4.Execute(ThoughtWorks.CruiseControl.Core.Util.ProcessInfo,System.String)">
            <summary>
            Executes the specified process.	
            </summary>
            <param name="process">The process.</param>
            <param name="description">The description.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Perforce.P4.Initialize(ThoughtWorks.CruiseControl.Core.IProject)">
            <summary>
            Initializes the specified project.	
            </summary>
            <param name="project">The project.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Perforce.P4.Purge(ThoughtWorks.CruiseControl.Core.IProject)">
            <summary>
            Purges the specified project.	
            </summary>
            <param name="project">The project.</param>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Perforce.P4.Executable">
            <summary>
            The location of the Perforce command line client executable.
            </summary>
            <version>1.0</version>
            <default>p4</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Perforce.P4.View">
            <summary>
            The perforce 'view' to check for changes. For 'multi-line' views, use a comma-separated list. 'Exclusionary' view lines starting
            with - cannot be used. Use a <link>Filtered Source Control Block</link> to achieve this behaviour. Note that this view is not used
            for syncing (see below.) 
            </summary>
            <version>1.0</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Perforce.P4.Client">
            <summary>
            The perforce 'client' to use.
            </summary>
            <version>1.0</version>
            <default>Performance environment setting</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Perforce.P4.User">
            <summary>
            The perforce user to use.
            </summary>
            <version>1.0</version>
            <default>Performance environment setting</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Perforce.P4.Password">
            <summary>
            The perforce password to use.
            </summary>
            <version>1.0</version>
            <default>Performance environment setting</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Perforce.P4.Port">
            <summary>
            The perforce hostname and port to use.
            </summary>
            <version>1.0</version>
            <default>Performance environment setting</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Perforce.P4.WorkingDirectory">
            <summary>
            The working directory to use.
            </summary>
            <version>1.0</version>
            <default>Project Working Directory</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Perforce.P4.ApplyLabel">
            <summary>
            Whether to apply a label on a successful build.
            </summary>
            <version>1.0</version>
            <default>false</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Perforce.P4.AutoGetSource">
            <summary>
            Whether to automatically 'sync' the latest changes from source control before performing the build. The sync target is the entire
            view exposed by the specified client - the view has no effect on sycning. 
            </summary>
            <version>1.0</version>
            <default>true</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Perforce.P4.ForceSync">
            <summary>
            If autoGetSource is set to true, then whether to use the -f option to sync. See
            http://www.perforce.com/perforce/doc.042/manuals/cmdref/sync.html for more details.
            </summary>
            <version>1.0</version>
            <default>false</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Perforce.P4.P4WebURLFormat">
            <summary>
            Creates a link to the P4Web change list page for each detected modification. The specified value is transformed using String.Format
            where the first argument will be the substituted change list number.
            </summary>
            <version>1.0</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Perforce.P4.TimeZoneOffset">
            <summary>
            How many hours ahead your Perforce Server is from your build server. E.g. if your build server is in London, and your Perforce
            server is in New York, this value would be '-5'.
            </summary>
            <version>1.0</version>
            <default>0</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Perforce.P4.ErrorPattern">
            <summary>
            The error pattern to use.
            </summary>
            <version>1.0</version>
            <default>^error: .*</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Perforce.P4.UseExitCode">
            <summary>
            Whether to use exit codes.
            </summary>
            <version>1.0</version>
            <default>false</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Perforce.P4.AcceptableErrors">
            <summary>
            The acceptable errors.
            </summary>
            <version>1.0</version>
            <default>file\(s\) up-to-date\.</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Perforce.P4.ViewForSpecifications">
            <summary>
            Gets the view for specifications.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Perforce.P4.ViewForDisplay">
            <summary>
            Gets the view for display.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Perforce.P4.IssueUrlBuilder">
            <summary>
            Converts the comment (or parts from it) into an url pointing to the issue for this build. 
            </summary>
            <version>1.0</version>
            <default>None</default>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Perforce.P4ConfigProcessInfoCreator">
            <summary>
            	
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Perforce.P4ConfigProcessInfoCreator.CreateProcessInfo(ThoughtWorks.CruiseControl.Core.Sourcecontrol.Perforce.P4,System.String)">
            <summary>
            Creates the process info.	
            </summary>
            <param name="p4">The p4.</param>
            <param name="extraArguments">The extra arguments.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Perforce.P4HistoryParser">
            <summary>
            	
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Perforce.P4HistoryParser.ParseChanges(System.String)">
            <summary>
            Used to extract changelist numbers from p4.exe output of format
            <code>info: Change 123 456 789</code>
            </summary>
            <param name="changes"></param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Perforce.P4HistoryParser.Parse(System.IO.TextReader,System.DateTime,System.DateTime)">
            <summary>
            Parses output from p4.exe obtained using arguments <code>p4 -s describe -s 123</code>
            where 123 (etc...) are changelist numbers.  This output looks like this:
            <p>
            <code>
            text: Change 123 by user@hostname on 2002/08/21 14:39:52
            text:
            text:   The checkin comment
            text:
            text: Affected files ...
            text:
            info1: //view/path/filename.java#1 add
            text:
            exit: 0
            </code>
            </p>
            the type appears at the end of the info1 line, and may be add, edit, delete etc...
            Two regex strings are used to match the first line, and the 'info1:' line.
            NOTE there's a tab character before comment text.
            </summary>
            <param name="reader"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Perforce.ProcessP4Initializer">
            <summary>
            Sets up a Perforce environment by creating a client spec. Uses the P4 command line client to do this.
            We require a client name to do this, so if the user hasn't specified one then we create an appropriate
            one (see tests)
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Perforce.ProcessP4Initializer.ClientPrefix">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Perforce.ProcessP4Initializer.#ctor(ThoughtWorks.CruiseControl.Core.Util.ProcessExecutor,ThoughtWorks.CruiseControl.Core.Sourcecontrol.Perforce.IP4ProcessInfoCreator)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Perforce.ProcessP4Initializer"/> class.	
            </summary>
            <param name="executor">The executor.</param>
            <param name="processInfoCreator">The process info creator.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Perforce.ProcessP4Initializer.Initialize(ThoughtWorks.CruiseControl.Core.Sourcecontrol.Perforce.P4,System.String,System.String)">
            <summary>
            Initializes the specified p4.	
            </summary>
            <param name="p4">The p4.</param>
            <param name="project">The project.</param>
            <param name="workingDirectory">The working directory.</param>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Perforce.ProcessP4Purger">
            <summary>
            	
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Perforce.ProcessP4Purger.#ctor(ThoughtWorks.CruiseControl.Core.Util.ProcessExecutor,ThoughtWorks.CruiseControl.Core.Sourcecontrol.Perforce.IP4ProcessInfoCreator)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Perforce.ProcessP4Purger"/> class.	
            </summary>
            <param name="executor">The executor.</param>
            <param name="infoCreator">The info creator.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Perforce.ProcessP4Purger.Purge(ThoughtWorks.CruiseControl.Core.Sourcecontrol.Perforce.P4,System.String)">
            <summary>
            Purges the specified p4.	
            </summary>
            <param name="p4">The p4.</param>
            <param name="workingDirectory">The working directory.</param>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.PlasticSCM">
            <summary>
            This supports Códice Software's Plastic SCM source control system.
            </summary>
            <title>PlasticSCM Source Control Block</title>
            <version>1.3</version>
            <key name="type">
            <description>The type of source control block.</description>
            <value>plasticscm</value>
            </key>
            <example>
            <code title="Basic Example">
            &lt;sourcecontrol type="plasticscm"&gt;
            &lt;workingDirectory&gt;c:\workspace&lt;/workingDirectory&gt;
            &lt;branch&gt;br:/main&lt;/branch&gt;
            &lt;/sourcecontrol&gt;
            </code>
            <code title="Full Example">
            &lt;sourcecontrol type="plasticscm"&gt;
            &lt;executable&gt;c:\Program Files\PlasticSCM\client\cm.exe&lt;/executable&gt;
            &lt;workingDirectory&gt;c:\workspace&lt;/workingDirectory&gt;
            &lt;branch&gt;br:/main&lt;/branch&gt;
            &lt;repository&gt;mainrep&lt;/repository&gt;
            &lt;forced&gt;true&lt;/forced&gt;
            &lt;labelOnSuccess&gt;true&lt;/labelOnSuccess&gt;
            &lt;labelPrefix&gt;BL&lt;/labelPrefix&gt;
            &lt;timeout units="minutes"&gt;10&lt;/timeout&gt;
            &lt;/sourcecontrol&gt;
            </code>
            </example>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.PlasticSCM.DefaultPlasticExecutable">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.PlasticSCM.DELIMITER">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.PlasticSCM.DATEFORMAT">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.PlasticSCM.FORMAT">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.PlasticSCM.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.PlasticSCM"/> class.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.PlasticSCM.#ctor(ThoughtWorks.CruiseControl.Core.Sourcecontrol.IHistoryParser,ThoughtWorks.CruiseControl.Core.Util.ProcessExecutor)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.PlasticSCM"/> class.	
            </summary>
            <param name="parser">The parser.</param>
            <param name="executor">The executor.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.PlasticSCM.GetModifications(ThoughtWorks.CruiseControl.Core.IIntegrationResult,ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Gets the modifications.	
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.PlasticSCM.LabelSourceControl(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Labels the source control.	
            </summary>
            <param name="result">The result.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.PlasticSCM.GetSource(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Gets the source.	
            </summary>
            <param name="result">The result.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.PlasticSCM.NewGetSourceProcessInfo(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            News the get source process info.	
            </summary>
            <param name="result">The result.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.PlasticSCM.GoToBranchProcessInfo(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Goes to branch process info.	
            </summary>
            <param name="result">The result.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.PlasticSCM.CreateQueryProcessInfo(ThoughtWorks.CruiseControl.Core.IIntegrationResult,ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Creates the query process info.	
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.PlasticSCM.CreateLabelProcessInfo(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Creates the label process info.	
            </summary>
            <param name="result">The result.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.PlasticSCM.LabelProcessInfo(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Labels the process info.	
            </summary>
            <param name="result">The result.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.PlasticSCM.AutoGetSource">
            <summary>
            Should we automatically obtain updated source from PlasticSCM or not? 
            </summary>
            <version>1.3</version>
            <default>true</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.PlasticSCM.Executable">
            <summary>
            Name of the PlasticSCM executable.  
            </summary>
            <version>1.3</version>
            <default>cm</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.PlasticSCM.Branch">
            <summary>
            The Plastic SCM branch to monitor. 
            </summary>
            <version>1.3</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.PlasticSCM.Repository">
            <summary>
            The Plastic SCM repository to monitor. 
            </summary>
            <version>1.3</version>
            <default>Current in workspace</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.PlasticSCM.WorkingDirectory">
            <summary>
            Valid Plastic SCM workspace path. 
            </summary>
            <version>1.3</version>
            <default>Project Working Directory</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.PlasticSCM.LabelOnSuccess">
            <summary>
            Specifies whether or not CCNet should create an Plastic SCM baseline when the build is successful. 
            </summary>
            <version>1.3</version>
            <default>false</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.PlasticSCM.LabelPrefix">
            <summary>
            Specifies the prefix label name. 
            </summary>
            <version>1.3</version>
            <default>ccver-</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.PlasticSCM.Forced">
            <summary>
            Do the update with the "--forced" option.
            </summary>
            <version>1.3</version>
            <default>false</default>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.PlasticSCMHistoryParser">
            <summary>
            	
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.PlasticSCMHistoryParser.Parse(System.IO.TextReader,System.DateTime,System.DateTime)">
            <summary>
            Parses the specified input.	
            </summary>
            <param name="input">The input.</param>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Pvcs">
            <summary>
            CruiseControl.NET supports integrating with the PVCS Source Control system via the pcli client.
            </summary>
            <title>PVCS Source Control Block</title>
            <version>1.0</version>
            <key name="type">
            <description>The type of source control block.</description>
            <value>pvcs</value>
            </key>
            <example>
            <code>
            &lt;sourcecontrol type="pvcs"&gt;
            &lt;executable&gt;c:\pvcs\pvcs.exe&lt;/executable&gt;
            &lt;project&gt;ccnet&lt;/project&gt;
            &lt;subproject&gt;ccnet1.0&lt;/subproject&gt;
            &lt;/sourcecontrol&gt;
            </code>
            </example>
            <remarks>
            <para>
            Contributed by James Bolles.
            </para>
            </remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Pvcs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Pvcs"/> class.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Pvcs.#ctor(ThoughtWorks.CruiseControl.Core.Sourcecontrol.IHistoryParser,ThoughtWorks.CruiseControl.Core.Util.ProcessExecutor)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Pvcs"/> class.	
            </summary>
            <param name="parser">The parser.</param>
            <param name="executor">The executor.</param>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Pvcs.IsPromotionGroup">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Pvcs.LabelOrPromotionInput(System.String)">
            <summary>
            Labels the or promotion input.	
            </summary>
            <param name="label">The label.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Pvcs.GetModifications(ThoughtWorks.CruiseControl.Core.IIntegrationResult,ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Gets the modifications.	
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Pvcs.GetLogin(System.Boolean)">
            <summary>
            Generate a userid-login option if needed.
            </summary>
            <param name="doubleQuotes">If true, wrap the entire option in double-quotes ('"').</param>
            <returns>The option, possibly <see cref="F:System.String.Empty"/>.</returns>
            <remarks>
            PVCS allows users to have no password, so we have three different choices (five if you count
            the double quotes):
            <list type="ul">
            <item>(nothing)</item>
            <item> -id"username" </item>
            <item> -id"username":"password" </item>
            <item> "-id"username"" </item>
            <item> "-id"username":"password"" </item>
            </list>
            </remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Pvcs.CreatePcliContentsForGet">
            <summary>
            Creates the pcli contents for get.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Pvcs.CreatePcliContentsForCreatingVLog(System.String,System.String)">
            <summary>
            Creates the pcli contents for creating V log.	
            </summary>
            <param name="beforedate">The beforedate.</param>
            <param name="afterdate">The afterdate.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Pvcs.CreatePcliContentsForCreatingVlogByLabel(System.String)">
            <summary>
            Creates the pcli contents for creating vlog by label.	
            </summary>
            <param name="label">The label.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Pvcs.CreatePcliContentsForDeletingLabel(System.String)">
            <summary>
            Creates the pcli contents for deleting label.	
            </summary>
            <param name="label">The label.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Pvcs.CreatePcliContentsForLabeling(System.String)">
            <summary>
            Creates the pcli contents for labeling.	
            </summary>
            <param name="label">The label.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Pvcs.CreateIndividualLabelString(ThoughtWorks.CruiseControl.Core.Modification,System.String)">
            <summary>
            Creates the individual label string.	
            </summary>
            <param name="mod">The mod.</param>
            <param name="label">The label.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Pvcs.CreateIndividualGetString(ThoughtWorks.CruiseControl.Core.Modification,System.String)">
            <summary>
            Creates the individual get string.	
            </summary>
            <param name="mod">The mod.</param>
            <param name="fileLocation">The file location.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Pvcs.AdjustForDayLightSavingsBug(System.DateTime)">
            <summary>
            Adjusts for day light savings bug.	
            </summary>
            <param name="date">The date.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Pvcs.GetSource(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Gets the source.	
            </summary>
            <param name="result">The result.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Pvcs.GetExeFilename">
            <summary>
            Gets the exe filename.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Pvcs.LabelSourceControl(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Labels the source control.	
            </summary>
            <param name="result">The result.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Pvcs.GetDateString(System.DateTime)">
            <summary>
            Gets the date string.	
            </summary>
            <param name="dateToConvert">The date to convert.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Pvcs.GetDateString(System.DateTime,System.Globalization.DateTimeFormatInfo)">
            <summary>
            Gets the date string.	
            </summary>
            <param name="dateToConvert">The date to convert.</param>
            <param name="format">The format.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Pvcs.GetDate(System.String)">
            <summary>
            Gets the date.	
            </summary>
            <param name="dateToParse">The date to parse.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Pvcs.GetDate(System.String,System.IFormatProvider)">
            <summary>
            Gets the date.	
            </summary>
            <param name="dateToParse">The date to parse.</param>
            <param name="format">The format.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Pvcs.Executable">
            <summary>
            The PVCS client executable.
            </summary>
            <version>1.0</version>
            <default>pcli.exe</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Pvcs.Project">
            <summary>
            The location of the PVCS project database.
            </summary>
            <version>1.0</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Pvcs.Subproject">
            <summary>
            One ore more projects in PVCS that you wish to monitor. As long as each subproject is separated with a space
            and a "/", you can monitor more than one subproject at a time.
            </summary>
            <version>1.0</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Pvcs.Username">
            <summary>
            Username for the user account to use to connect to PVCS.
            </summary>
            <version>1.0</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Pvcs.Password">
            <summary>
            Password for the PVCS user account.
            </summary>
            <version>1.0</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Pvcs.WorkingDirectory">
            <summary>
            The local directory containing the source from the repository. 
            </summary>
            <version>1.0</version>
            <default>Project Working Directory</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Pvcs.Workspace">
            <summary>
            The workspace to use.
            </summary>
            <version>1.0</version>
            <default>/@/RootWorkspace</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Pvcs.Recursive">
            <summary>
            Whether to monitor all subfolders of the specified subproject.
            </summary>
            <version>1.0</version>
            <default>true</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Pvcs.LabelOnSuccess">
            <summary>
            Whether or not to apply a label to the repository after each successful build. 
            </summary>
            <version>1.0</version>
            <default>false</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Pvcs.AutoGetSource">
            <summary>
            Specifies whether the CCNet should take responsibility for retrieving the current version of the source from
            the repository.
            </summary>
            <version>1.0</version>
            <default>true</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Pvcs.ManuallyAdjustForDaylightSavings">
            <summary>
            In PVCS 7.5.1, the client does not automatically adjust dates to accommodate daylight savings time. Setting
            this flag to true will make CCNet compensate for it.
            </summary>
            <version>1.2.2</version>
            <default>false</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Pvcs.LabelOrPromotionName">
            <summary>
            The label to use as your code-base. If this is specified, this label will be called to get all code
            associated with it when a get is done. When the build is successful, the good code will have this base label
            associated with it in turn promoting it into the label. Label to apply to repository. If a value is
            specified, labelOnSuccess will automatically be set to true. 
            </summary>
            <version>1.0</version>
            <default>none</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Pvcs.CurrentTimeZone">
            <summary>
            Sets the current time zone.	
            </summary>
            <value>The current time zone.</value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Pvcs.ErrorFile">
            <summary>
            Gets the error file.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Pvcs.LogFile">
            <summary>
            Gets the log file.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Pvcs.TempFile">
            <summary>
            Gets the temp file.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.PvcsHistoryParser">
            <summary>
            	
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.PvcsHistoryParser.Parse(System.IO.TextReader,System.DateTime,System.DateTime)">
            <summary>
            Parses the specified reader.	
            </summary>
            <param name="reader">The reader.</param>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.PvcsHistoryParser.AnalyzeModifications(System.Collections.IList)">
            <summary>
            Build the Modification list of what files will be built 
            with this Release
            </summary>
            <param name="mods"></param>
            <returns></returns>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.QuietPeriod">
            <summary>
            	
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.QuietPeriod.#ctor(ThoughtWorks.CruiseControl.Core.Util.DateTimeProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.QuietPeriod"/> class.	
            </summary>
            <param name="dtProvider">The dt provider.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.QuietPeriod.GetModifications(ThoughtWorks.CruiseControl.Core.ISourceControl,ThoughtWorks.CruiseControl.Core.IIntegrationResult,ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Gets the modifications.	
            </summary>
            <param name="sourceControl">The source control.</param>
            <param name="lastBuild">The last build.</param>
            <param name="thisBuild">The this build.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.QuietPeriod.ModificationDelaySeconds">
            <summary>
            Gets or sets the modification delay seconds.	
            </summary>
            <value>The modification delay seconds.</value>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.DefaultIssueTrackerUrlBuilder">
            <summary>
            It contains the url of the involved project, with the issue number as a parameter.
            </summary>
            <title>Default Issue Tracker URL Builder</title>
            <version>1.0</version>
            <example>
            <code>
            &lt;issueUrlBuilder type="defaultIssueTracker"&gt;
            &lt;url&gt;http://jira.public.thoughtworks.org/browse/CCNET-{0}&lt;/url&gt;
            &lt;/issueUrlBuilder&gt;
            </code>
            </example>
            <remarks>
            <para>
            Whenever a checkin is done, the following logic is applied :
            </para>
            <list type="1">
            <item>Split the comment into a string array; separator is space</item>
            <item>From the first part, take all the numeric parts, starting from the end of this part</item>
            <item>Paste this number into the parameter</item>
            </list>
            <para>
            For example, with this configuration:
            </para>
            <code>
            &lt;issueUrlBuilder type="defaultIssueTracker"&gt;
            &lt;url&gt;http://jira.public.thoughtworks.org/browse/CCNET-{0}&lt;/url&gt;
            &lt;/issueUrlBuilder&gt;
            </code>
            <para>
            The following comments would be converted into the URL http://jira.public.thoughtworks.org/browse/CCNET-1223:
            </para>
            <list type="1">
            <item>CCNET-1223: CCnet should foresee a way to transform the comments into hyperlinks for integration with issue tracking systems</item>
            <item>CCNET-1223 CCnet should foresee a way to transform the comments into hyperlinks for integration with issue tracking systems</item>
            <item>CCNET-1223</item>
            <item>1223</item>
            </list>
            </remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.DefaultIssueTrackerUrlBuilder.SetupModification(ThoughtWorks.CruiseControl.Core.Modification[])">
            <summary>
            Setups the modification.	
            </summary>
            <param name="modifications">The modifications.</param>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.DefaultIssueTrackerUrlBuilder.Url">
            <summary>
            The base URL to use.
            </summary>
            <version>1.0</version>
            <default>n/a</default>
            <remarks>
            The issue number is held in \{0\}.
            </remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.RegExIssueTrackerUrlBuilder">
            <summary>
            This will use regular expressions to convert the comment into an url.
            </summary>
            <title>Regex Issue Tracker URL Builder</title>
            <version>1.0</version>
            <example>
            <code>
            &lt;issueUrlBuilder type="regexIssueTracker"&gt;
            &lt;find&gt;^.*(CCNET.?\d*).*$&lt;/find&gt;
            &lt;replace&gt;http://jira.public.thoughtworks.org/browse/$1&lt;/replace&gt;
            &lt;/issueUrlBuilder&gt;  
            </code>
            </example>
            <remarks>
            <heading>Find Statement</heading>
            <para>For people not familier with Regex, here are some examples:</para>
            <list type="1">
            <item>Assert position at the beginning of a line (at beginning of the string or after a line break character): «<b>^</b>»</item>
            <item>Match any single character that is not a line break character: «<b>.</b>»</item>
            <item>Between zero and unlimited times, as many times as possible, giving back as needed (greedy): «<b>*</b>»</item>
            <item>Match the regular expression below and capture its match into backreference number 1: «<b>(CCNET.?\d)</b>»</item>
            <item>Match the characters "CCNET" literally: «<b>CCNET</b>»</item>
            <item>Between zero and one times, as many times as possible, giving back as needed (greedy): «<b>?</b>»</item>
            <item>Match a single digit (i.e. 0..9): «<b>\d</b>»</item>
            <item>Assert position at the end of a line (at the end of the string or before a line break character): «<b>$</b>»</item>
            <item>Check without case sensitivity: «<b>(?i)</b>»</item>
            </list>
            <heading>Replace Statement</heading>
            <para>
            To reference a backreference use «<b>$1</b>».
            </para>
            </remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.RegExIssueTrackerUrlBuilder.SetupModification(ThoughtWorks.CruiseControl.Core.Modification[])">
            <summary>
            Setups the modification.	
            </summary>
            <param name="modifications">The modifications.</param>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.RegExIssueTrackerUrlBuilder.Find">
            <summary>
            The string to find.
            </summary>
            <version>1.0</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.RegExIssueTrackerUrlBuilder.Replace">
            <summary>
            The replacement string.
            </summary>
            <version>1.0</version>
            <default>n/a</default>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.RobocopyHistoryParser">
            <summary>
            	
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.RobocopyHistoryParser.Parse(System.IO.TextReader,System.DateTime,System.DateTime)">
            <summary>
            Parses the specified reader.	
            </summary>
            <param name="reader">The reader.</param>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.RobocopySourceControl">
            <summary>
            <para>
            Uses RoboCopy as Source Control.
            </para>
            </summary>	
            <title>RoboCopy Source Control Block</title>
            <version>1.4.4</version>
            <key name="type">
            <description>The type of source control block.</description>
            <value>robocopy</value>
            </key>
            <example>
            <code>
            &lt;sourcecontrol type="repositoryRoot"&gt;
            &lt;repositoryRoot&gt;C:\Somewhere&lt;/repositoryRoot&gt;
            &lt;/sourcecontrol&gt;
            </code>
            </example>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.RobocopySourceControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.RobocopySourceControl"/> class.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.RobocopySourceControl.#ctor(ThoughtWorks.CruiseControl.Core.Sourcecontrol.IHistoryParser,ThoughtWorks.CruiseControl.Core.Util.ProcessExecutor)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.RobocopySourceControl"/> class.	
            </summary>
            <param name="parser">The parser.</param>
            <param name="executor">The executor.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.RobocopySourceControl.GetModifications(ThoughtWorks.CruiseControl.Core.IIntegrationResult,ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Gets the modifications.	
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.RobocopySourceControl.LabelSourceControl(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Labels the source control.	
            </summary>
            <param name="result">The result.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.RobocopySourceControl.GetSource(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Gets the source.	
            </summary>
            <param name="result">The result.</param>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.RobocopySourceControl.Executable">
            <summary>
            The executable location.
            </summary>
            <version>1.4.4</version>
            <default>C:\\Windows\\System32\\robocopy.exe</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.RobocopySourceControl.RepositoryRoot">
            <summary>
            The repository root.
            </summary>
            <version>1.4.4</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.RobocopySourceControl.AutoGetSource">
            <summary>
            Whether to automatically get the source.
            </summary>
            <version>1.4.4</version>
            <default>false</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.RobocopySourceControl.WorkingDirectory">
            <summary>
            The working directory to use.
            </summary>
            <version>1.4.4</version>
            <default>Project Working Directory</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.RobocopySourceControl.AdditionalArguments">
            <summary>
            Any additional arguments.
            </summary>
            <version>1.4.4</version>
            <default>None</default>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.StarTeam">
            <summary>
            <para>
            Source Controller for StarTeam SCM.
            </para>
            </summary>	
            <title>StarTeam Source Control Block</title>
            <version>1.0</version>
            <key name="type">
            <description>The type of source control block.</description>
            <value>starteam</value>
            </key>
            <example>
            <code>
            &lt;sourcecontrol type="starteam"&gt;
            &lt;executable&gt;c:\starteam\stcmd.exe&lt;/executable&gt;
            &lt;project&gt;ccnet&lt;/project&gt;
            &lt;username&gt;buildguy&lt;/username&gt;
            &lt;password&gt;buildguypw&lt;/password&gt;
            &lt;host&gt;thebuildmachine&lt;/host&gt;
            &lt;port&gt;49201&lt;/port&gt;
            &lt;path&gt;release2.0&lt;/path&gt;
            &lt;autoGetSource&gt;true&lt;/autoGetSource&gt;
            &lt;folderRegEx&gt;customRegEx&lt;/folderRegEx&gt;
            &lt;fileRegEx&gt;customRegEx&lt;/fileRegEx&gt;
            &lt;fileHistoryRegEx&gt;customRegEx&lt;/fileHistoryRegEx&gt;
            &lt;timeout units="minutes"&gt;10&lt;/timeout&gt;
            &lt;/sourcecontrol&gt;
            </code>
            </example>
            <remarks>
            <heading>RegEx Configuration</heading>
            <para>
            CruiseControl.NET uses StarTeam's command line interface to find changes submitted to Source Control. 3 regular
            expressions are used in doing this, as specified above. You have the option of changing these regular
            expressions to choose how your instance of CruiseControl.NET parses StarTeam output. It is recommended if you do
            this that you download the source version of CruiseControl.NET to see the default RegEx's and how they are used.
            </para>
            <para>
            One suggested alternative RegEx so far is for the fileHistoryRegEx, as follows:
            </para>
            <code type="None">
            ^Revision: (?&lt;file_revision&gt;\S+) View: (?&lt;view_name&gt;.+) Branch Revision: (?&lt;branch_revision&gt;\S+).\nAuthor: (?&lt;author_name&gt;.*) Date: (?&lt;date_string&gt;.*) \w+\r\n(?&lt;change_comment&gt;.*)
            </code>
            <para>
            (Note that this is all one line)
            </para>
            </remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.StarTeam.Culture">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.StarTeam.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.StarTeam"/> class.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.StarTeam.CreateHistoryProcessInfo(System.DateTime,System.DateTime)">
            <summary>
            Creates the history process info.	
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.StarTeam.GetModifications(ThoughtWorks.CruiseControl.Core.IIntegrationResult,ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Gets the modifications.	
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.StarTeam.LabelSourceControl(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Labels the source control.	
            </summary>
            <param name="result">The result.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.StarTeam.GetSource(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Gets the source.	
            </summary>
            <param name="result">The result.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.StarTeam.FormatCommandDate(System.DateTime)">
            <summary>
            Formats the command date.	
            </summary>
            <param name="date">The date.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.StarTeam.GetSourceProcessArgs">
            <summary>
            Gets the source process args.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.StarTeam.Executable">
            <summary>
            The local path for the StarTeam command-line client (eg. c:\starteam\stcmd.exe).
            </summary>
            <version>1.0</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.StarTeam.Project">
            <summary>
            The StarTeam project (and view) to monitor (eg. project/view).
            </summary>
            <version>1.0</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.StarTeam.Username">
            <summary>
            StarTeam ID that CCNet should use.
            </summary>
            <version>1.0</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.StarTeam.Password">
            <summary>
            Password for the StarTeam user ID.
            </summary>
            <version>1.0</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.StarTeam.Host">
            <summary>
            The IP address or machine name of the StarTeam server. 
            </summary>
            <version>1.0</version>
            <default>127.0.0.1</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.StarTeam.Port">
            <summary>
            The port on the StarTeam server to connect to.
            </summary>
            <version>1.0</version>
            <default>49201</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.StarTeam.Path">
            <summary>
            The path to monitor.
            </summary>
            <version>1.0</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.StarTeam.AutoGetSource">
            <summary>
            Instruct CCNet whether or not you want it to automatically retrieve the latest source from the repository.
            </summary>
            <version>1.0</version>
            <default>true</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.StarTeam.OverrideViewWorkingDir">
            <summary>
            Instruct CCNet whether or not you want it to automatically retrieve the latest source from the repository.
            </summary>
            <version>1.0</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.StarTeam.OverrideFolderWorkingDir">
            <summary>
            If set, use the -rp option to use a different View Working Directory.
            </summary>
            <version>1.0</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.StarTeam.FolderRegEx">
            <summary>
            Allows you to use your own RegEx to parse StarTeam's folder output.
            </summary>
            <version>1.0</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.StarTeam.FileRegEx">
            <summary>
            Allows you to use your own RegEx to parse StarTeam's file output.
            </summary>
            <version>1.0</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.StarTeam.FileHistoryRegEx">
            <summary>
            Allows you to use your own RegEx to parse StarTeam's file history.
            </summary>
            <version>1.0</version>
            <default>n/a</default>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.StarTeamHistoryParser">
            <summary>
            Implementation of IHistoryParser to handle StarTeam output that
            describes modifications within the version control system.
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.StarTeamHistoryParser.Culture">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.StarTeamHistoryParser.#ctor(ThoughtWorks.CruiseControl.Core.Sourcecontrol.IStarTeamRegExProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.StarTeamHistoryParser"/> class.	
            </summary>
            <param name="starTeamRegExProvider">The star team reg ex provider.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.StarTeamHistoryParser.Parse(System.IO.TextReader,System.DateTime,System.DateTime)">
            <summary>
            Method implementaion for IHistoryParser
            </summary>
            <param name="starTeamLog"></param>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Surround">
            <summary>
            <para>
            Source Controller for Seapine Surround SCM
            </para>
            <para type="info">
            The Seapine Surround provider is designed to work with Surround 4.1. It may not work with earlier versions of
            Surround.
            </para>
            </summary>	
            <title>Seapine Surround Source Control Block</title>
            <version>1.0</version>
            <key name="type">
            <description>The type of source control block.</description>
            <value>pvcs</value>
            </key>
            <example>
            <code>
            &lt;sourcecontrol type="surround"&gt;
            &lt;executable&gt;C:\Program Files\Seapine\Surround SCM\sscm.exe&lt;/executable&gt;
            &lt;serverconnect&gt;127.0.0.1:4900&lt;/serverconnect&gt;
            &lt;serverlogin&gt;build:buildpw&lt;/serverlogin&gt;
            &lt;branch&gt;mybranch&lt;/branch&gt;
            &lt;repository&gt;myrepository/myproject&lt;/repository&gt;
            &lt;workingDirectory&gt;C:\myproject&lt;/workingDirectory&gt;
            &lt;recursive&gt;1&lt;/recursive&gt;
            &lt;file&gt;*.cpp&lt;/file&gt;
            &lt;searchregexp&gt;0&lt;/searchregexp&gt;
            &lt;timeout units="minutes"&gt;10&lt;/timeout&gt;
            &lt;/sourcecontrol&gt;
            </code>
            </example>
            <remarks>
            <para>
            Contributed by Yan Shapochnik and Pete Vasiliauskas at Seapine Software.
            </para>
            </remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Surround.TO_SSCM_DATE_FORMAT">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Surround.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Surround"/> class.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Surround.GetModifications(ThoughtWorks.CruiseControl.Core.IIntegrationResult,ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Gets the modifications.	
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Surround.LabelSourceControl(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Labels the source control.	
            </summary>
            <param name="result">The result.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Surround.Initialize(ThoughtWorks.CruiseControl.Core.IProject)">
            <summary>
            Initializes the specified project.	
            </summary>
            <param name="project">The project.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Surround.GetSource(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Gets the source.	
            </summary>
            <param name="result">The result.</param>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Surround.Executable">
            <summary>
            The local path for the Surround SCM command-line client 
            (eg. C:\Program Files\Seapine\Surround SCM\sscm.exe).
            </summary>
            <version>1.0</version>
            <default>sscm</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Surround.Branch">
            <summary>
            The Surround SCM branch to monitor. 
            </summary>
            <version>1.0</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Surround.Repository">
            <summary>
            The Surround SCM repository to monitor. 
            </summary>
            <version>1.0</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Surround.File">
            <summary>
            A filename pattern to match to monitor and retrieve files.
            </summary>
            <version>1.0</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Surround.WorkingDirectory">
            <summary>
            The local path to get files from Surround SCM to. 
            </summary>
            <version>1.0</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Surround.ServerConnect">
            <summary>
            The IP address or machine name and port number of the Surround SCM server. 
            </summary>
            <version>1.0</version>
            <default>127.0.0.1:4900</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Surround.ServerLogin">
            <summary>
            Surround SCM login:password that CCNet should use. 
            </summary>
            <version>1.0</version>
            <default>Administrator</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Surround.SearchRegExp">
            <summary>
            Treat the filename pattern as a regular expression. (Value 1 = true, 0 = false) 
            </summary>
            <version>1.0</version>
            <default>0</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Surround.Recursive">
            <summary>
            Monitor and retrieve all files in child repositories of the specified repository. (Value 1 = true, 
            0 = false).
            </summary>
            <version>1.0</version>
            <default>0</default>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.SurroundHistoryParser">
             <summary>
             Implementation of IHistoryParser to handle Surround SCM output that describes modifications within the version control system.
             Format of output is:
             total-#
             {History Line}
            
             where
             {History Line} has the following format:
             &lt;repository&gt;&lt;filename&gt;&lt;rev&gt;&lt;action&gt;&lt;timestamp&gt;&lt;comment&gt;&lt;username&gt;&lt;user email&gt;
             </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.SurroundHistoryParser.TO_SSCM_DATE_FORMAT">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.SurroundHistoryParser.Parse(System.IO.TextReader,System.DateTime,System.DateTime)">
            <summary>
            Parses the specified SSCM log.	
            </summary>
            <param name="sscmLog">The SSCM log.</param>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Svn">
            <summary>
            CruiseControl.NET provides basic support for Subversion repositories. Checking for changes, checking out or updating sources, and 
            tagging-by-copying are supported, but more advanced features such as using Subversion revision numbers are not yet supported.
            Subversion support is under active development and will improve over time.
            </summary>
            <title>Subversion Source Control Block</title>
            <version>1.0</version>
            <key name="type">
            <description>The type of source control block.</description>
            <value>svn</value>
            </key>
            <example>
            <code>
            &lt;sourcecontrol type="svn"&gt;
            &lt;trunkUrl&gt;svn://svn.mycompany.com/myfirstproject/trunk&lt;/trunkUrl&gt;
            &lt;workingDirectory&gt;c:\dev\ccnet&lt;/workingDirectory&gt;
            &lt;/sourcecontrol&gt;
            </code>
            </example>
            <remarks>
            <para>
            The &lt;trunkUrl&gt; tag should specify the URL to use to determine if changes have occurred in your repository.
            </para>
            <para>
            You need to make sure your SVN client settings are such that all authentication is automated. Typically you can do this by using 
            anonymous access or appropriate SSH setups if using SVN over SSH.
            </para>
            <heading>Linking modifications to WebSVN</heading>
            <para>
            You can link the modifications detected by CruiseControl.NET to the appropriate WebSVN page by adding the following additional
            configuration information to the Subversion source control section:
            </para>
            <code>
            &lt;webUrlBuilder type="websvn"&gt;
            &lt;url&gt;http://localhost:7899/websvn/diff.php?repname=MiniACE&amp;amp;path={0}&amp;amp;rev={1}&amp;amp;sc=1&lt;/url&gt;
            &lt;/webUrlBuilder&gt;
            </code>
            <para>
            Change the &lt;url&gt; element to point to the root url for the WebSVN site. The path and rev parameters will be filled in by
            CruiseControl.NET when it generates the link to the code file page.
            </para>
            <para>
            The standard url for WebSVN 1.38 contains rep=3 r instead of repname=MiniACE. Adding a new repository to the SvnParentPath will change
            the number of the rep parameter, so you may need to make the following change to diff.php to decode the repname parameter:
            </para>
            <code type="java">
            $repname = @$_REQUEST["repname"];
            
            if (isset($repname))
            {
            $rep = $config->findRepository($repname);
            }
            </code>
            <para>
            The WebSVN WebUrlBuilder can also be used to connect to a ViewCV site. Here is an example used by CCNet to link to the file revision
            pages on SourceForge:
            </para>
            <code>
            &lt;webUrlBuilder type="websvn"&gt;
            &lt;url&gt;http://svn.sourceforge.net/viewvc/ccnet/{0}?view=markup&amp;amp;pathrev={1}&lt;/url&gt;
            &lt;/webUrlBuilder&gt;
            </code>
            <heading>SVN over SSL</heading>
            <para>
            When connecting to a Subversion repository via SSL (https), you may be required to accept an issued server certificate. This generally
            requires responding to a command-line prompt that the certificate should be accepted permanently. For CruiseControl.NET, all Subversion
            commands are executed using the --non-interactive switch, which will cause this prompt to be skipped and the subsequent Subversion
            command to fail with a message like this:
            </para>
            <code type="none">
            svn: PROPFIND request failed on '/svnroot/ccnet'
            svn: PROPFIND of '/svnroot/ccnet': Server certificate verification failed: issuer is not trusted (https://ccnet.svn.sourceforge.net)
            </code>
            <para>
            As the failure will happen on the first Subversion command to be executed, this failure will not show up as a broken build, but will
            instead show up in the server log.
            </para>
            <para>
            One way to resolve this problem is to execute a command against the Subversion repository from the command-line logged in as the user
            that you are using to run CCNet (certificates are cached by user account, so you must accept the certificate for the appropriate user).
            For example, try executing the following command (where trunk_url is the svn url for your repository):
            </para>
            <code type="none">
            svn list [trunk_url]
            </code>
            <para>
            When prompted to accept the certificate, type 'P' to permanently accept it.
            </para>
            <para>
            If you are running CCService under the LocalSystem account, you will need to accept the certificate for this user. Check out the
            CCService page for information about how to diagnose problems as the LocalSystem account.
            </para>
            <para>
            External contributors: Matt Petteys
            </para>
            <heading>SVN over svn+ssh</heading>
            <para>
            To connect to Subversion with the svn+ssh protocol, here is an excerpt from the article HowTo: Configure SVN+SSH with Subclipse on
            Windows by Martin Woodward. For more details, see the complete article (http://www.woodwardweb.com/archive/200511.html).
            </para>
            <para>
            <b>HowTo: Configure SVN+SSH with Subclipse on Windows</b>
            </para>
            <para>
            You need to create an environment variable called "SVN_SSH" that points to an executable file that accepts the same command line
            arguments as ssh on unix. I did this by doing the following:-
            </para>
            <para>
            1: Set up ssh keys. Not going to cover that here as you can easily Google for that. You need to end up with your public key on the SVN
            server and your private key loaded into Paegent locally.
            </para>
            <para>
            2: Download and installed the excellent TortoiseSVN client for Windows.
            </para>
            <para>
            3: Set the following environment variable (by right-clicking on My Computer, Properties, Advanced, Environment Variables, New):- 
            </para>
            <code type="none">
            Variable name: SVN_SSH
            Variable value: C:\\Program Files\\TortoiseSVN\\bin\\TortoisePlink.exe
            </code>
            <para type="info">
            The "\ \"(double-back-slash) is very important, otherwise it won't work. Equally, you cannot use the plink.exe that comes with putty as
            that fires up a command shell window which is really annoying. The TortoisePlink.exe is a windows implementation of plink that doesn't
            bring up any UI.
            </para>
            <heading>Known Issues</heading>
            <b>CruiseControl.NET doesn't see my changes</b>
            <para>
            The Subversion interface depends on the clocks of the CruiseControl.Net and Subversion servers being set within a small difference. Due
            to a long-standing Subversion bug (Bugzilla #1642) that appears unlikely to ever be fixed, CruiseControl.Net must filter the list of
            modifications returned by Subversion, looking for only those that fall within a specific time range. When the clocks of the two servers
            are significantly different, the filter may ignore modifications that should not be ignored. To prevent this problem, keep the clocks 
            of the two servers set as closely together as possible.
            </para>
            <heading>Dashboard Localization (issues with SVN)</heading>
            <para>
            I've found that svn has a trouble with --xml parameter. My russian Log Messages were not readable.
            </para>
            <para>
            I found a quick solution for it, next items could be customized to any languges. But be sure this is not the panacea. So in all .xsl
            files where comments or filename in Russian local I've added following "translation"
            </para>
            <code>
            &lt;xsl:value-of select="translate(comment,'??????????????????????????????????????????????????????????????????',
            '????????????????????????????????????????????????????????????????')"/&gt;
            </code>
            <para>
            Where comment from /cruisecontrol/modifications/modification, and "??" in second parameter are symbols to delete, all others are mathed
            with third parameters. As I found xsl could only translate char strings , if some one know the way to translate double-char symbols,
            please note about it. In this way you can help your self for modification for any charset.
            </para>
            <para>
            I agree with everyone that it is a rude solution. But for my no time to wait untill svn or cc.net will be customized for that feature.
            </para>
            </remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Svn.DefaultExecutable">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Svn.UtcXmlDateFormat">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Svn.#ctor(ThoughtWorks.CruiseControl.Core.Util.ProcessExecutor,ThoughtWorks.CruiseControl.Core.Sourcecontrol.IHistoryParser,ThoughtWorks.CruiseControl.Core.Util.IFileSystem)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Svn"/> class.	
            </summary>
            <param name="executor">The executor.</param>
            <param name="parser">The parser.</param>
            <param name="fileSystem">The file system.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Svn.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Svn"/> class.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Svn.mods">
            <summary>
            Modifications discovered by this instance of the source control interface.
            This is needed for the Multi Source Control block. (See CCNET-639/CCNET-1307)
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Svn.FormatCommandDate(System.DateTime)">
            <summary>
            Formats the command date.	
            </summary>
            <param name="date">The date.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Svn.ListObstructions(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Lists any obstructed files or folders.
            </summary>
            <param name="result">The current result.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Svn.DeleteObstructionsFromWorking(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Deletes any obstructions from the working directory.
            </summary>
            <param name="result">The current result.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Svn.GetModifications(ThoughtWorks.CruiseControl.Core.IIntegrationResult,ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Gets the modifications.	
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Svn.LabelSourceControl(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Labels the source control.	
            </summary>
            <param name="result">The result.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Svn.GetSource(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Gets the source.	
            </summary>
            <param name="result">The result.</param>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Svn.UrlBuilder">
            <summary>
            The root url for the WebSVN site.
            </summary>
            <version>1.0</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Svn.Executable">
            <summary>
            The location of the svn executable.
            </summary>
            <version>1.0</version>
            <default>svn</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Svn.TrunkUrl">
            <summary>
            The url for your repository (e.g., svn://svnserver/).
            </summary>
            <version>1.0</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Svn.WorkingDirectory">
            <summary>
            The directory containing the locally checked out workspace. 
            </summary>
            <version>1.0</version>
            <default>Project Working Directory</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Svn.TagOnSuccess">
            <summary>
            Indicates that the repository should be tagged if the build succeeds. 
            </summary>
            <version>1.0</version>
            <default>false</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Svn.TagWorkingCopy">
            <summary>
            Indicates that the Working Copy should always be used when Cruise Control creates a tag.
            </summary>
            <version>1.6</version>
            <default>false</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Svn.DeleteObstructions">
            <summary>
            Should any detected obstructions be deleted prior to getting modifications?
            </summary>
            <version>1.5</version>
            <default>false</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Svn.TagBaseUrl">
            <summary>
            The base url for tags in your repository. 
            </summary>
            <version>1.0</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Svn.Username">
            <summary>
            The username to use for authentication when connecting to the repository. 
            </summary>
            <version>1.0</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Svn.Password">
            <summary>
            The password to use for authentication when connecting to the repository. 
            </summary>
            <version>1.0</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Svn.AutoGetSource">
            <summary>
            Whether to retrieve the updates from Subversion for a particular build. 
            </summary>
            <version>1.0</version>
            <default>true</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Svn.CheckExternals">
            <summary>
            Whether to check the paths specified in the svn:externals property for modifications. 
            </summary>
            <version>1.0</version>
            <default>false</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Svn.CheckExternalsRecursive">
            <summary>
            Whether to check for modifications of svn:externals recursively. 
            </summary>
            <version>1.0</version>
            <default>true</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Svn.CleanCopy">
            <summary>
            Whether to delete the working copy before updating the source. 
            </summary>
            <version>1.0</version>
            <default>false</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Svn.Revert">
            <summary>
            Reverts any local changes to a file or directory and resolves any conflicted states. svn revert will not only revert the contents
            of an item in your working copy, but also any property changes. Finally, you can use it to undo any scheduling operations that you
            may have done (e.g. files scheduled for addition or deletion can be "unscheduled").
            </summary>
            <version>1.4.3</version>
            <default>false</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Svn.CleanUp">
            <summary>
            Recursively clean up the working copy, removing locks resuming unfinished operations. If you ever get a "working copy locked"
            error, run this command to remove stale locks and get your working copy into a usable state again.
            </summary>
            <version>1.4.3</version>
            <default>false</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Svn.UseRevsionNumbers">
            <summary>
            Whether to use revision numbers for fetching the modifications.
            </summary>
            <version>1.4.4</version>
            <default>false</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Svn.AuthCaching">
            <summary>
            Defines the auth caching mode to use.
            </summary>
            <version>1.5</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Svn.ForceUpdate">
            <summary>
            Forces updating, overwriting modified files. See CCNET-1351.
            This passes --force to svn.exe.
            </summary>
            <version>1.5</version>
            <default>false</default>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Svn.AuthCachingMode">
            <summary>
            Defies the type of auth caching to use.
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Svn.AuthCachingMode.None">
            <summary>
            No auth caching.
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Svn.AuthCachingMode.ExternalsOnly">
            <summary>
            Use auth caching for externals.
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Svn.AuthCachingMode.Always">
            <summary>
            use auth caching
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.SvnHistoryParser">
            <summary>
            Parser for output from the Subversion "svn log --xml" command.  See the schema
            from the Subversion source repository
            at http://svn.collab.net/viewvc/svn/trunk/subversion/svn/schema/log.rnc
            for the exact details of the input format.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.SvnHistoryParser.Parse(System.IO.TextReader,System.DateTime,System.DateTime)">
            <summary>
            Parse the output from a Subversion "svn log --xml" command into a set of <see cref="T:ThoughtWorks.CruiseControl.Core.Modification"/>s.
            </summary>
            <param name="svnLog">The output of the "svn log --xml" command.</param>
            <param name="from">The starting timestamp.</param>
            <param name="to">The ending timestamp.</param>
            <returns>A list of modifications between the two timestamps, possibly empty.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.SvnHistoryParser.ReadSvnLogIntoXmlNode(System.IO.TextReader)">
            <summary>
            Read the output from a Subversion "svn log --xml" command into an XML document.
            </summary>
            <param name="svnLog">The output of the "svn log --xml" command.</param>
            <returns>The root node of the XML document.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.SvnHistoryParser.ParseModificationsFromLogEntry(System.Xml.XmlNode,System.DateTime,System.DateTime)">
            <summary>
            Parse a single &lt;logentry&gt; element from the output of a Subversion "svn log --xml"
            command into a set of <see cref="T:ThoughtWorks.CruiseControl.Core.Modification"/>s.
            </summary>
            <param name="logEntry">The &lt;logentry&gt; element of the "svn log --xml" command.</param>
            <param name="from">The starting timestamp.</param>
            <param name="to">The ending timestamp.</param>
            <returns>A list of modifications between the two timestamps, possibly empty.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.SvnHistoryParser.ModificationType(System.Xml.XmlNode)">
            <summary>
            Convert a Subversion "svn log --xml" action attribute value to a modification type name.
            </summary>
            <param name="path">The &lt;path&gt; element containing the attribute.</param>
            <returns>The modification type name.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.SvnHistoryParser.ParseMessage(System.Xml.XmlNode)">
            <summary>
            Parse the check-in message (&lt;msg&gt;) element from a Subversion "svn log --xml" &lt;logentry&gt; element.
            </summary>
            <param name="logEntry">The log entry.</param>
            <returns>The message if found, or "" if not.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.SvnHistoryParser.ParseAuthor(System.Xml.XmlNode)">
            <summary>
            Parse the check-in userid (&lt;author&gt;) element from a Subversion "svn log --xml" &lt;logentry&gt; element.
            </summary>
            <param name="logEntry">The log entry.</param>
            <returns>The userid if found, or "" if not.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.SvnHistoryParser.ParseDate(System.Xml.XmlNode)">
            <summary>
            Parse the timestamp (&lt;date&gt;) element from a Subversion "svn log --xml" &lt;logentry&gt; element.
            </summary>
            <param name="logEntry">The log entry.</param>
            <returns>The timestamp if found, or DateTime.MinValue if not.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.SvnHistoryParser.ParseChangeNumber(System.Xml.XmlNode)">
            <summary>
            Parse the revision number (revision) attribute from a Subversion "svn log --xml" &lt;logentry&gt; element.
            </summary>
            <param name="logEntry"></param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.SvnHistoryParser.GetFolderFromPath(System.String)">
            <summary>
            Extract the folder name from a file path name in a Subversion "svn log --xml" &lt;path&gt; element.
            </summary>
            <param name="fullFileName">The path name.</param>
            <returns>The folder name.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.SvnHistoryParser.GetFileFromPath(System.String)">
            <summary>
            Extract the file name from a file path name in a Subversion "svn log --xml" &lt;path&gt; element.
            </summary>
            <param name="fullFileName">The path name.</param>
            <returns>The file name.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.SvnHistoryParser.GetAttributeFromNode(System.Xml.XmlNode,System.String)">
            <summary>
            Get an attribute from an XML element.
            </summary>
            <param name="node">The element.</param>
            <param name="attributeName">The name of the attribute.</param>
            <returns>The attribute's value.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.SvnHistoryParser.ParseDate(System.String)">
            <summary>
            Parse the timestamp (&lt;date&gt;) value from a Subversion "svn log --xml" &lt;logentry&gt;.
            </summary>
            <param name="date">The timestamp value as a string.</param>
            <returns>The timestamp value as a <see cref="T:System.DateTime"/>.</returns>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.SvnHistoryParser.IntegrationStatusUnknown">
            <summary>
            Gets or sets the integration status unknown.	
            </summary>
            <value>The integration status unknown.</value>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.ChangeSynergyUrlBuilder">
            <summary>
            A URL builder to link each modification to the ChangeSynergy task details form.
            </summary>
            <title>Synergy Issue Tracker URL Builder</title>
            <version>1.0</version>
            <example>
            <code>
            &lt;changeSynergy&gt;
            &lt;role&gt;User&lt;/role&gt;
            &lt;url&gt;http://myserver:8060&lt;/url&gt;
            &lt;username&gt;%CS_USER%&lt;/username&gt;
            &lt;password&gt;%CS_PWD%&lt;/password&gt;
            &lt;/changeSynergy&gt;
            </code>
            </example>
            <remarks>
            <para>
            If you specify values for the optional properties Username> and Password, make sure that the user has read-only permissions within your ChangeSynergy lifecycle
            definition.  This is necessary, since the Uri for  each modification will allow anonymous access to ChangeSynergy, possibily exposing vulnerabilities for
            spoofing, tampering, repudiation, information disclosure, and/or escalation of priveledge.
            </para>
            <para>
            That is, a STRIDE classification of "STRDE", with a possible DREAD rating as high as 10 if permissions are inappropriatedly assigned to the anonymous account.
            </para>
            <para>
            If you do not specify a Username and Password, the end-user will be prompted to ChangeSynergy to login.  However, the login screen will not correctly populate the
            database and role select inputs.  This is due to a documented bug in ChangeSynergy 4.3 SP4.  The bug case tracking number is 2067637; the change request is
            R21683.
            </para>
            </remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.ChangeSynergyUrlBuilder.SetCredentials(ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyConnectionInfo)">
            <summary>
                Copies the database path from the CM Synergy session for use with the
                ChangeSynergy URLs.
            </summary>
            <param name="connection">
                The CM Synergy database to use as for the ChangeSynergy logon information.
            </param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.ChangeSynergyUrlBuilder.SetupModification(ThoughtWorks.CruiseControl.Core.Modification[])">
            <summary>
                Returns a formatted URL to access the TaskDetails form for the task
                associated with the modification in ChangeSynergy.
            </summary>
            <param name="modifications">The array of modified files for this integration.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.ChangeSynergyUrlBuilder.ObfuscatePassword(System.Int32,System.String)">
            <overloads>
                <summary>
                    Obfuscates the password as used by the ChangeSynergy servlets
                </summary>
                <remarks>
                    This implementation is a reverse engineering product of the ChangeSynergy
                    Javascript functions <c>encodePassword</c> and <c>getSeed</c>.
                    <para />
                    It is clearly from an *undocumented* Telelogic API.
                    The source for this API is easily available in clear text
                    to anyone with a web browser and access to ChangeSynergy.
                </remarks>
                <param name="password">The plaintext password to obfuscate.</param>
                <returns>
                    An obfuscated string containing the original <paramref name="password" />.
                </returns>
            </overloads>
            <param name="seed">
                An integer between 0 and 1000, inclusive.
                This can be passed externally for the purpose of unit testing.
            </param>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.ChangeSynergyUrlBuilder.Database">
            <summary>
            Network path to the Synergy database instance
            </summary>
            <version>1.0</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.ChangeSynergyUrlBuilder.Username">
            <summary>
            The username to use for ChangeSynergy access.
            Can include environmental variables to be replaced.
            </summary>
            <remarks>
            The ChangeSynergy username should be different from the one specified for the CM Synergy server.  Ideally, you should specify a user with read-only
            permissions for ChangeSynergy.  This will prevent someone from modifying objects through ChangeSynergy.  If you specify an impersonation account with write
            permissions, a malicious user could bypass auditing in ChangeSynergy.
            </remarks>
            <value>
                Defaults to <see langword="null" />, which implies that the end-user will
                be prompted for thier ChangeSynergy logon credentials.
            </value>
            <version>1.0</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.ChangeSynergyUrlBuilder.Password">
            <summary>
            The Synergy password for the associate Username" value.
            </summary>
            <remarks>
            Support environment variable expansion.
            </remarks>
            <value>
                Defaults to <see langword="null" />, which implies that the end-user will
                be prompted for theIr ChangeSynergy logon credentials.
            </value>
            <version>1.0</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.ChangeSynergyUrlBuilder.Role">
            <summary>
            The role to use for the Synergy session.
            </summary>
            <remarks>
            If Username is specified to allow anonymous access to ChangeSynergy, you should specify a role with minimum read-only permissions.
            </remarks>
            <value>
                Defaults to <c>User</c>.
            </value>
            <version>1.0</version>
            <default>User</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.ChangeSynergyUrlBuilder.Url">
            <summary>
            The root path to the ChangeSynergy installation.
            </summary>
            <example>
                <c>http://myserver:8600</c>
            </example>
            <value>
                This should be the protocol scheme, server hostname, and optionally any
                port number and root directory information.
            </value>
            <version>1.0</version>
            <default>n/a</default>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.ISynergyCommand">
            <summary>
            	
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.ISynergyCommand.Execute(ThoughtWorks.CruiseControl.Core.Util.ProcessInfo)">
            <summary>
            Executes the specified process info.	
            </summary>
            <param name="processInfo">The process info.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.ISynergyCommand.Execute(ThoughtWorks.CruiseControl.Core.Util.ProcessInfo,System.Boolean)">
            <summary>
            Executes the specified process info.	
            </summary>
            <param name="processInfo">The process info.</param>
            <param name="failOnError">The fail on error.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.Synergy">
            <summary>
            <para>
            CruiseControl.NET SCM plugin for CM Synergy.
            </para>
            <para>
            Detection of modifications is entirely task based rather than object based, which may present problems for pre-6.3 lifecycles. Successful integration may be
            published through shared manual task folders and/or baselining.
            </para>
            </summary>
            <title>Telelogic Synergy  Source Control Block</title>
            <version>1.0</version>
            <key name="type">
            <description>The type of source control block.</description>
            <value>synergy</value>
            </key>
            <example>
            <code title="Example using Defaults">
            &lt;sourcecontrol type="synergy"&gt;
            &lt;connection&gt;
            &lt;host&gt;myserver&lt;/host&gt;
            &lt;database&gt;\\myserver\share\mydatabase&lt;/database&gt;
            &lt;/connection&gt;
            &lt;project&gt;
            &lt;release&gt;Product/1.0&lt;/release&gt;
            &lt;projectSpecification&gt;Product-1&lt;/projectSpecification&gt;
            &lt;taskFolder&gt;1234&lt;/taskFolder&gt;
            &lt;/project&gt;
            &lt;changeSynergy&gt;
            &lt;url&gt;http://myserver:8060&lt;/url&gt;
            &lt;/changeSynergy&gt;
            &lt;/sourcecontrol&gt;
            </code>
            <code title="Full Example">
            &lt;sourcecontrol type="synergy"&gt;
            &lt;connection&gt;
            &lt;host&gt;myserver&lt;/host&gt;
            &lt;database&gt;\\myserver\share\mydatabase&lt;/database&gt;
            &lt;!-- store values in an environmental variable--&gt;
            &lt;username&gt;%CCM_USER%&lt;/username&gt;
            &lt;password&gt;%CCM_PWD%&lt;/password&gt;
            &lt;role&gt;build_mgr&lt;/role&gt;
            &lt;homeDirectory&gt;D:\cmsynergy\%CCM_USER%&lt;/homeDirectory&gt;
            &lt;clientDatabaseDirectory&gt;D:\cmsynergy\uidb&lt;/clientDatabaseDirectory&gt;
            &lt;polling&gt;true&lt;/polling&gt;
            &lt;timeout&gt;3600&lt;/timeout&gt;
            &lt;/connection&gt;
            &lt;project&gt;
            &lt;release&gt;Product/1.0&lt;/release&gt;
            &lt;projectSpecification&gt;Product-1&lt;/projectSpecification&gt;
            &lt;taskFolder&gt;1234&lt;/taskFolder&gt;
            &lt;baseline&gt;false&lt;/baseline&gt;
            &lt;purpose&gt;Integration Testing&lt;/purpose&gt;
            &lt;template&gt;true&lt;/template&gt;
            &lt;/project&gt;
            &lt;changeSynergy&gt;
            &lt;role&gt;User&lt;/role&gt;
            &lt;url&gt;http://myserver:8060&lt;/url&gt;
            &lt;username&gt;%CS_USER%&lt;/username&gt;
            &lt;password&gt;%CS_PWD%&lt;/password&gt;
            &lt;/changeSynergy&gt;
            &lt;/sourcecontrol&gt;
            </code>
            </example>
            <remarks>
            <para type="info">
            This integration has been thoroughly tested against CM Synergy 6.3 SP4 and ChangeSynergy 4.3 SP3 Windows/Informix with the DCM option enabled. While untested, CM
            Synergy installations on Unix/Informix or Unix/Oracle should function properly.
            </para>
            <heading>Background</heading>
            <para>
            CM Synergy Concepts (http://confluence.public.thoughtworks.org//display/CC/CMSynergyConcepts) is arguably one of the best conceptual explanations of CM Synergy.
            Consider it a prerequisite for implementing continuous integration with CM Synergy. Robert Smith (http://confluence.public.thoughtworks.org//display/~rjmpsmith),
            from the CruiseControl for Java site, deserves a great deal of credit for explaining the product better than Telelogic ever has.
            </para>
            <heading>Methodology of integration with CCNET</heading>
            <para>
            Certain assumptions have been made about the integration of CruiseControl.NET and CM Synergy. First, it is assumed that all projects use a task based reconfigure
            template, rather than an object based.
            </para>
            <list type="1">
            <item>
            The reconfigure template for all projects is task based, not object status based. 
            </item>
            <item>
            Developers have there own projects with purpose "Insulated Development" 
            </item>
            <item>
            There's no real point to continuous integration for "Collaborative Development" purpose projects, since Synergy is not a label based system. 
            </item>
            <item>
            Build Managers test completed tasks in a project with purpose "Integration Testing" (or similar). 
            </item>
            <item>
            We could create a baseline in the integration project to push completed tasks to the developers; however, this is less than ideal. Baselines in Synergy are expensive and were intended for milestone events like completion of a feature, or a configuration used for a QA testing round. 
            </item>
            <item>
            The more efficient approach is to have a shared task folder that is included in each developer's reconfigure template/properties. 
            </item>
            <item>
            Successfully integrated tasks can be manually added to this folder. 
            </item>
            <item>
            This will push newly completed and integrated tasks to developers when they reconfigure (i.e., "update members").
            </item>
            </list>
            <para></para>
            <para></para>
            <heading>Configuration Reuse</heading>
            <para>
            By creating separate child nodes for the &lt;connection&gt;, &lt;project&gt;, and &lt;changeSynergy&gt; configuration elements, it is very easy to create reusable
            blocks of XML. For more information on XML DTD entities and reusable configuration blocks, see JIRA issue CCNET-239 and Nithy Palanivelu's Weblog
            (http://peeps.dallas.focus-technologies.com/roller/page/nithy/20040128#using_the_entity_includes_in).
            </para>
            <heading>The Polling Feature</heading>
            <para>
            The polling feature is useful if your Synergy installation routinely goes offline (i.e., "protected mode"). Long runing builds may inadventently conflict with the
            routine downtime schedules. For example, polling allows your build to queue CM Synergy commands until the nightly backup completes.
            </para>
            <heading>Environmental Variables</heading>
            <para>
            Environmental variable support enables you to keep your sensitive build manager credentials out of the CCNET configuration file. This is especially important if
            the configuration file is under source control, whereby it would be readable by all CM Synergy users.
            </para>
            </remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.Synergy.command">
            <summary>The execution client for the Synergy process.</summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.Synergy.connection">
            <summary>The configured settings for the Synergy server connection.</summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.Synergy.project">
            <summary>The configured settings for the Synergy integration project.</summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.Synergy.urlBuilder">
            <summary>The optional ChangeSynergy URL builder.</summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.Synergy.#ctor">
            <summary>
                Default constructor.  Initializes all members to their default values.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.Synergy.#ctor(ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyConnectionInfo,ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyProjectInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.Synergy"/> class.	
            </summary>
            <param name="connection">The connection.</param>
            <param name="project">The project.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.Synergy.#ctor(ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyConnectionInfo,ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyProjectInfo,ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.ISynergyCommand,ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyParser)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.Synergy"/> class.	
            </summary>
            <param name="connection">The connection.</param>
            <param name="project">The project.</param>
            <param name="command">The command.</param>
            <param name="parser">The parser.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.Synergy.Finalize">
            <summary>
                Finalizer that ensures that Synergy connections are eventually closed.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.Synergy.Dispose">
            <summary>
                Ensures that the Synergy session has been <see cref="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyCommand.Close">Closed</see>.
            </summary>
            <remarks>
                Based on the implementation suggested by 
                <see href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpref/html/frlrfSystemIDisposableClassTopic.asp">MSDN</see>
            </remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.Synergy.Initialize(ThoughtWorks.CruiseControl.Core.IProject)">
            <summary>
            Initializes the specified project.	
            </summary>
            <param name="project">The project.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.Synergy.GetSource(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
                Performs a CM Synergy "Reconfigure"/"Update Members" for a forced build.
            </summary>
            <remarks>
            	<see cref="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.Synergy.GetModifications(ThoughtWorks.CruiseControl.Core.IIntegrationResult,ThoughtWorks.CruiseControl.Core.IIntegrationResult)"/> will also reconfigure when modifications are detected
                which explains why this method is a no-op unless we have a forced build.
            </remarks>
            <param name="integration">Not used.</param>
            <url>element://model:project::CCNet.Synergy.Plugin/design:view:::ax60xur0dt7rg6h_v</url>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.Synergy.Purge(ThoughtWorks.CruiseControl.Core.IProject)">
            <summary>
                No implmentation.
            </summary>
            <param name="project">Not used.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.Synergy.GetModifications(ThoughtWorks.CruiseControl.Core.IIntegrationResult,ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
                Interface implementation to get the list of changes since the last integration
                run.
            </summary>
            <remarks>
            	<notes type="implementnotes">
                    Automatically updates the source configuration by calling <see cref="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.Synergy.GetSource(ThoughtWorks.CruiseControl.Core.IIntegrationResult)"/>.
                    This must be done here, rather than in the <see cref="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.Synergy.GetSource(ThoughtWorks.CruiseControl.Core.IIntegrationResult)"/> implmentation
                    because the Synergy <c>finduse</c> query command depends on the project having
                    been reconfigured.
                </notes>
            </remarks>
            <param name="from">The date of the last integration run.</param>
            <param name="to">Not used.</param>
            <returns>
                An empty array of modifications by by default.
                If changes have occurred since the last integration attempt, an array containing
                each new modification is returned.
            </returns>
            <url>element://model:project::CCNet.Synergy.Plugin/design:view:::qmbr0gle9x4bzse_v</url>
            <url>element://model:project::CCNet.Synergy.Plugin/design:view:::zs45gn0dmb8iufh_v</url>
            <url>element://model:project::CCNet.Synergy.Plugin/design:view:::vt4zadwko_v</url>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.Synergy.LabelSourceControl(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
                Adds tasks to a shared task folder, if configured, and creates a baseline
                if requested by the configuration.
            </summary>
            <remarks>
            	<note type="implementnotes">
                    This method makes use of CM Synergy selection commands, in order to pipe the 
                    results of one query to another command.  If the CM Synergy session is lost
                    during the course of execution in this method, the selection set is also lost.
                    An exception will be thrown when the next CM Synergy command is executed,
                    because the selection set is empty. This should be a very rare case, and the
                    performance gains of piping resultsets are worthwhile.
                </note>
            </remarks>
            <exception cref="T:ThoughtWorks.CruiseControl.Core.CruiseControlException">
                Thrown if an external process has reconfigured the project since 
                <see cref="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.Synergy.GetModifications(ThoughtWorks.CruiseControl.Core.IIntegrationResult,ThoughtWorks.CruiseControl.Core.IIntegrationResult)"/> was called.
            </exception>
            <param name="result">Not used.</param>
            <url>element://model:project::CCNet.Synergy.Plugin/design:view:::ow43bejw6wm4was_v</url>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.Synergy.Reconcile">
            <summary>
                If enabled, discards changes to specified work area paths.
            </summary>
            <remarks>
                Supports both file and directory paths.  Useful if you build process
                emits artifacts under source control.  Changes to controlled files can cause
                reconfigure commands to fail.
            </remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.Synergy.GetReconfigureTime">
            <summary>
                Gets the date of the project's last reconfigure time to ensure consistency.
            </summary>
            <exception cref="T:ThoughtWorks.CruiseControl.Core.CruiseControlException">
                Thrown if the last reconfigure time cannot be read or parsed successfully.
            </exception>
            <returns></returns>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.Synergy.Connection">
            <summary>
            Connection info to create a session.
            </summary>
            <version>1.0</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.Synergy.Project">
            <summary>
            The info for the integration testing project.
            </summary>
            <version>1.0</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.Synergy.UrlBuilder">
            <summary>
            The Web Url builder to use.
            </summary>
            <version>1.0</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.Synergy.IssueUrlBuilder">
            <summary>
            The issue URL builder to use.
            </summary>
            <version>1.0</version>
            <default>n/a</default>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyCommand">
            <summary>
                CruiseControl.NET SCM plugin for CM Synergy.
            </summary>
            <remarks>
                Tested against CM Synergy 6.3.  Supports integration testing of tasks.  Can use
                baselines and/or a shared task folder to publish successfully integrated tasks.
                <para/>
                <notes type="implementnotes">
                    This type does not subclass <see cref="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.ProcessSourceControl"/> because
                    the <see cref="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyParser"/> cannot be instantiated without having
                    the initialized/configured values for the Synergy project specification.
                </notes>
            </remarks>
            <!-- Failed to insert some or all of included XML --><include file="example.xml" path="/example"/>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyCommand.SessionToken">
            <summary>
                Specifies the remote function call (RFC) address (host:socket) for the CM Synergy engine.
            </summary>
            <remarks>
                See <see href="https://support.telelogic.com/en/synergy/docs/docs_63/help_w/wwhelp/wwhimpl/common/html/wwhelp.htm?context=cmsynergy%26file=defaults81.html#wp997768" />
                for details on environment variables used by CM Synergy.
            </remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyCommand.DateTimeFormat">
            <summary>
                Specifies use of the invariant culture for date/time formating and parsing.
            </summary>
            <remarks>
                See <see href="https://support.telelogic.com/en/synergy/docs/docs_63/help_w/wwhelp/wwhimpl/common/html/wwhelp.htm?context=cmsynergy%26file=defaults81.html#wp997768" />
                for details on environment variables used by CM Synergy.
            </remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyCommand.PadLock">
            <summary>Object used to serialize calls to <see cref="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyCommand.Open"/>.</summary>
            <remarks>
                The CM Synergy client does not robustly handle concurrent calls to <c>ccm.exe start</c>.
                Concurrent calls may cause read/write contention for the <c>ccm_ui.log</c> or other 
                similar files, as the clients seem to lock these files during start.
                A common startup error message from ccm.exe is "Could not write preferences" 
                during the startup.
            </remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyCommand.executor">
            <summary>The CCNET process launcher.</summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyCommand.connection">
            <summary>The configured settings for the Synergy server connection.</summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyCommand.project">
            <summary>The configured settings for the Synergy integration project.</summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyCommand.disposed">
            <summary>Track whether Dispose has been called.</summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyCommand.isOpen">
            <summary>Track whether we have an active connection.</summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyCommand.#ctor(ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyConnectionInfo,ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyProjectInfo)">
            <summary>
                Default constructor.  Initializes all members to their default values.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyCommand.#cctor">
            <summary>
                Type constructor used to the initialize and assign an object reference to
                <see cref="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyCommand.PadLock"/>.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyCommand.Finalize">
            <summary>
                Finalizer that ensures that Synergy connections are eventually closed.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyCommand.AppDomain_Unload(System.Object,System.EventArgs)">
            <summary>
                Event handler for <see cref="E:System.AppDomain.DomainUnload"/> and <see cref="E:System.AppDomain.ProcessExit"/>.
                Ensures that Synergy connections are eventually closed.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyCommand.Dispose">
            <overloads>
                <summary>
                    Ensures that the Synergy session has been <see cref="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyCommand.Close">Closed</see>.
                </summary>
                <remarks>
                    Based on the implementation suggested by 
                    <see href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpref/html/frlrfSystemIDisposableClassTopic.asp">MSDN</see>
                </remarks>
            </overloads>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyCommand.Open">
            <summary>
                Starts a new Synergy session.
            </summary>
            <exception cref="T:ThoughtWorks.CruiseControl.Core.CruiseControlException">
                Thrown if <see cref="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyCommandBuilder.Start(ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyConnectionInfo,ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyProjectInfo)"/> fails to write 
                a single line containing the CCM_ADDR value.
            </exception>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyCommand.Close">
            <summary>
                Stops the Synergy session, if one was previously opened.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyCommand.Initialize">
            <summary>
                Initializes the <see cref="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyConnectionInfo.Delimiter"/> and 
                <see cref="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyProjectInfo.ObjectName"/>, and 
                the <see cref="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyProjectInfo.WorkAreaPath"/> fields.
            </summary>
            <exception cref="T:ThoughtWorks.CruiseControl.Core.CruiseControlException">
                If the <see cref="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyCommandBuilder.GetDelimiter(ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyConnectionInfo)"/> or 
                <see cref="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyCommandBuilder.GetDcmDelimiter(ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyConnectionInfo)"/> commands fail 
                to return a stdout stream.  Also called if the work area is an invalid
                path, which can happen if the project has not been synchronized on
                the client machine.
            </exception>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyCommand.ValidateSession">
            <summary>
               Guarantees that a Synergy session is open, alive, and usable.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyCommand.IsSessionAlive(System.String,System.String,System.String)">
            <summary>
                Used to check if the current client session still has an open and active
                connection with the server.
            </summary>
            <remarks>
                This method has public accessibility so that it can be unit tested.
                Also, the session id and database values are sent as parameters, rather
                than read directly from the private fields for the same reason.
            </remarks>
            <param name="status">The output from the <c>ccm status</c> command.</param>
            <param name="sessionId">The value of <c>_Connection.SessionId</c></param>
            <param name="database">The value of <c>_Connection.Database</c></param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyCommand.IsDatabaseProtected(System.String,System.String,System.String)">
            <summary>
                Used to check if a session cannot be started because the database is
                in protected state.
            </summary>
            <remarks>
                This method can be used to spin wait the integration thread during a
                CM Synergy backup.  For long running builds
            </remarks>
            <param name="status">The output from the <c>ccm status</c> command.</param>
            <param name="host">The value of <c>_Connection.Host</c></param>
            <param name="database">The value of <c>_Connection.Database</c></param>
            <returns>
                <see langword="true" /> if the current session is still connected to the
                server.  <see langword="false" /> otherwise.
            </returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyCommand.Execute(ThoughtWorks.CruiseControl.Core.Util.ProcessInfo)">
            <summary>
               Executes a CM Synergy command.
            </summary>
            <exception cref="T:ThoughtWorks.CruiseControl.Core.CruiseControlException">
                Thrown if the CM Synergy command exceeds the configured
                <see cref="P:ThoughtWorks.CruiseControl.Core.Util.ProcessInfo.TimeOut"/>.
            </exception>
            <param name="processInfo">
                <see langword="true"/> if a <see cref="T:ThoughtWorks.CruiseControl.Core.CruiseControlException"/>
                should be thrown if the CM Synergy command does not return
                <c>0</c>.
            </param>
            <returns>The result of the command.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyCommand.Execute(ThoughtWorks.CruiseControl.Core.Util.ProcessInfo,System.Boolean)">
            <summary>
                Executes a CM Synergy command.
            </summary>
            <exception cref="T:ThoughtWorks.CruiseControl.Core.CruiseControlException">
                Thrown if the CM Synergy command exceeds the configured
                <see cref="P:ThoughtWorks.CruiseControl.Core.Util.ProcessInfo.TimeOut"/>, or if <paramref see="failOnError"/>
                is <see langword="true"/> and the commands returns non-zero.
            </exception>
            <param name="processInfo">
                <see langword="true"/> if a <see cref="T:ThoughtWorks.CruiseControl.Core.CruiseControlException"/>
                should be thrown if the CM Synergy command does not return
                <c>0</c>.
            </param>
            <param name="failOnError">
                Indicates if a <see cref="T:ThoughtWorks.CruiseControl.Core.CruiseControlException"/> should be thrown
                if non-zero is returned by the command.
            </param>
            <returns>The result of the command.</returns>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyCommandBuilder">
            <summary>
                Used to build CLI calls for CM Syngery.
            </summary>
            <remarks>
                <seealso href="https://support.telelogic.com/en/synergy/docs/docs_63/help_w/wwhelp/wwhimpl/common/html/wwhelp.htm?context=cmsynergy%26file=genl_descri5.html#wp763272" />
            </remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyCommandBuilder.Heartbeat(ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyConnectionInfo)">
            <summary>
                Command to check if the session is still alive.
            </summary>
            <remarks>
                <seealso href="https://support.telelogic.com/en/synergy/docs/docs_63/help_w/wwhelp/wwhimpl/common/html/wwhelp.htm?context=cmsynergy%26file=status_cm.html#wp902351">
                    CM Synergy <c>status</c> Command
                </seealso>
            </remarks>
            <param name="connection">CM Synergy connection parameters.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyCommandBuilder.Start(ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyConnectionInfo,ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyProjectInfo)">
            <summary>
                The start command begins a CM Synergy session by starting the engine and interface.
            </summary>
            <remarks>
                <seealso href="https://support.telelogic.com/en/synergy/docs/docs_63/help_w/wwhelp/wwhimpl/common/html/wwhelp.htm?context=cmsynergy%26file=shw_start_inf_cm5.html#wp425801">
                    CM Synergy <c>start</c> Command
                </seealso>
            </remarks>
            <param name="connection">CM Synergy connection parameters.</param>
            <param name="project">Properties of the integration testing project.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyCommandBuilder.Stop(ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyConnectionInfo)">
            <summary>
                The stop command ends a CM Synergy session.
            </summary>
            <remarks>
                <seealso href="https://support.telelogic.com/en/synergy/docs/docs_63/help_w/wwhelp/wwhimpl/common/html/wwhelp.htm?context=cmsynergy%26file=stop_cm4.html#wp900662">
                    CM Synergy <c>stop</c> command
                </seealso>
            </remarks>
            <param name="connection">CM Synergy connection parameters.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyCommandBuilder.GetDelimiter(ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyConnectionInfo)">
            <summary>
                Reads the character used to separate project or object name or version values
                for this database.
            </summary>
            <remarks>
                <seealso href="https://support.telelogic.com/en/synergy/docs/docs_63/help_w/wwhelp/wwhimpl/common/html/wwhelp.htm?context=cmsynergy%26file=delimiter.html#wp900646">
                    CM Synergy <c>delimiter</c> command
                </seealso>
            </remarks>
            <param name="connection">CM Synergy connection parameters.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyCommandBuilder.GetDcmDelimiter(ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyConnectionInfo)">
            <summary>
                Reads the character used to separate database ID and object names.
            </summary>
            <remarks>
                <seealso href="https://support.telelogic.com/en/synergy/docs/docs_63/help_w/wwhelp/wwhimpl/common/html/wwhelp.htm?context=cmsynergy%26file=init_dcm4.html#wp438972">
                    CM Synergy DCM Delimiter
                </seealso>
            </remarks>
            <param name="connection">CM Synergy connection parameters.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyCommandBuilder.GetDcmSettings(ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyConnectionInfo)">
            <summary>
                Displays the DCM settings for the current database.  Used to determine if the 
                database has been initialized for DCM.
            </summary>
            <remarks>
                <seealso href="https://support.telelogic.com/en/synergy/docs/docs_63/help_w/wwhelp/wwhimpl/common/html/wwhelp.htm?context=cmsynergy%26file=dcm.html#wp1328986">
                     CM Synergy <c>dcm</c> command
                </seealso>
                If DCM is not initialized, the following stderr message should be displayed:
                <c>Warning: You must first initialize DCM before showing the DCM settings.</c>
            </remarks>
            <param name="connection">CM Synergy connection parameters.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyCommandBuilder.GetProjectFullName(ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyConnectionInfo,ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyProjectInfo)">
            <summary>
                Gets the <c>%objectname</c> value for a project.
            </summary>
            <remarks>
                <seealso href="https://support.telelogic.com/en/synergy/docs/docs_63/help_w/wwhelp/wwhimpl/common/html/wwhelp.htm?context=cmsynergy%26file=cp_attr_cm5.html#wp922734">
                    CM Synergy <c>attribute</c> command
                </seealso>
            </remarks>
            <param name="connection">CM Synergy connection parameters.</param>
            <param name="project">Properties of the integration testing project.</param>
            <returns>A non-null initialized process structure.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyCommandBuilder.GetSubProjects(ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyConnectionInfo,ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyProjectInfo)">
            <summary>
                Gets the project and all contained subprojects for a given project spec.
            </summary>
            <remarks>
                <seealso href="https://support.telelogic.com/en/synergy/docs/docs_63/help_w/wwhelp/wwhimpl/common/html/wwhelp.htm?context=cmsynergy&amp;file=qry_cm9.html#wp901559">
                    CM Synergy <c>query</c> command
                </seealso>
            </remarks>
            <param name="connection">CM Synergy connection parameters.</param>
            <param name="project">Properties of the integration testing project.</param>
            <returns>A non-null initialized process structure to query for all project members.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyCommandBuilder.SetProjectRelease(ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyConnectionInfo,ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyProjectInfo)">
            <summary>
                Updates the release value for the project.
            </summary>
            <remarks>
                <seealso href="https://support.telelogic.com/en/synergy/docs/docs_63/help_w/wwhelp/wwhimpl/common/html/wwhelp.htm?context=cmsynergy%26file=cp_attr_cm5.html#wp922734">
                    CM Synergy <c>attribute</c> command
                </seealso>
            </remarks>
            <param name="connection">CM Synergy connection parameters.</param>
            <param name="project">Properties of the integration testing project.</param>
            <returns>A non-null initialized process structure.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyCommandBuilder.GetLastReconfigureTime(ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyConnectionInfo,ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyProjectInfo)">
            <summary>
                Gets the time of the last project reconfiguration.  This is useful for confirming
                that no outside processes have touched the project's configuration.
            </summary>
            <remarks>
                <seealso href="https://support.telelogic.com/en/synergy/docs/docs_63/help_w/wwhelp/wwhimpl/common/html/wwhelp.htm?context=cmsynergy%26file=cp_attr_cm5.html#wp922734">
                    CM Synergy <c>attribute</c> command
                </seealso>
            </remarks>
            <param name="connection">CM Synergy connection parameters.</param>
            <param name="project">Properties of the integration testing project.</param>
            <returns>A non-null initialized process structure.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyCommandBuilder.UseReconfigureTemplate(ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyConnectionInfo,ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyProjectInfo)">
            <summary>
                Sets the reconfigure method to be task based, using the reconfigure template for the project.
            </summary>
            <remarks>
                <seealso href="https://support.telelogic.com/en/synergy/docs/docs_63/help_w/wwhelp/wwhimpl/common/html/wwhelp.htm?context=cmsynergy%26file=reconf_prop.html#wp903137">
                    CM Synergy <c>reconfigure_properties</c> command
                </seealso>
            </remarks>
            <param name="connection">CM Synergy connection parameters.</param>
            <param name="project">Properties of the integration testing project.</param>
            <returns>A non-null initialized process structure.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyCommandBuilder.UpdateReconfigureProperites(ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyConnectionInfo,ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyProjectInfo)">
            <summary>
                Updates the baseline, folder, and tasks on a project to make them consistent with the
                reconfigure template. Updating the folder includes performing a query.
            </summary>
            <remarks>
                <seealso href="https://support.telelogic.com/en/synergy/docs/docs_63/help_w/wwhelp/wwhimpl/common/html/wwhelp.htm?context=cmsynergy%26file=reconf_prop.html#wp903137">
                    CM Synergy <c>reconfigure_properties</c> command
                </seealso>
            </remarks>
            <param name="connection">CM Synergy connection parameters.</param>
            <param name="project">Properties of the integration testing project.</param>
            <returns>A non-null initialized process structure.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyCommandBuilder.Reconfigure(ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyConnectionInfo,ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyProjectInfo)">
            <summary>
                Reconfigures the project to get the lateset source (objects).
            </summary>
            <remarks>
                Updates the specified directory or project object. It uses reconfigure properties to find the appropriate candidates and selection rules to select new versions of the members, if appropriate.
                <seealso href="https://support.telelogic.com/en/synergy/docs/docs_63/help_w/wwhelp/wwhimpl/common/html/wwhelp.htm?context=cmsynergy%26file=recon_proj_cm6.html#wp900721">
                    CM Synergy <c>reconfigure</c> command.
                </seealso>
            </remarks>
            <param name="connection">CM Synergy connection parameters.</param>
            <param name="project">Properties of the integration testing project.</param>
            <returns>A non-null initialized process structure.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyCommandBuilder.Reconcile(ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyConnectionInfo,ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyProjectInfo,System.String)">
            <summary>
                Reconciles (syncs) the work area from the database.
            </summary>
            <remarks>
                <seealso href="https://support.telelogic.com/en/synergy/docs/docs_63/help_w/wwhelp/wwhimpl/common/html/wwhelp.htm?context=cmsynergy%26file=recon_wa_cm19.html#wp900913">
                    CM Synergy <c>reconcile</c> command.
                </seealso>
            </remarks>
            <param name="connection">CM Synergy connection parameters.</param>
            <param name="project">Properties of the integration testing project.</param>
            <param name="path">
                The work area path to the file or directory to by reconciled.
            </param>
            <returns>A non-null initialized process structure.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyCommandBuilder.GetWorkArea(ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyConnectionInfo,ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyProjectInfo)">
            <summary>
                Returns the work area path for a specified project.
            </summary>
            <remarks>
                <seealso href="https://support.telelogic.com/en/synergy/docs/docs_63/help_w/wwhelp/wwhimpl/common/html/wwhelp.htm?context=cmsynergy%26file=work_area.html#wp918369">
                    CM Synergy <c>work_area</c> command.
                </seealso>
            </remarks>
            <param name="connection">CM Synergy connection parameters.</param>
            <param name="project">Properties of the integration testing project.</param>
            <returns>A non-null initialized process structure.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyCommandBuilder.GetNewTasks(ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyConnectionInfo,ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyProjectInfo,System.DateTime)">
            <summary>
                Used to populate the set of tasks that are currently part of the integration project's
                reconfigure properties.  The query set is used by <see cref="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyCommandBuilder.AddTasksToFolder(ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyConnectionInfo,ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyProjectInfo,ThoughtWorks.CruiseControl.Core.IIntegrationResult)"/> to
                manually add these tasks to the shared folder.
            </summary>
            <remarks>
                <note type="implementnotes">
                    This query looks for 
                    <list type="number">
                        <item>
                            All completed tasks within a task folder that is part of a 
                            project's reconfigure properties.
                        </item>
                        <item>
                            All completed tasks that are part of a project's reconfigure properties.
                        </item>
                        <item>
                            All completed tasks from the baseline project(s).
                        </item>
                    </list>
                    <para/>
                    This query excludes tasks already in the baseline.  Assuming that all project purposes
                    employ similar baseline selection criteria, this should not be a problem.
            		NB. Dates must be formatted as 'yyyy/MM/dd HH:mm:ss': <see href="https://support.telelogic.com/en/synergy/docs/docs_63/help_w/wwhelp/wwhimpl/common/html/wwhelp.htm?context=cmsynergy%26file=formats_at.html#wp901144"/>
                </note>
            </remarks>
            <param name="connection">CM Synergy connection parameters.</param>
            <param name="project">Properties of the integration testing project.</param>
            <param name="startDate">
                The minimum completion date for tasks.  Date of the last
                successful or unsuccessful integration run.
            </param>
            <returns>A non-null initialized process structure.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyCommandBuilder.FormatCommandDate(System.DateTime)">
            <summary>
            Formats the command date.	
            </summary>
            <param name="startDate">The start date.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyCommandBuilder.GetTaskObjects(ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyConnectionInfo,ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyProjectInfo)">
            <summary>
                Gets the list of objects associated with the tasks detected by <see cref="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyCommandBuilder.GetNewTasks(ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyConnectionInfo,ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyProjectInfo,System.DateTime)"/>
            </summary>
            <returns>A non-null initialized process structure.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyCommandBuilder.GetObjectPaths(ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyConnectionInfo,ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyProjectInfo)">
            <summary>
                Used in conjuction with <see cref="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyCommandBuilder.GetTaskObjects(ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyConnectionInfo,ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyProjectInfo)"/> to get the project reference form
                of objects associated with a set of objects.
            </summary>
            <remarks>
                Runs a finduse against all projects for the modified files.  Will the use the 
                last row returned by finduse, which should be the lastest usage.
            </remarks>
            <param name="connection">CM Synergy connection parameters.</param>
            <param name="project">Properties of the integration testing project.</param>
            <returns>A non-null initialized process structure.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyCommandBuilder.AddTasksToFolder(ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyConnectionInfo,ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyProjectInfo,ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
                Used to add the current selection set to the shared task folder.
            </summary>
            <exception cref="T:ThoughtWorks.CruiseControl.Core.CruiseControlException">
                If <pararef name="result"/>.Modifications is null or empty.
            </exception>
            <param name="connection">CM Synergy connection parameters.</param>
            <param name="project">Properties of the integration testing project.</param>
            <param name="result">The integration result for this build</param>
            <returns>A non-null initialized process structure.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyCommandBuilder.AddLabelToTaskComment(ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyConnectionInfo,ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyProjectInfo,ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
                Appends a text string to the task_description attribute to each task in
                the current selection set.
            </summary>
            <param name="connection">CM Synergy connection parameters.</param>
            <param name="project">Properties of the integration testing project.</param>
            <param name="result">The change set for the current integration run</param>
            <returns>A non-null initialized process structure.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyCommandBuilder.CreateBaseline(ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyConnectionInfo,ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyProjectInfo,ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
                Creates a baseline for the current project configuration.
                The first format parameter is the baseline name (similar to a label name).
                The second format paramter is the baseline description. 
                The third format parameter is the project spec.
                The fourth format parameter is the purpose (i.e., "Integration Testing").
            </summary>
            <remarks>
                <seealso href="https://support.telelogic.com/en/synergy/docs/docs_63/help_w/wwhelp/wwhimpl/common/html/wwhelp.htm?context=cmsynergy%26file=baseline.html#wp939669">
                    CM Synergy <c>baseline</c> command
                </seealso>
            </remarks>
            <param name="connection">CM Synergy connection parameters.</param>
            <param name="project">Properties of the integration testing project.</param>
            <param name="result">The change set for the current integration run</param>
            <returns>A non-null initialized process structure.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyCommandBuilder.CreateProcessInfo(ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyConnectionInfo,System.String)">
            <summary>
                Factory method to initialize a new process structure for use with CM Synergy.
            </summary>
            <param name="connectionInfo">CM Synergy connection parameters.</param>
            <param name="arguments">The ccm command to execute.</param>
            <returns>A non-null initialized process structure.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyCommandBuilder.GetTaskList(ThoughtWorks.CruiseControl.Core.Modification[])">
            <summary>
                Creates a comma separated list of task IDs.
            </summary>
            <exception cref="T:ThoughtWorks.CruiseControl.Core.CruiseControlException">
                If <paramref name="modifications"/> is null or empty;
            </exception>
            <param name="modifications">
                The non-null, non-empty changeset which to use for the list generation.
            </param>
            <returns>
                A comma separated list of task IDs, with no whitespace.
            </returns>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyConnectionInfo">
            <summary>
            A CM Synergy client session.
            </summary>
            <title>Synergy Client Session</title>
            <version>1.0</version>
            <example>
            <code>
            &lt;connection&gt;
            &lt;host&gt;myserver&lt;/host&gt;
            &lt;database&gt;\\myserver\share\mydatabase&lt;/database&gt;
            &lt;!-- store values in an environmental variable--&gt;
            &lt;username&gt;%CCM_USER%&lt;/username&gt;
            &lt;password&gt;%CCM_PWD%&lt;/password&gt;
            &lt;role&gt;build_mgr&lt;/role&gt;
            &lt;homeDirectory&gt;D:\cmsynergy\%CCM_USER%&lt;/homeDirectory&gt;
            &lt;clientDatabaseDirectory&gt;D:\cmsynergy\uidb&lt;/clientDatabaseDirectory&gt;
            &lt;polling&gt;true&lt;/polling&gt;
            &lt;timeout&gt;3600&lt;/timeout&gt;
            &lt;/connection&gt;
            </code>
            </example>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyConnectionInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyConnectionInfo"/> class.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyConnectionInfo.SessionId">
            <summary>
            The identitifer for the Synergy client side process.
            Required to have multiple Synergy processes.
            </summary>
            <example>
            <c>COMPUTERNAME:1234:127.0.0.1</c>
            </example>
            <value>
            Defaults to <see langword="null" />.
            </value>
            <version>1.0</version>
            <default>None</default>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyConnectionInfo.Delimiter">
            <summary>
            The configured database delimiter for object and project specifications.
            </summary>
            <value>
                Defaults to <c>-</c>.
            </value>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyConnectionInfo.FormatProvider">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyConnectionInfo.Reset">
            <summary>
                Resets session variables back to default values.
                Useful for when a connection is closed or reestablished.
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyConnectionInfo.Executable">
            <summary>
            The executable filename/path for the CM Synergy command line interface.
            </summary>
            <remarks>
            Can include environmental variables to be replaced.
            </remarks>
            <value>
            Defaults to <c>ccm.exe</c>.
            </value>
            <version>1.0</version>
            <default>ccm.exe</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyConnectionInfo.WorkingDirectory">
            <summary>
            The directory to execute all CM Synergy commands from.
            </summary>
            <remarks>
            Can include environmental variables to be replaced.
            </remarks>
            <value>
            Defaults to <c>%PROGRAMFILES%\Telelogic\CM Synergy 6.3\bin</c>
            </value>
            <version>1.0</version>
            <default>%PROGRAMFILES%\Telelogic\CM Synergy 6.3\bin</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyConnectionInfo.Host">
            <summary>
            Hostname of the Synergy server
            </summary>
            <version>1.0</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyConnectionInfo.Database">
            <summary>
            Network path to the Synergy database instance
            </summary>
            <version>1.0</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyConnectionInfo.DatabaseName">
            <summary>
                Extracts the name of the database from the <see cref="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyConnectionInfo.Database"/> full
                physical path.
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyConnectionInfo.PollingEnabled">
            <summary>
            Poll the server every minute when the <c>ccm_admin</c> has protected the database for the purpose of issuing backup commands.
            </summary>
            <remarks>
            This is useful if a long runing inadventently enters the scheduled time window for routine downtime, generally for server maintenance jobs like backups.
            </remarks>
            <value>
                Defaults to <see langword="false" />
            </value>
            <version>1.0</version>
            <default>false</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyConnectionInfo.Username">
            <summary>
            The username for the Synergy session. Can include environmental variables to be replaced.
            </summary>
            <value>
            Defaults to <c>("%USERNAME%")</c>.
            </value>
            <version>1.0</version>
            <default>%USERNAME%</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyConnectionInfo.Password">
            <summary>
            The Synergy password for the associate <see cref="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyConnectionInfo.Username"/> value.
            </summary>
            <value>
            Defaults to <see cref="F:System.String.Empty"/>.
            </value>
            <version>1.0</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyConnectionInfo.Role">
            <summary>
            The role to use for the Synergy session.
            </summary>
            <value>
            Defaults to <c>build_mgr</c>.
            </value>
            <version>1.0</version>
            <default>build_mgr</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyConnectionInfo.HomeDirectory">
            <summary>
            The full physical path of the home directory for the associated Username on the client machine. Can include environmental variables to be replaced.
            </summary>
            <remarks>
            This role must have sufficient permissions to modify task folders, change reconfigure properties, and create baselines.
            </remarks>
            <value>Defaults to <c>%SystemDrive%\cmsynergy\%USERNAME%</c>.</value>
            <version>1.0</version>
            <default>%SystemDrive%\cmsynergy\%USERNAME%</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyConnectionInfo.ClientDatabaseDirectory">
            <summary>
            Path for the remote client session to copy database information to. Can include environmental variables to be replaced.
            </summary>
            <value>Defaults to <c>%SystemDrive%\cmsynergy\uidb</c>.</value>
            <version>1.0</version>
            <default>%SystemDrive%\cmsynergy\uidb</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyConnectionInfo.Timeout">
            <summary>
            Timeout in seconds for all Synergy commands.
            </summary>
            <value>Defaults to <c>3600</c> seconds (one hour).</value>
            <version>1.0</version>
            <default>3600</default>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyParser">
            <summary>
                Used to parse the output of a Synergy <c>finduse</c> query for all objects
                that have changed in the current project since the last integration run.
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyParser.TaskFormat">
            <summary>
                The regular expression pattern used to match tasks added by a ccm task query.
            </summary>
            <remarks>
                See the inline code comments for details on the intended pattern logic.
                <para />
                See <see href="https://support.telelogic.com/en/synergy/kb/show_content.cfm?id=6200#6200">
                CM Synergy Date and Time Formats (TB237)</see> for details.
            </remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyParser.ObjectFormat">
            <summary>
                The regular expression pattern used to match objects from a ccm finduse query.
            </summary>
            <remarks>
                See the inline code comments for details on the intended pattern logic.
            </remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyParser.ThoughtWorks#CruiseControl#Core#Sourcecontrol#IHistoryParser#Parse(System.IO.TextReader,System.DateTime,System.DateTime)">
            <summary>
                Explicit interface implementation of the <see cref="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.IHistoryParser.Parse(System.IO.TextReader,System.DateTime,System.DateTime)"/> 
            </summary>
            <remarks>
                Provided for completeness only.  Usable by interface references only.
                <see cref="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyParser.Parse(System.String,System.String,System.DateTime)"/>
                should be used instead for all Synergy specific implementations.
            </remarks>
            <param name="history">The stream from a Synergy CLI finduser command's standard output.</param>
            <param name="from">The start date of the integration run.</param>
            <param name="to">Not used.</param>
            <returns>
                <c>null</c> by default.  Otherwise, an array of modifications, with default values
                for <see cref="F:ThoughtWorks.CruiseControl.Core.Modification.Comment"/> and <see cref="F:ThoughtWorks.CruiseControl.Core.Modification.ModifiedTime"/>.
            </returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyParser.Parse(System.String,System.String,System.DateTime)">
            <summary>
                Synergy specific implemtation of <see cref="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.IHistoryParser.Parse(System.IO.TextReader,System.DateTime,System.DateTime)"/> 
            </summary>
            <remarks>
                Processes both the task query and the object query to fully populate each
                <see cref="T:ThoughtWorks.CruiseControl.Core.Modification"/> object in the returned array.
            </remarks>
            <param name="newTasks">
                Standard output stream from the Synergy query command.
            </param>
            <param name="newObjects">
                Standard output stream from the Synergy finduse command.
            </param>
            <param name="from">
                The date since the last successful integration run.  Not used, since the finduse
                query includes this parameter.
            </param>
            <returns>
                <c>null</c> by default.
                If changes have occurred since the last integration attempt, an array containing
                each new modification is returned.
            </returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyParser.ParseTasks(System.String)">
            <summary>
                Creates a string collection of task numbers with their respective
                task synopsis, for use by <see cref="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyParser.Parse(System.String,System.String,System.DateTime)"/>.
            </summary>
            <param name="comments">One or more lines of comments from a Synergy task query.</param>
            <returns>A non-null collection, with zero or more tasks with their comments.</returns>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyParser.SynergyTaskInfo">
            <summary>
                Inner class that serves as a data structure to cache the information parsed
                from the task query.
            </summary>
            <remarks>
                Marked public so that is can be unit tested.
            </remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyParser.SynergyTaskInfo.DisplayName">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyParser.SynergyTaskInfo.TaskNumber">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyParser.SynergyTaskInfo.TaskSynopsis">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyParser.SynergyTaskInfo.CompletionDate">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyParser.SynergyTaskInfo.Resolver">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyProcessExecutor">
            <summary>
                A subclass to escape ASCII bell characters (0x07) from the output
                of Synergy commands
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Util.ProcessExecutor">
            <summary>
            The ProcessExecutor serves as a simple, injectable facade for executing external processes.  The ProcessExecutor
            spawns a new <see cref="T:ThoughtWorks.CruiseControl.Core.Util.ProcessExecutor.RunnableProcess"/> using the properties specified in the input <see cref="T:ThoughtWorks.CruiseControl.Core.Util.ProcessInfo"/>.
            All output from the executed process is contained within the returned <see cref="T:ThoughtWorks.CruiseControl.Core.Util.ProcessResult"/>.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.ProcessExecutor.Execute(ThoughtWorks.CruiseControl.Core.Util.ProcessInfo)">
            <summary>
            Executes the specified process info.	
            </summary>
            <param name="processInfo">The process info.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.ProcessExecutor.KillProcessCurrentlyRunningForProject(System.String)">
            <summary>
            Kills the process currently running for project.	
            </summary>
            <param name="name">The name.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.ProcessExecutor.OnProcessOutput(ThoughtWorks.CruiseControl.Core.Util.ProcessOutputEventArgs)">
            <summary>
            Raises the <see cref="E:ProcessOutput"/> event.	
            </summary>
            <param name="eventArgs">The <see cref="T:ThoughtWorks.CruiseControl.Core.Util.ProcessOutputEventArgs"/> instance containing the event data.</param>
            <remarks></remarks>
        </member>
        <member name="E:ThoughtWorks.CruiseControl.Core.Util.ProcessExecutor.ProcessOutput">
            <summary>
            Occurs when [process output].	
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Util.ProcessExecutor.ProcessMonitor">
            <summary>
            A Process-Monitor receives the currently active process of a specific project
            and stores a reference to it.
            It can be used to abort a running build.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyProcessExecutor.Execute(ThoughtWorks.CruiseControl.Core.Util.ProcessInfo)">
            <summary>
                Replaces all ASCII bell characters (0x07) (^G) with a space
                character.  Certain ccm.exe commands emit a bell, which cannot
                be disabled.  The CCNET XML parser disallows this reserved character.
            </summary>
            <param name="processInfo">The process to run.</param>
            <returns>
                Sanitized standard output and input.
            </returns>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyProjectInfo">
            <summary>
            A CM Synergy project (which is similar to a "view" in other SCM packages).
            </summary>
            <title>Synergy Project</title>
            <version>1.0</version>
            <example>
            <code>
            &lt;project&gt;
            &lt;release&gt;Product/1.0&lt;/release&gt;
            &lt;projectSpecification&gt;Product-1&lt;/projectSpecification&gt;
            &lt;taskFolder&gt;1234&lt;/taskFolder&gt;
            &lt;baseline&gt;false&lt;/baseline&gt;
            &lt;purpose&gt;Integration Testing&lt;/purpose&gt;
            &lt;template&gt;true&lt;/template&gt;
            &lt;/project&gt;
            </code>
            </example>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyProjectInfo.DefaultTaskFolder">
            <summary>The default value for <see cref="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyProjectInfo.TaskFolder"/></summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyProjectInfo.DefaultPurpose">
            <summary>The default value for <see cref="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyProjectInfo.Purpose"/></summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyProjectInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyProjectInfo"/> class.
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyProjectInfo.ObjectName">
            <summary>
            The 4 part object identifier for this project.
            </summary>
            <value>
            Defaults to <see langword="null" />.
            </value>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyProjectInfo.WorkAreaPath">
            <summary>
            The project's work area path.
            </summary>
            <value>
            Defaults to <see langword="null" />.
            </value>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyProjectInfo.LastReconfigureTime">
            <summary>
                The timestamp of when the integration project was last reconfigured.
                Tracks the last time the project was reconfigured, to ensure that 
                an out-of-process reconfigure was not executed.
            </summary>
            <remarks>
                This is important to guarantee that an external user/process has not reconfigured
                the project during the current CCNET integration run.
                
                <note type="implementnotes">
                    There exists potential more a more robust implementation, via calls to
                    <c>ccm accent base_asm_lock [compver] [reason string, "Locked by CCNET"]</c>
                    and 
                    <c>ccm accent base_asm_unlock [compver]</c> in a try/finally block.
                    <para/>
                    This would leverage CM Synergy's provision for queuing access to a project
                    across multiple processes using the same database.  However, this could be 
                    dangerous if the CCNET process were killed before a project was unlocked.
                    Perhaps that could be handled by an AppDomain.Unload delegate.
                    <para/>
                    For more information, see the CM Synergy Advanced Customization Guide.
                </note>
            </remarks>
            <value>
                Defaults to <see cref="F:System.DateTime.MinValue"/>.
            </value>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyProjectInfo.Release">
            <summary>
            The configured Synergy release value for the given project.
            </summary>
            <remarks>
            The component + version specification.
            </remarks>
            <value>
            Defaults to <see langword="null" />.
            </value>
            <version>1.0</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyProjectInfo.ProjectSpecification">
            <summary>
            The configured Synergy project specification for all source control operations.
            </summary>
            <value>
            Defaults to <see langword="null" />.
            </value>
            <version>1.0</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyProjectInfo.TaskFolder">
            <summary>
            The folder specification for the shared folder which will be used to "manually" add successfully integrated tasks added to.
            </summary>
            <remarks>
            This should be a shared folder added to the reconfigure template/properties for all developer's projects (i.e., projects for purpose "Insulated Development"
            or "Colloborative Development").  The easiset way to do this is by creating a "folder template", which is then added to the "Default Release" reconfigure
            templates "Default Release:Insulated Development" or "Default Release:Colloborative Development".
            Adding integrated tasks to a shared task folder is an alternative to creating a new baseline for every successful integration build.  Most source control
            providers implemented by CruiseControl.NET use labels for grouping change sets.  However, Synergy is an activity based SCM tool that groups changes by ...
            </remarks>
            <value>
            Defaults to <c>0</c>.
            </value>
            <version>1.0</version>
            <default>0</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyProjectInfo.BaseliningEnabled">
            <summary>
            If true, creates a new baseline for the project configuration after a successful integration.
            </summary>
            <remarks>
            Realistically, a successful continuous integration does not justify creation of a baseline.  Baselines should be used to create a snapshot of a configuration,
            so that anyone can  usually based on a project mileston
            </remarks>
            <value>
                <see langword="false"/> by default
            </value>
            <version>1.0</version>
            <default>0</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyProjectInfo.TemplateEnabled">
            <summary>
            If true, resets the reconfigure properties for this project and all subprojects to use the reconfigure template.
            </summary>
            <remarks>
            Do not set to true if you have manually set the template to reconfigure with specific settings (e.g., reconfigure by object status, with a manually added set
            of tasks, etc).
            </remarks>
            <value>
                <see langword="false"/> by default
            </value>
            <version>1.0</version>
            <default>false</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyProjectInfo.ReconcilePaths">
            <summary>
            If enabled, updates the work area from the database, discarding all uncontrolled files in the work area and changes to static objects.
            </summary>
            <remarks>
            Useful if your build process adds or modifies files in the source tree.
            </remarks>
            <value>
                <see langword="false"/> by default
            </value>
            <version>1.0</version>
            <default>false</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Telelogic.SynergyProjectInfo.Purpose">
            <summary>
            Synergy purpose specification for the project and any created baselines.
            </summary>
            <value>
            Defaults to <c>Integration Testing</c>.
            </value>
            <version>1.0</version>
            <default>Integration Testing</default>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.UserFilter">
            <summary>
            The UserFilter can be used to filter modifications on the basis of the username that committed the changes.
            </summary>
            <title>UserFilter</title>
            <version>1.0</version>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.UserFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.UserFilter"/> class.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.UserFilter.Accept(ThoughtWorks.CruiseControl.Core.Modification)">
            <summary>
            Accepts the specified m.	
            </summary>
            <param name="m">The m.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.UserFilter.ToString">
            <summary>
            Toes the string.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.UserFilter.UserNames">
            <summary>
            The user names to filter.
            </summary>
            <version>1.0</version>
            <default>None</default>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Vault3">
            <summary>
            Integrates with Vault 3.0.0 - 3.1.6
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Vault3._shim">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Vault3.#ctor(ThoughtWorks.CruiseControl.Core.Sourcecontrol.VaultVersionChecker)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Vault3"/> class.	
            </summary>
            <param name="versionCheckerShim">The version checker shim.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Vault3.#ctor(ThoughtWorks.CruiseControl.Core.Sourcecontrol.VaultVersionChecker,ThoughtWorks.CruiseControl.Core.Sourcecontrol.IHistoryParser,ThoughtWorks.CruiseControl.Core.Util.ProcessExecutor)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Vault3"/> class.	
            </summary>
            <param name="versionCheckerShim">The version checker shim.</param>
            <param name="historyParser">The history parser.</param>
            <param name="executor">The executor.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Vault3.GetModifications(ThoughtWorks.CruiseControl.Core.IIntegrationResult,ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Gets the modifications.	
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Vault3.LabelSourceControl(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            This is called by IntegrationRunner when the build is complete.  To ensure we're building with the labelled code,
            we labelled just before we retrieved the sourece.  So here, we remove that label if the build failed.
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Vault3.GetSource(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Gets the source.	
            </summary>
            <param name="result">The result.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Vault3.ExtractXmlFromOutput(System.String)">
            <summary>
            The Vault command line client (vault.exe), at least for
            version 2.0.4, is not guaranteed to output valid XML in
            that there may be some not XML output surrounding the XML.
            This method strips away any non-XML	output surrounding
            the <vault>...</vault> elements.
            </summary>
            <param name="output">String containing all vault command-line client output.</param>
            <returns>string containing only the XML output from the Vault client.</returns>
            <exception cref="T:ThoughtWorks.CruiseControl.Core.CruiseControlException">The <vault> start element or </vault> end element cannot be found.</exception>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Vault3.ForHistoryProcessInfo(ThoughtWorks.CruiseControl.Core.IIntegrationResult,ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Fors the history process info.	
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Vault3.ProcessInfoFor(ThoughtWorks.CruiseControl.Core.Util.PrivateArguments,ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Processes the info for.	
            </summary>
            <param name="args">The args.</param>
            <param name="result">The result.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Vault3.AddCommonOptionalArguments(ThoughtWorks.CruiseControl.Core.Util.PrivateArguments)">
            <summary>
            Adds the common optional arguments.	
            </summary>
            <param name="builder">The builder.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Vault3.GetVaultWorkingFolder(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            When getting by label, the vault command-line client requires a disk path even if you're retrieving
            into a working folder.  This retrieves that working path so we can specify it in the get command.  We also
            need to know the working directory before we retrieve source if we're going to clean it out, when cleanCopy is true.
            Returns true if a working folder was found and WorkingDirectory was set, false if not.
            </summary>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Vault3.ExecuteWithRetries(ThoughtWorks.CruiseControl.Core.Util.ProcessInfo)">
            <summary>
            Will execute the provided process and retry according to the configured pollRetryAttempts and pollRetryWait settings.  Use
            with caution because we can't precisely catch only certain failures because we're using the command-line client.  Intended
            to be used when polling for changes to better handle intermittent network issues or Vault server contention.
            </summary>
            <param name="processInfo"></param>
            <returns></returns>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Vault3.VaultException">
            <summary>
            	
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Vault3.VaultException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Vault3.VaultException"/> class.	
            </summary>
            <param name="message">The message.</param>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Vault317">
            <summary>
            Integrates with Vault 3.1.7 or later.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Vault317.#ctor(ThoughtWorks.CruiseControl.Core.Sourcecontrol.VaultVersionChecker)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Vault317"/> class.	
            </summary>
            <param name="versionCheckerShim">The version checker shim.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Vault317.#ctor(ThoughtWorks.CruiseControl.Core.Sourcecontrol.VaultVersionChecker,ThoughtWorks.CruiseControl.Core.Sourcecontrol.IHistoryParser,ThoughtWorks.CruiseControl.Core.Util.ProcessExecutor)">
            <summary>
            Called only by the unit tests, sets up as appropriate.
            </summary>
            <param name="versionCheckerShim"></param>
            <param name="historyParser"></param>
            <param name="executor"></param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Vault317.GetModifications(ThoughtWorks.CruiseControl.Core.IIntegrationResult,ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Gets the modifications.	
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Vault317.GetSource(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Gets the source.	
            </summary>
            <param name="result">The result.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Vault317.LabelSourceControl(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Labels the source control.	
            </summary>
            <param name="result">The result.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Vault317.GetFolderVersion(ThoughtWorks.CruiseControl.Core.IIntegrationResult,ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Gets the most recent folder version via Vault's versionhistory command.
            
            If we don't yet have a folder version, we need to get one so getSource and LabelSource have a version to work with,
            whether there's been changes or not.  (On a forced build or a multi-source control setup, we might get and/or label
            when there's been no change.)
            
            So if we have no folder version, we get the latest version of the folder via Vault's versionhistory command and see
            if the timestamp on that folder is more recent than the last build.  If we already have a folder version, we simply
            ask Vault to give us the most recent folder version after then one we already know about.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.VaultHistoryParser">
            <summary>
            	
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.VaultHistoryParser.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.VaultHistoryParser"/> class.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.VaultHistoryParser.#ctor(System.Globalization.CultureInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.VaultHistoryParser"/> class.	
            </summary>
            <param name="culture">The culture.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.VaultHistoryParser.Parse(System.IO.TextReader,System.DateTime,System.DateTime)">
            <summary>
            Parses the specified history.	
            </summary>
            <param name="history">The history.</param>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.VaultHistoryParser.ExtractXmlFromHistory(System.IO.TextReader)">
            <summary>
            The Vault command line client (vault.exe), at least for
            version 2.0.4, is not guaranteed to output valid XML in
            that there may be some not XML output surrounding the XML.
            This method strips away any non-XML	output surrounding
            the &lt;vault&gt;...&lt;/vault&gt; elements.
            </summary>
            <param name="history">Output from Vault client is read from this reader.</param>
            <returns>string containing only the XML output from the Vault client.</returns>
            <exception cref="T:ThoughtWorks.CruiseControl.Core.CruiseControlException">The <vault> start element or </vault> end element cannot be found.</exception>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.VaultVersionChecker">
            <summary>
            SourceGear Vault Source Control Block.
            </summary>
            <title>SourceGear Vault Source Control Block</title>
            <version>1.0</version>
            <key name="type">
            <description>The type of source control block.</description>
            <value>vault</value>
            </key>
            <example>
            <code title="Minimal example">
            &lt;sourcecontrol type="vault" /&gt;
            </code>
            <code title="Full example">
            &lt;sourcecontrol type="vault" autoGetSource="true" applyLabel="true"&gt;
            &lt;executable&gt;c:\program files\sourcegear\vault client\vault.exe&lt;/executable&gt;
            &lt;username&gt;my_username&lt;/username&gt;
            &lt;password&gt;my_password&lt;/password&gt;
            &lt;host&gt;my_buildserver&lt;/host&gt;
            &lt;repository&gt;my_repository&lt;/repository&gt;
            &lt;folder&gt;$&lt;/folder&gt;
            &lt;ssl&gt;true&lt;/ssl&gt;
            &lt;timeout units="minutes"&gt;10&lt;/timeout&gt;
            &lt;useWorkingDirectory&gt;true&lt;/useWorkingDirectory&gt;
            &lt;workingDirectory&gt;project/src&lt;/workingDirectory&gt;
            &lt;/sourcecontrol&gt;
            </code>
            </example>
            <remarks>
            <heading>Plugin available for Vault 4.1+ (or Fortress 1.1+)</heading>
            <para>
            SourceGear has released a plugin that offers better performance and accuracy by interacting directly with Vault
            via its API, rather than the command line. The configuration format is almost identical to this one, making
            migration easy. The plugin and its documentation can be downloaded from SourceGear's site
            (http://www.sourcegear.com/downloads.html).
            </para>
            <heading>Vault Working Folder Defined</heading>
            <para>
            Most version control systems have distinct commands for "get me the source" and "get me the source into a folder
            where I may make changes." Vault is no exception. A working folder is a folder where Vault will keep track of
            your changes. If you're using CC.NET 1.1.0.2172+, the useWorkingFolder setting determines whether Vault
            retrieves source into a working folder. For build purposes, there are typically two situations where you want to
            retrieve source into a working folder:
            </para>
            <para>
            1. Your build script changes source and checks in the change
            </para>
            <para>
            2. It's taking longer than you'd like to retrieve the source
            </para>
            <para>
            Because of the additional state information kept by Vault for working folders, retrieving source into a working
            folder is usually faster than into a non-working folder. The trade-off is that more disk space will be used for
            cache and state data.
            </para>
            <heading>Filtering out Label Changes</heading>
            <para>
            If you are using Vault 3.x or later, labels will automatically be filtered. However, if you are using an earlier
            version of Vault and you apply a label as part of your build process, this will kick off another build. you will
            need to use a <link>Filtered Source Control Block</link> to get around this. If your build server uses a
            specific user id to integrate with Vault, you can set up a UserFilter to filter out all changes made by that 
            user.
            </para>
            <heading>Problems with CCService and Vault 3.0.2+</heading>
            <para>
            If you are experiencing problems detecting modifications using CCService after upgrading to Vault 3.0.2, it may
            be related to the enhanced security features of the Vault server. You should try the following process to fix
            this issue:
            </para>
            <para>
            1. reinstall the Vault Server to have the IIS Process Model run as System (ie. not Machine)
            </para>
            <para>
            2. change the CCService to run as an actual user, not as LocalSystem.
            </para>
            <heading>Problems with releases prior to Vault 3.0</heading>
            <para>
            For versions of Vault prior to 3.0, the -excludeactions argument is not supported. To get around this problem
            you should explicitly specify the &lt;historyArgs&gt; element in your ccnet.config file so that it does not
            contain that argument (ie. set it to &lt;historyArgs&gt;-rowlimit 0&lt;/historyArgs&gt;.
            </para>
            <heading>NAnt Vault Tasks</heading>
            <para>
            SourceGear has produced some NAnt tasks for Vault that can be downloaded from
            http://www.sourcegear.com/vault/downloads.html.
            </para>
            <heading>Turning off the creation of _sgbak folders</heading>
            <para>
            Using CC.NET 1.1.0.2172+ and Vault 3.1.7+, _sgbak folders are never created.
            </para>
            <para>
            Using older versions, the use of the _sgbak folder can be turned off using the GUI client. This is a user and
            machine-specific setting, so you need to launch the GUI client on the CCNet machine and log in as the same Vault
            user that CCNet is using (as specified it ccnet.config).
            </para>
            <para>
            Tools|Options -&gt; Local Files -&gt; Cache/Backup Locations -&gt; Un-check "Save files in backup folder before
            overwriting"
            </para>
            <heading>Contributions</heading>
            <para>
            Code contributed by Ryan Duffield, Leo von Wyss and Ian Olsen.
            </para>
            </remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.VaultVersionChecker.DefaultExecutable">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.VaultVersionChecker.DefaultHistoryArgs">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.VaultVersionChecker.DefaultFolder">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.VaultVersionChecker.DefaultFileTime">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.VaultVersionChecker.DefaultPollRetryWait">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.VaultVersionChecker.DefaultPollRetryAttempts">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.VaultVersionChecker.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.VaultVersionChecker"/> class.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.VaultVersionChecker.#ctor(ThoughtWorks.CruiseControl.Core.Sourcecontrol.IHistoryParser,ThoughtWorks.CruiseControl.Core.Util.ProcessExecutor,ThoughtWorks.CruiseControl.Core.Sourcecontrol.VaultVersionChecker.EForcedVaultVersion)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.VaultVersionChecker"/> class.	
            </summary>
            <param name="historyParser">The history parser.</param>
            <param name="executor">The executor.</param>
            <param name="forceVersion">The force version.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.VaultVersionChecker.Initialize(ThoughtWorks.CruiseControl.Core.IProject)">
            <summary>
            Initializes the specified project.	
            </summary>
            <param name="project">The project.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.VaultVersionChecker.GetModifications(ThoughtWorks.CruiseControl.Core.IIntegrationResult,ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Gets the modifications.	
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.VaultVersionChecker.LabelSourceControl(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Labels the source control.	
            </summary>
            <param name="result">The result.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.VaultVersionChecker.GetSource(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Gets the source.	
            </summary>
            <param name="result">The result.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.VaultVersionChecker.Purge(ThoughtWorks.CruiseControl.Core.IProject)">
            <summary>
            Purges the specified project.	
            </summary>
            <param name="project">The project.</param>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.VaultVersionChecker.Username">
            <summary>
            Vault user id that CCNet should use to authenticate.
            </summary>
            <version>1.0</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.VaultVersionChecker.Password">
            <summary>
            Password for the Vault user.
            </summary>
            <version>1.0</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.VaultVersionChecker.Host">
            <summary>
            The name of the Vault server.
            </summary>
            <version>1.0</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.VaultVersionChecker.Repository">
            <summary>
            The name of the Vault repository to monitor. .
            </summary>
            <version>1.0</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.VaultVersionChecker.Folder">
            <summary>
            The root folder to be monitored by CCNet.
            </summary>
            <version>1.0</version>
            <default>$</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.VaultVersionChecker.Executable">
            <summary>
            The location of the Vault command-line executable.
            </summary>
            <version>1.0</version>
            <default>C:\Program Files\SourceGear\Vault Client\vault.exe</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.VaultVersionChecker.Ssl">
            <summary>
            Should SSL be used to communicate with the Vault server.
            </summary>
            <version>1.0</version>
            <default>false</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.VaultVersionChecker.AutoGetSource">
            <summary>
            Specifies if CCNet should automatically retrieve the latest version of the source from the repository.
            </summary>
            <version>1.0</version>
            <default>true</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.VaultVersionChecker.ApplyLabel">
            <summary>
            Specifies if CCNet should apply the build label to the repository.
            </summary>
            <version>1.0</version>
            <default>false</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.VaultVersionChecker.HistoryArgs">
            <summary>
            Extra arguments to be included in the history commandline.
            </summary>
            <version>1.0</version>
            <default>-excludeactions label,obliterate -rowlimit 0</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.VaultVersionChecker.Timeout">
            <summary>
            Sets the timeout period for the source control operation.
            </summary>
            <version>1.0</version>
            <default>10 minutes</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.VaultVersionChecker.UseVaultWorkingDirectory">
            <summary>
            <b>CC.NET 1.0</b>: Determines the working directory into which Vault files will be retrieved. Supply true if
            you want CCNet to use the Vault folder working directory created for the build user using the Vault GUI
            (recommended). Supply false if CCNet should use the CCNet working directory.
            <b>CC.NET 1.1</b>: Determines if the source will be retrieved into a Vault Working Folder. 
            </summary>
            <version>1.0</version>
            <default>true</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.VaultVersionChecker.WorkingDirectory">
            <summary>
            The root folder where the latest source will retrieved from Vault. This path can either be absolute or it
            can be relative to the CCNet project working directory.
            </summary>
            <version>1.0</version>
            <default>Project Working Directory</default>
            <remarks>
            <b>CC.NET 1.1</b>: If this element is missing or empty, Vault will attempt to use the directory set as the
            user's working folder. Note that this is simply the destination path on disk. Whether or not this location
            is a Vault Working Folder is determined by the useWorkingFolder element. To use the same path as the 
            project, it is necessary to use "." (without the quotes) rather than leaving this empty, as you could in 
            CC.NET 1.0.
            </remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.VaultVersionChecker.setFileTime">
            <summary>
            The modification date that retrieved source files will have. 
            </summary>
            <version>1.0</version>
            <default>checkin</default>
            <remarks>
            Must be one of:
            *  checkin - the date/time the file was checked in
            * current - the date/time the file was retrieved from Vault
            * modification - the date/time the file was last modified
            </remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.VaultVersionChecker.CleanCopy">
            <summary>
            If true, the source path will be emptied before retrieving new source. 
            </summary>
            <version>1.0</version>
            <default>false</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.VaultVersionChecker.proxyServer">
            <summary>
            The host name of the HTTP proxy Vault should use. 
            </summary>
            <version>1.0</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.VaultVersionChecker.proxyPort">
            <summary>
            The port on the HTTP proxy Vault should use. 
            </summary>
            <version>1.0</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.VaultVersionChecker.proxyUser">
            <summary>
            The user name for the HTTP proxy Vault should use. 
            </summary>
            <version>1.0</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.VaultVersionChecker.proxyPassword">
            <summary>
            The password for the HTTP proxy Vault should use. 
            </summary>
            <version>1.0</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.VaultVersionChecker.proxyDomain">
            <summary>
            The Windows domain of the HTTP proxy Vault should use.  
            </summary>
            <version>1.0</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.VaultVersionChecker.otherVaultArguments">
            <summary>
            Any other aruuments to pass into the executable.
            </summary>
            <version>1.0</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.VaultVersionChecker.pollRetryWait">
            <summary>
            The number of seconds to wait between retries when a check for modifications fails. 
            </summary>
            <version>1.0</version>
            <default>5</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.VaultVersionChecker.pollRetryAttempts">
            <summary>
            The number of automatic retries when failing to check for modifications before an exception is thrown. 
            </summary>
            <version>1.0</version>
            <default>5</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.VaultVersionChecker.VaultSourceControl">
            <summary>
            Gets the vault source control.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.VaultVersionChecker.EForcedVaultVersion">
            <summary>
            	
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.VaultVersionChecker.EForcedVaultVersion.None">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.VaultVersionChecker.EForcedVaultVersion.Vault3">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.VaultVersionChecker.EForcedVaultVersion.Vault317">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.ViewCVSUrlBuilder">
            <summary>
            Generates a URL for ViewCVS.
            </summary>
            <title>ViewCVS URL Builder</title>
            <version>1.0</version>
            <example>
            <code>
            &lt;issueUrlBuilder type="defaultIssueTracker"&gt;
            &lt;url&gt;http://jira.public.thoughtworks.org/browse/CCNET-{0}&lt;/url&gt;
            &lt;/issueUrlBuilder&gt;
            </code>
            </example>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.ViewCVSUrlBuilder.SetupModification(ThoughtWorks.CruiseControl.Core.Modification[])">
            <summary>
            Setups the modification.	
            </summary>
            <param name="modifications">The modifications.</param>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.ViewCVSUrlBuilder.Url">
            <summary>
            The base URL.
            </summary>
            <version>1.0</version>
            <default>n/a</default>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Vss">
            <summary>
            For Visual Source Safe you must specify the executable, project, username and password. You may also specify the SSDIR. If SSDIR is
            not set the default or the SSDIR environment variable will be used.
            </summary>
            <title>VSS Configuration Example</title>
            <version>1.0</version>
            <example>
            <code title="Minimal example">
            &lt;sourcecontrol type="vss" /&gt;
            </code>
            <code title="Full example">
            &lt;sourcecontrol type="vss"&gt;
            &lt;executable&gt;C:\Program Files\Microsoft Visual Studio\VSS\win32\SS.EXE&lt;/executable&gt;
            &lt;project&gt;$/CCNET&lt;/project&gt;
            &lt;username&gt;buildguy&lt;/username&gt;
            &lt;password&gt;buildguypw&lt;/password&gt;
            &lt;ssdir&gt;c:\repos\&lt;/ssdir&gt;
            &lt;applyLabel&gt;false&lt;/applyLabel&gt;
            &lt;autoGetSource&gt;true&lt;/autoGetSource&gt;
            &lt;alwaysGetLatest&gt;false&lt;/alwaysGetLatest&gt;
            &lt;workingDirectory&gt;c:\myBuild&lt;/workingDirectory&gt;
            &lt;culture&gt;fr-FR&lt;/culture&gt;
            &lt;cleanCopy&gt;false&lt;/cleanCopy&gt;
            &lt;timeout units="minutes"&gt;10&lt;/timeout&gt;
            &lt;/sourcecontrol&gt;
            </code>
            </example>
            <key name="type">
            <description>The type of source control block.</description>
            <value>vss</value>
            </key>
            <remarks>
            <heading>Getting the latest source with VSS</heading>
            <para>
            VSS does not automatically remove files from the local workspace that have been deleted from the VSS database. This does not cause a
            problem if you are using the &lt;solution&gt; task or the <link>Visual Studio Task</link> to compile your project. However, if you are
            packaging the source for deployment or if you are using the &lt;csc&gt; task to produce a custom build, you may end up compiling these
            deleted files in your assembly. To be on the safe side, it might be a good idea to clear the contents of the local workspace after each
            build.
            </para>
            <heading>Using a US English VSS in a non-English culture</heading>
            <para>
            If you use an English VSS with machines configured to use a non-English culture, it may happen that CCNet will not detect any
            modifications after you check-in some code. The reason for this behaviour is that CCNet uses the selected culture on the build server
            to determine the language it expects VSS will output for parsing. For example, with fr-CA, CCNet looks for French keywords in the VSS
            output. Hence, if your VSS installation does not use the same language, CCNET will not be able to detect any modification.
            </para>
            <para>
            If you're using a US VSS installation, the first step in solving this problem is to include a configuration block set to the US english
            culture (&lt;culture&gt;en-US&lt;/culture&gt;). This will make CCNet look for English VSS keywords, and eventually detect
            modifications.
            </para>
            <heading>VSS Issues</heading>
            <b>
            CCNet periodically reports the following error when connecting to VSS: "Unable to open user login file 
            \SourceSafe\Vss60\data\loggedin\&lt;userid&gt;.log." What gives?
            </b>
            <para>
            If you have set CCNet up to manage multiple projects that all connect to the VSS repository using the same user id then you may
            sporadically receive this failure. Our analysis suggests that the root of the problem is caused by the fact that VSS will create the
            &lt;userid&gt;.log file when a user logs into VSS and delete it when the user logs out again. If a second build is using the repository
            concurrently with the same user, when that second build logs out it looks for &lt;userid&gt;.log, but it's gone. Hence the error.
            </para>
            <para>
            There are three approaches that you can take to deal with this:
            </para>
            <list type="1">
            <item>Log into VSS using different users for each CCNet project.</item>
            <item>You can keep CCNet from publishing exceptions , so this exception will just get logged into the ccnet.log file.</item>
            <item>Leave the VSS GUI open on the integration server. This will mean the userid.log file never gets deleted.</item>
            </list>
            <para></para>
            <para></para>
            <b>
            If you're using a labeller that returns a label equal to one already applied in the repository, the old label will be deleted when the
            new one is added.
            </b>
            <para>
            This is because of a quirk in how VSS deals with labels of the same name; it should not be a problem with the default labeller.
            </para>
            <para>
            This problem usually occurs when someone is using a custom labeller (a class that implements ILabeller) and that custom labeller returns
            a constant value.
            </para>
            <para>
            Workaround: If you use a custom labeller, make sure each label is unique.
            </para>
            <b>
            When I try to connect to use the &lt;vss&gt; NAntContrib tasks from <link>The Server Service Application</link> I get this error: 
            Failed to open database \\someserver\someshare\vssrep\srcsafe.ini
            </b>
            <para>
            There are a number of known issues with SourceSafe 6.0c. Make sure that you upgrade to the 6.0d version.
            </para>
            <b>
            When I try connecting to VSS when using <link>The Server Service Application</link> I get the error: No VSS database (srcsafe.ini)
            found. Use the SSDIR environment variable or run netsetup.
            </b>
            <para>
            Make sure that you are running ccservice using an account that has the necessary permissions to access the network share where your VSS
            database is set up. By default ccservice will run as the LocalSystem account, which does not have the necessary priviledges to access
            other machines.
            </para>
            <b>
            When using VSS with a <link>Filtered Source Control</link> Block, newly added or removed files don't show up as modifications
            </b>
            <para>
            VSS does not output the paths for added or deleted files. As a result, the modifications returned by CCNet do not have any specified
            path information. If a Filtered Source Control Block is used with a path filter then these modifications are likely to be filtered out.
            This is an outstanding issue.
            </para>
            <heading>Useful links</heading>
            <list type="1">
            <item>Visual SourceSafe Best Practices Guide - http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dnvss/html/vssbest.asp</item>
            <item>Using VSS With Multiple Timezones - http://support.microsoft.com/default.aspx?scid=kb;en-us;248240&amp;Product=vss</item>
            <item>OLE Automation interface Get method behaves differently with VSSVersion and with VSSItem - http://support.microsoft.com/default.aspx?scid=kb;en-us;837417</item>
            </list>
            </remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Vss.DefaultProject">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Vss.SS_DIR_KEY">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Vss.SS_REGISTRY_PATH">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Vss.SS_REGISTRY_KEY">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Vss.SS_EXE">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Vss.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Vss"/> class.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Vss.#ctor(ThoughtWorks.CruiseControl.Core.Sourcecontrol.IVssLocale,ThoughtWorks.CruiseControl.Core.Sourcecontrol.IHistoryParser,ThoughtWorks.CruiseControl.Core.Util.ProcessExecutor,ThoughtWorks.CruiseControl.Core.Util.IRegistry)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Vss"/> class.	
            </summary>
            <param name="locale">The locale.</param>
            <param name="historyParser">The history parser.</param>
            <param name="executor">The executor.</param>
            <param name="registry">The registry.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Vss.GetModifications(ThoughtWorks.CruiseControl.Core.IIntegrationResult,ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Gets the modifications.	
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Vss.GetModifications(ThoughtWorks.CruiseControl.Core.IIntegrationResult,ThoughtWorks.CruiseControl.Core.IIntegrationResult,System.String)">
            <summary>
            This method exists only to allow the VssTest unit tests to supply an expected output filename.
            DO NOT use this method for normal processing, use <see cref="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Vss.GetModifications(ThoughtWorks.CruiseControl.Core.IIntegrationResult,ThoughtWorks.CruiseControl.Core.IIntegrationResult)"/>
            instead
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Vss.LabelSourceControl(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Labels the source control.	
            </summary>
            <param name="result">The result.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Vss.GetSource(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Gets the source.	
            </summary>
            <param name="result">The result.</param>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Vss.Executable">
            <summary>
            The location of SS.EXE. If VSS is installed on the integration server, the location of VSS will be read from the registry and this
            element may be omitted.
            </summary>
            <version>1.0</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Vss.Project">
            <summary>
            The project in the repository to be monitored. 
            </summary>
            <version>1.0</version>
            <default>$/</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Vss.Username">
            <summary>
            VSS user ID that CCNet should use to authenticate. If the username is unspecified, the VSS client will attempt to authenticate
            using the NT user.
            </summary>
            <version>1.0</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Vss.Password">
            <summary>
            Password for the VSS user ID.
            </summary>
            <version>1.0</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Vss.SsDir">
            <summary>
            The directory containing SRCSAFE.INI. If this SSDIR environment variable is already set then this property may be omitted. 
            </summary>
            <version>1.0</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Vss.ApplyLabel">
            <summary>
            Specifies whether the current CCNet label should be applied to all source files under the current project in VSS.
            </summary>
            <version>1.0</version>
            <default>false</default>
            <remarks>
            The specified VSS username must have write access to the repository.
            </remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Vss.AutoGetSource">
            <summary>
            Specifies whether the current version of the source should be retrieved from VSS.
            </summary>
            <version>1.0</version>
            <default>true</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Vss.AlwaysGetLatest">
            <summary>
            Specifies whether the most recent version of the source should be retrieved from VSS. If not, CCNet will obtain the source as of
            the time the build began.
            </summary>
            <version>1.0</version>
            <default>false</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Vss.WorkingDirectory">
            <summary>
            The folder into which the source should be retrived from VSS. If this folder does not exist, it will be automatically created.
            </summary>
            <version>1.0</version>
            <default>Project Working Directory</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Vss.Culture">
            <summary>
            The culture under which VSS is running. This value must match the culture of the VSS installation for CCNet to work with VSS. Most
            of the time the default is OK and you may omit this item. If you are using the US version of VSS on a machine that is not set to
            the US culture, you should include the configuration block &lt;culture&gt;en-US&lt;/culture&gt;.
            </summary>
            <version>1.0</version>
            <default>The culture of the VSS installation</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Vss.CleanCopy">
            <summary>
            Controls whether or not VSS gets a clean copy (overwrites modified files) when getting the latest source. 
            </summary>
            <version>1.0</version>
            <default>true</default>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.VssHistoryParser">
            <summary>
            	
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.VssHistoryParser.#ctor(ThoughtWorks.CruiseControl.Core.Sourcecontrol.IVssLocale)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.VssHistoryParser"/> class.	
            </summary>
            <param name="locale">The locale.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.VssHistoryParser.Parse(System.IO.TextReader,System.DateTime,System.DateTime)">
            <summary>
            Parses the specified history.	
            </summary>
            <param name="history">The history.</param>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.VssHistoryParser.ParseModifications(System.String[])">
            <summary>
            Parses the modifications.	
            </summary>
            <param name="entries">The entries.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.VssHistoryParser.ReadAllEntries(System.IO.TextReader)">
            <summary>
            Reads all entries.	
            </summary>
            <param name="history">The history.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.VssHistoryParser.IsEntryDelimiter(System.String)">
            <summary>
            Determines whether [is entry delimiter] [the specified line].	
            </summary>
            <param name="line">The line.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.VssHistoryParser.Locale">
            <summary>
            Gets or sets the locale.	
            </summary>
            <value>The locale.</value>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.VSSParser">
            <summary>
            	
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.VSSParser.entry">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Sourcecontrol.VSSParser.locale">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.VSSParser.#ctor(System.String,ThoughtWorks.CruiseControl.Core.Sourcecontrol.IVssLocale)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.VSSParser"/> class.	
            </summary>
            <param name="entry">The entry.</param>
            <param name="locale">The locale.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.VSSParser.Parse">
            <summary>
            Parses this instance.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.VSSParser.ParseFileName">
            <summary>
            Parses the name of the file.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.VSSParser.ParseUsernameAndDate(ThoughtWorks.CruiseControl.Core.Modification)">
            <summary>
            Parses the username and date.	
            </summary>
            <param name="mod">The mod.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.VSSParser.ParseComment(ThoughtWorks.CruiseControl.Core.Modification)">
            <summary>
            Parses the comment.	
            </summary>
            <param name="mod">The mod.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.VSSParser.ParseFolderName">
            <summary>
            Parses the name of the folder.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.VSSParser.ParseFileNameOther">
            <summary>
            Parses the file name other.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.VSSParser.ParseFirstLineName">
            <summary>
            Parses the first name of the line.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.VSSParser.Keyword">
            <summary>
            Gets the keyword.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.CheckInParser">
            <summary>
            	
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.CheckInParser.#ctor(System.String,ThoughtWorks.CruiseControl.Core.Sourcecontrol.IVssLocale)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.CheckInParser"/> class.	
            </summary>
            <param name="entry">The entry.</param>
            <param name="locale">The locale.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.CheckInParser.ParseFileName">
            <summary>
            Parses the name of the file.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.CheckInParser.Keyword">
            <summary>
            Gets the keyword.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.AddedParser">
            <summary>
            	
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.AddedParser.#ctor(System.String,ThoughtWorks.CruiseControl.Core.Sourcecontrol.IVssLocale)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.AddedParser"/> class.	
            </summary>
            <param name="entry">The entry.</param>
            <param name="locale">The locale.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.AddedParser.Parse">
            <summary>
            Parses this instance.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.AddedParser.ParseFileName">
            <summary>
            Parses the name of the file.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.AddedParser.ParseFolderName">
            <summary>
            Parses the name of the folder.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.AddedParser.Keyword">
            <summary>
            Gets the keyword.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.DeletedParser">
            <summary>
            	
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.DeletedParser.#ctor(System.String,ThoughtWorks.CruiseControl.Core.Sourcecontrol.IVssLocale)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.DeletedParser"/> class.	
            </summary>
            <param name="entry">The entry.</param>
            <param name="locale">The locale.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.DeletedParser.ParseFileName">
            <summary>
            Parses the name of the file.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.DeletedParser.ParseFolderName">
            <summary>
            Parses the name of the folder.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.DeletedParser.Keyword">
            <summary>
            Gets the keyword.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.DestroyedParser">
            <summary>
            	
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.DestroyedParser.#ctor(System.String,ThoughtWorks.CruiseControl.Core.Sourcecontrol.IVssLocale)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.DestroyedParser"/> class.	
            </summary>
            <param name="entry">The entry.</param>
            <param name="locale">The locale.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.DestroyedParser.ParseFileName">
            <summary>
            Parses the name of the file.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.DestroyedParser.ParseFolderName">
            <summary>
            Parses the name of the folder.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.DestroyedParser.Keyword">
            <summary>
            Gets the keyword.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.NullParser">
            <summary>
            	
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.NullParser.#ctor(System.String,ThoughtWorks.CruiseControl.Core.Sourcecontrol.IVssLocale)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.NullParser"/> class.	
            </summary>
            <param name="entry">The entry.</param>
            <param name="locale">The locale.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.NullParser.Parse">
            <summary>
            Parses this instance.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.NullParser.ParseFileName">
            <summary>
            Parses the name of the file.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.NullParser.Keyword">
            <summary>
            Gets the keyword.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.VssLocale">
            <summary>
            VssLocale takes responsibility for handling locale-specific parsing of dates and keywords produced by the VSS client (ss.exe)
            Keywords are output in the locale of the server and dates are output in the locale of the client, which is, in this case, 
            the current culture for the build server.  Generally these two locales will be the same; however, if they are different, users
            can specify the server locale using the Vss.Culture property.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.VssLocale.#ctor(System.Globalization.CultureInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.VssLocale"/> class.	
            </summary>
            <param name="cultureInfo">The culture info.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.VssLocale.ParseDateTime(System.String,System.String)">
            <summary>
            Parses the date time.	
            </summary>
            <param name="date">The date.</param>
            <param name="time">The time.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.VssLocale.FormatCommandDate(System.DateTime)">
            <summary>
            Format the date in a format appropriate for the VSS command-line.  The date should not contain any spaces as VSS would treat it as a separate argument.
            The trailing 'M' in 'AM' or 'PM' is also removed.
            </summary>
            <param name="date"></param>
            <returns>Date string formatted for the specified locale as expected by the VSS command-line.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.VssLocale.ToString">
            <summary>
            Toes the string.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.VssLocale.Equals(System.Object)">
            <summary>
            Equalses the specified obj.	
            </summary>
            <param name="obj">The obj.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.VssLocale.GetHashCode">
            <summary>
            Gets the hash code.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.VssLocale.CommentKeyword">
            <summary>
            Gets the comment keyword.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.VssLocale.CheckedInKeyword">
            <summary>
            Gets the checked in keyword.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.VssLocale.AddedKeyword">
            <summary>
            Gets the added keyword.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.VssLocale.DeletedKeyword">
            <summary>
            Gets the deleted keyword.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.VssLocale.DestroyedKeyword">
            <summary>
            Gets the destroyed keyword.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.VssLocale.UserKeyword">
            <summary>
            Gets the user keyword.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.VssLocale.DateKeyword">
            <summary>
            Gets the date keyword.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.VssLocale.TimeKeyword">
            <summary>
            Gets the time keyword.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.VssLocale.ServerCulture">
            <summary>
            Gets or sets the server culture.	
            </summary>
            <value>The server culture.</value>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Vsts">
            <summary>
              Source Control Plugin for CruiseControl.NET that talks to VSTS Team Foundation Server.
            </summary>
            <title>VSTS Team Foundation Server Source Control Block</title>
            <version>1.5</version>
            <key name="type">
            <description>The type of source control block.</description>
            <value>vsts</value>
            </key>
            <example>
            <code>
            &lt;sourcecontrol type="vsts"&gt;
            &lt;server&gt;http://vstsb2:8080&lt;/server&gt;
            &lt;project&gt;$\VSTSPlugins&lt;/project&gt;
            &lt;/sourcecontrol&gt;
            </code>
            </example>
            <remarks>
            There is an alternate plug-in which uses the Team Foundation assemblies directly (<link>Visual Studio Team 
            Foundation Server Plugin</link>).
            </remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Vsts.#ctor(ThoughtWorks.CruiseControl.Core.Util.ProcessExecutor,ThoughtWorks.CruiseControl.Core.Sourcecontrol.IHistoryParser,ThoughtWorks.CruiseControl.Core.Util.IRegistry)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Vsts"/> class.	
            </summary>
            <param name="executor">The executor.</param>
            <param name="parser">The parser.</param>
            <param name="registry">The registry.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Vsts.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Vsts"/> class.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Vsts.GetModifications(ThoughtWorks.CruiseControl.Core.IIntegrationResult,ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Gets the modifications.	
            </summary>
            <param name="from">From.</param>
            <param name="to">To.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Vsts.LabelSourceControl(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Labels the source control.	
            </summary>
            <param name="result">The result.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Vsts.GetSource(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Gets the source.	
            </summary>
            <param name="result">The result.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Vsts.LookForErrorReturns(ThoughtWorks.CruiseControl.Core.Util.ProcessResult)">
            <summary>
              Makes sure we fail a build when TFS throws errors back
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Vsts.DeleteDirectory(System.String)">
            <summary>
              Delete a directory, even if it contains readonly files.
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Vsts.Server">
            <summary>
            The name or URL of the team foundation server.  For example http://vstsb2:8080 or vstsb2 if it has already 
            been registered on the machine.
            </summary>
            <version>1.5</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Vsts.Executable">
            <summary>
            The path to the executable
            </summary>
            <version>1.5</version>
            <default>From registry</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Vsts.ProjectPath">
            <summary>
            The path to the project in source control, for example $\VSTSPlugins
            </summary>
            <version>1.5</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Vsts.ApplyLabel">
            <summary>
            Whether this repository should be labeled.
            </summary>
            <version>1.5</version>
            <default>false</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Vsts.AutoGetSource">
            <summary>
            Whether to automatically get the source.
            </summary>
            <version>1.5</version>
            <default>falsea</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Vsts.Username">
            <summary>
            Username that should be used.  Domain cannot be placed here, rather in domain property.
            </summary>
            <version>1.5</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Vsts.Password">
            <summary>
            The password in clear text of the domain user to be used.
            </summary>
            <version>1.5</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Vsts.Domain">
            <summary>
             The domain of the user to be used.
            </summary>
            <version>1.5</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Vsts.WorkingDirectory">
            <summary>
            The working directory to use.
            </summary>
            <version>1.5</version>
            <default>Project Working Directory</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Vsts.CleanCopy">
            <summary>
            Whether to do a clean copy.
            </summary>
            <version>1.5</version>
            <default>false</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Vsts.Force">
            <summary>
            Whether to force or not.
            </summary>
            <version>1.5</version>
            <default>false</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Vsts.Workspace">
            <summary>
            Name of the workspace to create.  This will revert to the DEFAULT_WORKSPACE_NAME if not passed.
            </summary>
            <version>1.5</version>
            <default>CCNET</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Vsts.DeleteWorkspace">
            <summary>
            Flag indicating if workspace should be deleted every time or if it should be left (the default).  Leaving
            the workspace will mean that subsequent gets will only need to transfer the modified files, improving
            performance considerably.
            </summary>
            <version>1.5</version>
            <default>false</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.Vsts.CodePage">
            <summary>
            Encoding Code page to use for communicating with TFS
            </summary>
            <version>1.6</version>
            <default>Empty String, will default to UTF-8 encoding</default>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.VstsHistoryParser">
            <summary>
            Parser for output from the TFS Server
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.VstsHistoryParser.Parse(System.IO.TextReader,System.DateTime,System.DateTime)">
            <summary>
            Parse the output from a TFS History check <see cref="T:ThoughtWorks.CruiseControl.Core.Modification"/>s.
            </summary>
            <param name="vstsLog">The output of the "TF History command.</param>
            <param name="from">The starting timestamp.</param>
            <param name="to">The ending timestamp.</param>
            <returns>A list of modifications between the two timestamps, possibly empty.</returns>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Sourcecontrol.WebSVNUrlBuilder">
            <summary>
            Generates a URL for WebSVN.
            </summary>
            <title>WebSVN URL Builder</title>
            <version>1.4</version>
            <example>
            <code>
            &lt;issueUrlBuilder type="websvn"&gt;
            &lt;url&gt;http://jira.public.thoughtworks.org/browse/CCNET-{0}&lt;/url&gt;
            &lt;/issueUrlBuilder&gt;
            </code>
            </example>
            <key name="type">
            <description>The type of URL builder.</description>
            <value>websvn</value>
            </key>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Sourcecontrol.WebSVNUrlBuilder.SetupModification(ThoughtWorks.CruiseControl.Core.Modification[])">
            <summary>
            Setups the modification.	
            </summary>
            <param name="modifications">The modifications.</param>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Sourcecontrol.WebSVNUrlBuilder.Url">
            <summary>
            The base URL.
            </summary>
            <version>1.4</version>
            <default>n/a</default>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.State.FileStateManager">
            <summary>
            The File State Manager is a State Manager that saves the state for one project to a file. The 
            filename should be stored in either the working directory for the project or in the explicitly
            specified directory. The filename will match the project name, but will have the extension .state.
            </summary>
            <title>File State Manager</title>
            <version>1.0</version>
            <example>
            <code title="Minimalist example">
            &lt;state type="state" /&gt;
            </code>
            <code title="Full example">
            &lt;state type="state" directory="C:\CCNetState" /&gt;
            </code>
            </example>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.State.IStateManager">
            <summary>
            Manages the state of continuous integration for a single project.
            State must be persisted between shutdown/startup of the CruiseControl.NET
            server, as modification dates and label numbers must follow sequence.
            </summary>
            <title>State Manager Blocks</title>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.State.IStateManager.LoadState(System.String)">
            <summary>
            Loads the state of the project.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.State.IStateManager.SaveState(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Persists the state of the project.
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.State.IStateManager.HasPreviousState(System.String)">
            <summary>
            Determines whether [has previous state] [the specified project].	
            </summary>
            <param name="project">The project.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.State.FileStateManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.State.FileStateManager"/> class.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.State.FileStateManager.#ctor(ThoughtWorks.CruiseControl.Core.Util.IFileSystem,ThoughtWorks.CruiseControl.Core.Util.IExecutionEnvironment)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.State.FileStateManager"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="executionEnvironment">The execution environment.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.State.FileStateManager.HasPreviousState(System.String)">
            <summary>
            Determines whether the project has previous state.
            </summary>
            <param name="project">The name of project.</param>
            <returns>
            <c>true</c> if the project has previous state; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.State.FileStateManager.LoadState(System.String)">
            <summary>
            Loads the state of the project.
            </summary>
            <param name="project">The name of the project.</param>
            <returns>An <see cref="T:ThoughtWorks.CruiseControl.Core.IIntegrationResult"/> containing the current state.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.State.FileStateManager.LoadState(System.IO.TextReader)">
            <summary>
            Loads the state from a <see cref="T:System.IO.TextReader"/>.
            </summary>
            <param name="stateFileReader">The state file reader.</param>
            <returns>An <see cref="T:ThoughtWorks.CruiseControl.Core.IIntegrationResult"/> containing the current state.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.State.FileStateManager.LoadStateIntoDocument(System.String)">
            <summary>
            Loads the state into an <see cref="T:System.Xml.XmlDocument"/>.
            </summary>
            <param name="project">The name of the project.</param>
            <returns>An <see cref="T:System.Xml.XmlDocument"/> containing the state.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.State.FileStateManager.SaveState(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Write the state to disk, ensuring that it gets there in its entirety.
            </summary>
            <param name="result">The integration to save the state for.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.State.FileStateManager.GetFilePath(System.String)">
            <summary>
            Gets the file path.
            </summary>
            <param name="project">The name of project.</param>
            <returns>The file path to a state file.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.State.FileStateManager.StateFilename(System.String)">
            <summary>
            Generates the state filename for a project.
            </summary>
            <param name="project">The name of project.</param>
            <returns>The name of the state file for the project.</returns>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.State.FileStateManager.StateFileDirectory">
            <summary>
            The directory to save the state file to.
            </summary>
            <version>1.0</version>
            <default>The directory CCNet was launched from.</default>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.State.IProjectStateManager">
            <summary>
            Interface to allow persisting stops for a project.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.State.IProjectStateManager.RecordProjectAsStopped(System.String)">
            <summary>
            Records a project as stopped.
            </summary>
            <param name="projectName">The name of the project to record</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.State.IProjectStateManager.RecordProjectAsStartable(System.String)">
            <summary>
            Records a project as being able to start automatically.
            </summary>
            <param name="projectName">The name of the project to record</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.State.IProjectStateManager.CheckIfProjectCanStart(System.String)">
            <summary>
            Checks if a project can be started automatically.
            </summary>
            <param name="projectName">The name of the project to check.</param>
            <returns></returns>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.State.XmlProjectStateManager">
            <summary>
            Records the state of a project.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.State.XmlProjectStateManager.#ctor">
            <summary>
            Initialise a new <see cref="T:ThoughtWorks.CruiseControl.Core.State.XmlProjectStateManager"/> with the default path.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.State.XmlProjectStateManager.#ctor(ThoughtWorks.CruiseControl.Core.Util.IFileSystem,ThoughtWorks.CruiseControl.Core.Util.IExecutionEnvironment)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.State.XmlProjectStateManager"/> class.	
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="executionEnvironment">The execution environment.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.State.XmlProjectStateManager.RecordProjectAsStopped(System.String)">
            <summary>
            Records a project as stopped.
            </summary>
            <param name="projectName">The name of the project to record</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.State.XmlProjectStateManager.RecordProjectAsStartable(System.String)">
            <summary>
            Records a project as being able to start automatically.
            </summary>
            <param name="projectName">The name of the project to record</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.State.XmlProjectStateManager.CheckIfProjectCanStart(System.String)">
            <summary>
            Checks if a project can be started automatically.
            </summary>
            <param name="projectName">The name of the project to check.</param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.State.XmlProjectStateManager.LoadProjectStates(System.Boolean)">
            <summary>
            Loads all the states from a persistance file.
            </summary>
            <param name="forceLoad"></param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.State.XmlProjectStateManager.SaveProjectStates">
            <summary>
            Saves all the states to a persistance file.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.State.XmlProjectStateManager.ChangeProjectState(System.String,System.Boolean)">
            <summary>
            See if we need to change the state and if so, change it, then persist the states
            </summary>
            <param name="projectName"></param>
            <param name="newState"></param>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.State.XmlProjectStateManager.PersistanceFileName">
            <summary>
            Gets the name of the persistance file.	
            </summary>
            <value>The name of the persistance file.</value>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Tasks.AntsPerformanceProfilerTask">
            <summary>
            <para>
            Profiles the performance of an application using Reg Gate's ANTS Performance Profiler.
            </para>
            <para>
            ANTS Performance Profiler is a tool to profile the performance of an application.
            </para>
            <para>
            This application is available from http://www.red-gate.com/. Pro edition of 1.6 or later is required.
            </para>
            </summary>
            <title>ANTS Performance Profiler Task</title>
            <version>1.6</version>
            <example>
            <code title="Minimalist example">
            &lt;antsPerformance&gt;
            &lt;app&gt;someapp.exe&lt;/app&gt;
            &lt;/antsPerformance&gt;
            </code>
            </example>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Tasks.BaseExecutableTask">
            <summary>
            Base task to execute external functionality.
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.BaseExecutableTask.executor">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.BaseExecutableTask.buildProgressInformation">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.BaseExecutableTask.GetProcessFilename">
            <summary>
            Gets the process filename.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.BaseExecutableTask.GetProcessArguments(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Gets the process arguments.	
            </summary>
            <param name="result">The result.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.BaseExecutableTask.GetProcessBaseDirectory(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Gets the process base directory.	
            </summary>
            <param name="result">The result.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.BaseExecutableTask.GetProcessPriorityClass">
            <summary>
            Gets the process priority class.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.BaseExecutableTask.GetProcessTimeout">
            <summary>
            Gets the process timeout.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.BaseExecutableTask.GetProcessSuccessCodes">
            <summary>
            Gets the process success codes.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.BaseExecutableTask.CreateProcessInfo(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Creates the process info.	
            </summary>
            <param name="result">The result.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.BaseExecutableTask.TryToRun(ThoughtWorks.CruiseControl.Core.Util.ProcessInfo,ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Tries to run.	
            </summary>
            <param name="info">The info.</param>
            <param name="result">The result.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.BaseExecutableTask.Validate(ThoughtWorks.CruiseControl.Core.IConfiguration,ThoughtWorks.CruiseControl.Core.Config.ConfigurationTrace,ThoughtWorks.CruiseControl.Core.Config.IConfigurationErrorProcesser)">
            <summary>
            Checks the internal validation of the item.
            </summary>
            <param name="configuration">The entire configuration.</param>
            <param name="parent">The parent item for the item being validated.</param>
            <param name="errorProcesser">The error processer to use.</param>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.BaseExecutableTask.IOSystem">
            <summary>
            Gets or sets the IO system to use.
            </summary>
            <value>The IO system.</value>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.BaseExecutableTask.IOSystemActual">
            <summary>
            Gets the actual IO system to use.
            </summary>
            <value>The IO system.</value>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.AntsPerformanceProfilerTask.defaultExecutable">
            <summary>
            The default executable to use.
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.AntsPerformanceProfilerTask.DefaultPriority">
            <summary>Default priority class</summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.AntsPerformanceProfilerTask.defaultOutput">
            <summary>
            The default output file.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.AntsPerformanceProfilerTask.#ctor">
            <summary>
            Initialise a new <see cref="T:ThoughtWorks.CruiseControl.Core.Tasks.AntsPerformanceProfilerTask"/>.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.AntsPerformanceProfilerTask.#ctor(ThoughtWorks.CruiseControl.Core.Util.ProcessExecutor,ThoughtWorks.CruiseControl.Core.Util.IFileSystem,ThoughtWorks.CruiseControl.Core.Util.ILogger)">
            <summary>
            Initialise a new <see cref="T:ThoughtWorks.CruiseControl.Core.Tasks.AntsPerformanceProfilerTask"/> with the injection properties.
            </summary>
            <param name="executor"></param>
            <param name="fileSystem"></param>
            <param name="logger"></param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.AntsPerformanceProfilerTask.Validate(ThoughtWorks.CruiseControl.Core.IConfiguration,ThoughtWorks.CruiseControl.Core.Config.ConfigurationTrace,ThoughtWorks.CruiseControl.Core.Config.IConfigurationErrorProcesser)">
            <summary>
            Checks the internal validation of the item.
            </summary>
            <param name="configuration">The entire configuration.</param>
            <param name="parent">The parent item for the item being validated.</param>
            <param name="errorProcesser">The error processer to use.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.AntsPerformanceProfilerTask.Execute(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Run the task.
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.AntsPerformanceProfilerTask.GetProcessSuccessCodes">
            <summary>
            Gets the valid success codes.
            </summary>
            <returns>The valid success codes.</returns>
            <remarks>
            Due to a bug in the profiler this returns 1. According to the documentation this is a
            general failure, so other errors may occur and be falsely missed.
            </remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.AntsPerformanceProfilerTask.GetProcessFilename">
            <summary>
            Retrieve the executable to use.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.AntsPerformanceProfilerTask.GetProcessBaseDirectory(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Retrieve the base directory.
            </summary>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.AntsPerformanceProfilerTask.GetProcessTimeout">
            <summary>
            Get the time-out period.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.AntsPerformanceProfilerTask.GetProcessArguments(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Retrieve the arguments
            </summary>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.AntsPerformanceProfilerTask.GetProcessPriorityClass">
            <summary>
            Gets the requested priority class value for this Task.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.AntsPerformanceProfilerTask.GenerateOnOff(System.Boolean)">
            <summary>
            Generates a text string containing either on or off.
            </summary>
            <param name="value">The value indicating whether this is on or off.</param>
            <returns>"on" if value is <c>true</c>; "off" otherwise.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.AntsPerformanceProfilerTask.RootPath(System.String,System.Boolean)">
            <summary>
            Ensures that a path is rooted.
            </summary>
            <param name="path"></param>
            <param name="doubleQuote"></param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.AntsPerformanceProfilerTask.QuoteSpaces(System.String)">
            <summary>
            Adds quotes to a string if it contains spaces.
            </summary>
            <param name="value">The string to check.</param>
            <returns>The string with quotes if needed.</returns>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.AntsPerformanceProfilerTask.Executable">
            <summary>
            The executable to use.
            </summary>
            <version>1.6</version>
            <default>Profile</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.AntsPerformanceProfilerTask.Application">
            <summary>
            The application to profile.
            </summary>
            <version>1.6</version>
            <default>none</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.AntsPerformanceProfilerTask.Service">
            <summary>
            The name of the windows service to profile.
            </summary>
            <version>1.6</version>
            <default>none</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.AntsPerformanceProfilerTask.ComPlus">
            <summary>
            The name of the COM+ service to profile.
            </summary>
            <version>1.6</version>
            <default>none</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.AntsPerformanceProfilerTask.Silverlight">
            <summary>
            The URL of a site containing a silverlight application to profile.
            </summary>
            <version>1.6</version>
            <default>none</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.AntsPerformanceProfilerTask.ApplicationArguments">
            <summary>
            The arguments to pass to the application. 
            </summary>
            <version>1.6</version>
            <default>none</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.AntsPerformanceProfilerTask.Priority">
            <summary>
            The priority class of the spawned process.
            </summary>
            <version>1.6</version>
            <default>Normal</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.AntsPerformanceProfilerTask.TimeOut">
            <summary>
            The time-out period in seconds for the entire task.
            </summary>
            <version>1.6</version>
            <default>600</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.AntsPerformanceProfilerTask.ProfilerTimeOut">
            <summary>
            The time-out period in seconds for the profiler.
            </summary>
            <version>1.6</version>
            <default>120</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.AntsPerformanceProfilerTask.Quiet">
            <summary>
            Whether to disable all output or not.
            </summary>
            <version>1.6</version>
            <default>false</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.AntsPerformanceProfilerTask.Verbose">
            <summary>
            Whether to display verbose output or not.
            </summary>
            <version>1.6</version>
            <default>false</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.AntsPerformanceProfilerTask.ForceOverwrite">
            <summary>
            Whether to overwrite any existing files or not.
            </summary>
            <version>1.6</version>
            <default>true</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.AntsPerformanceProfilerTask.IncludeSubProcesses">
            <summary>
            Whether to include sub-processes.
            </summary>
            <version>1.6</version>
            <default>false</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.AntsPerformanceProfilerTask.TraceLevelValue">
            <summary>
            The level to trace at.
            </summary>
            <version>1.6</version>
            <default>Method</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.AntsPerformanceProfilerTask.MethodLevel">
            <summary>
            Perform method level profiling.
            </summary>
            <version>1.6</version>
            <default>true</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.AntsPerformanceProfilerTask.OnlyWithSource">
            <summary>
            Only profile methods that have source code.
            </summary>
            <version>1.6</version>
            <default>false</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.AntsPerformanceProfilerTask.UseSampling">
            <summary>
            Whether to use sampling for generating approximate results quickly.
            </summary>
            <version>1.6</version>
            <default>false</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.AntsPerformanceProfilerTask.IncludeSource">
            <summary>
            Whether to include source code in the results.
            </summary>
            <version>1.6</version>
            <default>true</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.AntsPerformanceProfilerTask.AllowInlining">
            <summary>
            Whether to allow .NET to inline functions.
            </summary>
            <version>1.6</version>
            <default>true</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.AntsPerformanceProfilerTask.Compensate">
            <summary>
            Whether to get the profiler to compensate for its own overhead.
            </summary>
            <version>1.6</version>
            <default>true</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.AntsPerformanceProfilerTask.SimplifyStackTraces">
            <summary>
            Whether to simplify certain complicated stack traces.
            </summary>
            <version>1.6</version>
            <default>true</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.AntsPerformanceProfilerTask.AvoidTrivial">
            <summary>
            Whether to avoid trivial functions or not.
            </summary>
            <version>1.6</version>
            <default>true</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.AntsPerformanceProfilerTask.RecordSqlAndIO">
            <summary>
            Whether to try to record SQL and File I/O events.
            </summary>
            <version>1.6</version>
            <default>false</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.AntsPerformanceProfilerTask.PublishFiles">
            <summary>
            Whether to publish all files generated from this task.
            </summary>
            <version>1.6</version>
            <default>true</default>
            <remarks>
            If the files are not published then they will not be viewable in the dashboard unless
            copied over by another mechanism.
            </remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.AntsPerformanceProfilerTask.BaseDirectory">
            <summary>
            The base directory to use. If omitted this will default to the working directory of the project. 
            </summary>
            <version>1.6</version>
            <default>Project Working Directory</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.AntsPerformanceProfilerTask.XmlArgsFile">
            <summary>
            A file containing the args for the profiler in an XML specification. 
            </summary>
            <version>1.6</version>
            <default>none</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.AntsPerformanceProfilerTask.SummaryCsvFile">
            <summary>
            The location to write the summary file to - uses CSV format. 
            </summary>
            <version>1.6</version>
            <default>none</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.AntsPerformanceProfilerTask.SummaryXmlFile">
            <summary>
            The location to write the summary file to - uses XML format. 
            </summary>
            <version>1.6</version>
            <default>none</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.AntsPerformanceProfilerTask.SummaryHtmlFile">
            <summary>
            The location to write the summary file to - uses HTML format. 
            </summary>
            <version>1.6</version>
            <default>none</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.AntsPerformanceProfilerTask.CallTreeXmlFile">
            <summary>
            The location to write the calltree file to - uses XML format. 
            </summary>
            <version>1.6</version>
            <default>none</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.AntsPerformanceProfilerTask.CallTreeHtmlFile">
            <summary>
            The location to write the calltree file to - uses HTML format. 
            </summary>
            <version>1.6</version>
            <default>none</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.AntsPerformanceProfilerTask.DataFile">
            <summary>
            The location to write the data file to (requires desktop application to view).
            </summary>
            <version>1.6</version>
            <default>none</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.AntsPerformanceProfilerTask.OutputFile">
            <summary>
            The output analysis file. 
            </summary>
            <version>1.6</version>
            <default>AntsPerformanceAnalysis.txt</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.AntsPerformanceProfilerTask.Threshold">
            <summary>
            The threshold level. 
            </summary>
            <version>1.6</version>
            <default>none</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.AntsPerformanceProfilerTask.FileSystem">
            <summary>
            The file system that is being used.
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.AntsPerformanceProfilerTask.Logger">
            <summary>
            The logger that is being used.
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Tasks.AntsPerformanceProfilerTask.TraceLevel">
            <summary>
            The trace level to use.
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.AntsPerformanceProfilerTask.TraceLevel.Line">
            <summary>
            Trace at the line level.
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.AntsPerformanceProfilerTask.TraceLevel.Method">
            <summary>
            Trace at the method level.
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Tasks.ArtifactCleanUpTask">
            <summary>
            The artifact CleanUp publisher allows for automatic removal of the buildlogs according to the choosen
            setting. It relies on the build log folder, so the XML publisher must be specified before this
            publisher can run. For technical reasons this publisher MUST reside in the publisher section, it will
            not work in the tasks section. Be sure to specify the <link>Xml Log Publisher</link> before this one.
            </summary>
            <title> Artifact Cleanup Publisher </title>
            <version>1.5</version>
            <remarks>
            <para>
            Supported cleaning up methods :
            </para>
            <list type="1">
            <item>
            KeepLastXBuilds : keeps the last specified amount of builds
            </item>
            <item>
            DeleteBuildsOlderThanXDays  : Deletes the builds older than the specifed amount of days
            </item>
            <item>
            KeepMaximumXHistoryDataEntries : Clears the History Data file (for the ModificationHistory), keeping
            maximum the specified amount of builds.
            </item>
            <item>
            DeleteSubDirsOlderThanXDays : Deletes subfolders of the artifact folder if they are older than the
            specified amount of days. (Buildlogfolder excluded)
            </item>
            <item>
            KeepLastXSubDirs : Keeps the last specified amount of subfolders in the artifacts folder, sorting is
            done on creation time of the folder (Buildlogfolder excluded) 
            </item>
            </list>
            <para type="warning">
            <b>DeleteSubDirsOlderThanXDays</b> and <b>KeepLastXSubDirs</b> are mainly meant for cleaning up
            published builds (done via the <link>Build Publisher</link>).
            </para>
            </remarks>
            <example>
            <code>
            &lt;artifactcleanup cleanUpMethod="KeepLastXBuilds" cleanUpValue="50" /&gt;
            </code>
            </example>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.ArtifactCleanUpTask.Execute(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Executes the specified result.	
            </summary>
            <param name="result">The result.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.ArtifactCleanUpTask.CleaningUpMethod">
            <summary>
            Defines the procedure to use for cleaning up the artifact folder.
            </summary>
            <version>1.5</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.ArtifactCleanUpTask.CleaningUpValue">
            <summary>
            Defines the value for the cleanup procedure.
            </summary>
            <version>1.5</version>
            <default>n/a</default>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Tasks.ArtifactCleanUpTask.CleanUpMethod">
            <summary>
            Supported cleaning up methods
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.ArtifactCleanUpTask.CleanUpMethod.KeepLastXBuilds">
            <summary>
            keeps the last specified amount of builds
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.ArtifactCleanUpTask.CleanUpMethod.DeleteBuildsOlderThanXDays">
            <summary>
            Deletes the builds older than the specifed amount of days
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.ArtifactCleanUpTask.CleanUpMethod.KeepMaximumXHistoryDataEntries">
            <summary>
            Clears the History Data file (for the ModificationHistory), keeping maximum the specified amount of builds.
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.ArtifactCleanUpTask.CleanUpMethod.DeleteSubDirsOlderThanXDays">
            <summary>
            Deletes subfolders of the artifact folder if they are older than the
            specified amount of days. (Buildlogfolder excluded)
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.ArtifactCleanUpTask.CleanUpMethod.KeepLastXSubDirs">
            <summary>
            Keeps the last specified amount of subfolders in the artifacts folder, sorting is
            done on creation time of the folder (Buildlogfolder excluded) 
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Tasks.BuilderException">
            <summary>
            	
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.BuilderException.#ctor(ThoughtWorks.CruiseControl.Core.ITask,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Tasks.BuilderException"/> class.	
            </summary>
            <param name="runner">The runner.</param>
            <param name="message">The message.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.BuilderException.#ctor(ThoughtWorks.CruiseControl.Core.ITask,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Tasks.BuilderException"/> class.	
            </summary>
            <param name="runner">The runner.</param>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.BuilderException.ToString">
            <summary>
            Toes the string.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.BuilderException.Builder">
            <summary>
            Gets the builder.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Tasks.CodeItRightTask">
            <title>CodeItRight Analysis Task</title>
            <version>1.5</version>
            <summary>
            <para>
            Perform a code analysis using SubMain.CodeItRight.
            </para>
            <para type="tip">
            SubMain.CodeItRight is a commerical application that will analyse the code for any standards violations. The tool is 
            available from http://submain.com/products/codeit.right.aspx.
            </para>
            <para type="info">
            <title>Supported Versions</title>
            CruiseControl.NET only supports CodeItRight 1.9 currently.
            </para>
            </summary>
            <example>
            <code>
            &lt;codeItRight&gt;
            &lt;solution&gt;myproject.*.sln&lt;/solution&gt;
            &lt;/codeItRight&gt;
            </code>
            </example>
            <remarks>
            <para>
            This task calls CodeItRight.Cmd to perform the analysis. Full details on this tool is available at
            http://community.submain.com/blogs/tutorials/archive/2008/03/23/codeitright-cmd-exe-command-line-parameters.aspx. 
            Additional details on the mapped arguments can be found there.
            </para>
            </remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.CodeItRightTask.DefaultExecutable">
            <summary>
            The name of the default executable.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.CodeItRightTask.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Tasks.CodeItRightTask"/> class.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.CodeItRightTask.#ctor(ThoughtWorks.CruiseControl.Core.Util.ProcessExecutor,ThoughtWorks.CruiseControl.Core.Util.IFileSystem)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Tasks.CodeItRightTask"/> class.
            </summary>
            <param name="executor">The executor.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.CodeItRightTask.Execute(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Run the task.
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.CodeItRightTask.GetProcessFilename">
            <summary>
            Retrieve the executable to use.
            </summary>
            <returns>The name of the executable.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.CodeItRightTask.GetProcessBaseDirectory(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Retrieve the base directory.
            </summary>
            <param name="result">The result.</param>
            <returns>The working directory folder.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.CodeItRightTask.GetProcessTimeout">
            <summary>
            Get the time-out period.
            </summary>
            <returns>The timeout period in milliseconds.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.CodeItRightTask.GetProcessArguments(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Retrieve the arguments
            </summary>
            <param name="result">The result.</param>
            <returns>A <c>string</c> containing the arguments.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.CodeItRightTask.GetProcessPriorityClass">
            <summary>
            Gets the requested priority class value for this Task.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.CodeItRightTask.CheckReportForSeverity(System.Xml.XmlDocument,ThoughtWorks.CruiseControl.Core.Tasks.CodeItRightTask.Severity)">
            <summary>
            Checks if the report has the severity.
            </summary>
            <param name="document">The document.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if there is a violation with that severity, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.CodeItRightTask.EnsurePathIsRooted(ThoughtWorks.CruiseControl.Core.IIntegrationResult,System.String)">
            <summary>
            Ensures the path is rooted.
            </summary>
            <param name="result">The result.</param>
            <param name="path">The path.</param>
            <returns>The rooted path.</returns>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.CodeItRightTask.Executable">
            <summary>
            The executable to use.
            </summary>
            <version>1.5</version>
            <default>SubMain.CodeItRight.Cmd</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.CodeItRightTask.Solution">
            <summary>
            The solution to analyse.
            </summary>
            <version>1.5</version>
            <default>none</default>
            <remarks>
            Either the solution or the project must be specified.
            </remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.CodeItRightTask.Project">
            <summary>
            The project to analyse.
            </summary>
            <version>1.5</version>
            <default>none</default>
            <remarks>
            Either the solution or the project must be specified.
            </remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.CodeItRightTask.Xsl">
            <summary>
            The name of the XSL file to override the default XSL.
            </summary>
            <version>1.5</version>
            <default>none</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.CodeItRightTask.CRData">
            <summary>
            The name of the CodeIt.Right .crdata file. When specified, CodeItRight.Cmd will use the exclusion list (violations, rules
            and files) saved using the Visual Studio version of CodeIt.Right.
            </summary>
            <version>1.5</version>
            <default>none</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.CodeItRightTask.Profile">
            <summary>
            The name of the User Profile that defines active rule set for the analysis. When omitted, the built-in profile is used.
            </summary>
            <version>1.5</version>
            <default>none</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.CodeItRightTask.ReportingThreshold">
            <summary>
            Severity Threshold value to limit the output violation set. When omitted, the the lowest Severity is used - None.
            </summary>
            <version>1.5</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.CodeItRightTask.FailureThreshold">
            <summary>
            Severity value to fail the build on. When omitted, the the lowest Severity is used - None.
            </summary>
            <version>1.5</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.CodeItRightTask.TimeOut">
            <summary>
            The time-out period in seconds. If the task does no finish running in this time it will be terminated. 
            </summary>
            <version>1.5</version>
            <default>600</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.CodeItRightTask.Priority">
            <summary>
            The priority class of the spawned process.
            </summary>
            <version>1.5</version>
            <default>Normal</default>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Tasks.CodeItRightTask.Severity">
            <summary>
            The severity thresholds.
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.CodeItRightTask.Severity.CriticalError">
            <summary>
            Display critical errors.
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.CodeItRightTask.Severity.Error">
            <summary>
            Display errors.
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.CodeItRightTask.Severity.CriticalWarning">
            <summary>
            Display critical warnings.
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.CodeItRightTask.Severity.Warning">
            <summary>
            Display warnings.
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.CodeItRightTask.Severity.Information">
            <summary>
            Display information.
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.CodeItRightTask.Severity.None">
            <summary>
            No severity threshold.
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Tasks.CommentTask">
            <title>Comment Task</title>
            <version>1.6</version>
             <summary>
             Adds a comment to the log.
             </summary>
             <example>
             <code>
             <![CDATA[
             <commentTask>
             <message>Hello World!</message>
             </commentTask>
             ]]>
             </code>
             </example>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.CommentTask.Execute(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Execute the actual task functionality.
            </summary>
            <param name="result">The result details to use.</param>
            <returns>
            True if the task was successful, false otherwise.
            </returns>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.CommentTask.Message">
            <summary>
            The message to add to the log.
            </summary>
            <version>1.6</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.CommentTask.FailTask">
            <summary>
            Defines whether to fail the task or not.
            </summary>
            <version>1.6</version>
            <default>false</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.CommentTask.Logger">
            <summary>
            Gets or sets the logger to use.
            </summary>
            <value>The logger.</value>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Tasks.ConditionalTask">
            <title>Conditional Task</title>
            <version>1.6</version>
            <summary>
            Checks to see if a condition is true before the contained tasks run.
            </summary>
            <example>
            <code>
            <![CDATA[
            <conditional>
            <conditions>
            <!-- Conditions -->
            </conditions>
            <tasks>
            <!-- Tasks to run if conditions pass -->
            </tasks>
            <elseTasks>
            <!-- Tasks to run if conditions fail -->
            </elseTasks>
            </conditional>
            ]]>
            </code>
            </example>
            <remarks>
            <para>
            This task has been kindly supplied by Lasse Sjørup. The original project is available from
            <link>http://ccnetconditional.codeplex.com/</link>.
            </para>
            </remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.ConditionalTask.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Tasks.ConditionalTask"/> class.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.ConditionalTask.ApplyParameters(System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.IEnumerable{ThoughtWorks.CruiseControl.Remote.Parameters.ParameterBase})">
            <summary>
            Applies the input parameters to the task.
            </summary>
            <param name="parametersToApply">The parameters to apply.</param>
            <param name="parameterDefinitionsToUse">The parameter definitions to use.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.ConditionalTask.Validate(ThoughtWorks.CruiseControl.Core.IConfiguration,ThoughtWorks.CruiseControl.Core.Config.ConfigurationTrace,ThoughtWorks.CruiseControl.Core.Config.IConfigurationErrorProcesser)">
            <summary>
            Validates this task.
            </summary>
            <param name="configuration">The entire configuration.</param>
            <param name="parent">The parent item for the item being validated.</param>
            <param name="errorProcesser">The error processer to use.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.ConditionalTask.InitialiseStatus(ThoughtWorks.CruiseControl.Remote.ItemBuildStatus)">
            <summary>
            Initialise an <see cref="T:ThoughtWorks.CruiseControl.Remote.ItemStatus"/>.
            </summary>
            <param name="newStatus">The new status.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.ConditionalTask.Execute(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Execute the actual task functionality.
            </summary>
            <param name="result">The result to use.</param>
            <returns>
            <c>true</c> if the task was successful; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.ConditionalTask.ValidateTasks(ThoughtWorks.CruiseControl.Core.ITask[],ThoughtWorks.CruiseControl.Core.IConfiguration,ThoughtWorks.CruiseControl.Core.Config.ConfigurationTrace,ThoughtWorks.CruiseControl.Core.Config.IConfigurationErrorProcesser)">
            <summary>
            Validates some tasks.
            </summary>
            <param name="tasks">The tasks.</param>
            <param name="configuration">The configuration.</param>
            <param name="parent">The parent.</param>
            <param name="errorProcesser">The error processer.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.ConditionalTask.EvaluateConditions(ThoughtWorks.CruiseControl.Core.Util.ILogger,ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Evaluates the conditions.
            </summary>
            <param name="logger">The logger.</param>
            <param name="result">The result.</param>
            <returns>
            <c>true</c> if the conditions are met; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.ConditionalTask.InitialiseTaskStatuses(ThoughtWorks.CruiseControl.Remote.ItemBuildStatus,ThoughtWorks.CruiseControl.Core.ITask[],System.Collections.Generic.Dictionary{ThoughtWorks.CruiseControl.Core.ITask,ThoughtWorks.CruiseControl.Remote.ItemStatus},System.String)">
            <summary>
            Initialises the task statuses.
            </summary>
            <param name="newStatus">The new status.</param>
            <param name="tasks">The tasks.</param>
            <param name="taskStatuses">The task statuses.</param>
            <param name="title">The title.</param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.ConditionalTask.CancelTasks(System.Collections.Generic.Dictionary{ThoughtWorks.CruiseControl.Core.ITask,ThoughtWorks.CruiseControl.Remote.ItemStatus})">
            <summary>
            Cancels any pending tasks.
            </summary>
            <param name="taskStatuses">The task statuses.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.ConditionalTask.RunTask(ThoughtWorks.CruiseControl.Core.ITask,ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Runs a task.
            </summary>
            <param name="task"></param>
            <param name="result"></param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.ConditionalTask.RunTasks(ThoughtWorks.CruiseControl.Core.ITask[],ThoughtWorks.CruiseControl.Core.Util.ILogger,ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Runs some tasks.
            </summary>
            <param name="tasks">The tasks.</param>
            <param name="logger">The logger.</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if all the tasks are successul; <c>false</c> otherwise.</returns>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.ConditionalTask.TaskConditions">
            <summary>
            The conditions to check.
            </summary>
            <default>n/a</default>
            <version>1.6</version>
            <remarks>
            These conditions must all pass in order for the main tasks to run. Use an 
            <link>Or Condition</link> when only one condition is required.
            </remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.ConditionalTask.Tasks">
            <summary>
            The tasks to run if conditions evaluates to true.
            </summary>
            <default>None</default>
            <version>1.6</version>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.ConditionalTask.ElseTasks">
            <summary>
            The tasks to run if conditions evaluates to false.
            </summary>
            <default>None</default>
            <version>1.6</version>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.ConditionalTask.Logger">
            <summary>
            Gets or sets the logger to use.
            </summary>
            <value>The logger.</value>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Tasks.Conditions.AndTaskCondition">
            <title>And Condition</title>
            <version>1.6</version>
            <summary>
            Checks that all the child condition pass.
            </summary>
            <example>
            <code title="Basic example">
            <![CDATA[
            <andCondition>
            <conditions>
            <!-- Conditions to check -->
            </conditions>
            </andCondition>
            ]]>
            </code>
            <code title="Example in context">
            <![CDATA[
            <conditional>
            <conditions>
            <andCondition>
            <conditions>
            <!-- Conditions to check -->
            </conditions>
            </andCondition>
            </conditions>
            <tasks>
            <!-- Tasks to perform if condition passed -->
            </tasks>
            <elseTasks>
            <!-- Tasks to perform if condition failed -->
            </elseTasks>
            </conditional>
            ]]>
            </code>
            </example>
            <remarks>
            <para>
            This condition has been kindly supplied by Lasse Sjørup. The original project is available from
            <link>http://ccnetconditional.codeplex.com/</link>.
            </para>
            </remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Tasks.Conditions.ConditionBase">
            <summary>
            Provides a base implementation for conditions that provides some common functionality.
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Tasks.ITaskCondition">
            <title>Task Condition Blocks</title>
            <summary>
            A condition that can be used within the <see cref="T:ThoughtWorks.CruiseControl.Core.Tasks.ConditionalTask"/>.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.ITaskCondition.Eval(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Evals the specified result.
            </summary>
            <param name="result">The result.</param>
            <returns>
            <c>true</c> if the condition is true; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.Conditions.ConditionBase.Eval(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Evals the specified result.
            </summary>
            <param name="result">The result.</param>
            <returns>
            <c>true</c> if the condition is true; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.Conditions.ConditionBase.Evaluate(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Performs the actual evaluation.
            </summary>
            <param name="result">The result.</param>
            <returns>
            <c>true</c> if the condition is true; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.Conditions.ConditionBase.RetrieveLogger">
            <summary>
            Retrieves the logger instance.
            </summary>
            <returns>The <see cref="T:ThoughtWorks.CruiseControl.Core.Util.ILogger"/> to use.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.Conditions.ConditionBase.LogDescriptionOrMessage(System.String)">
            <summary>
            Logs the description or a message.
            </summary>
            <param name="message">The message to use if there is no description.</param>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.Conditions.ConditionBase.Description">
            <summary>
            A description of the condition.
            </summary>
            <version>1.6</version>
            <default>none</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.Conditions.ConditionBase.Logger">
            <summary>
            Gets or sets the logger.
            </summary>
            <value>The logger.</value>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.Conditions.AndTaskCondition.Evaluate(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Performs the actual evaluation.
            </summary>
            <param name="result">The result.</param>
            <returns>
            <c>true</c> if the condition is true; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.Conditions.AndTaskCondition.Validate(ThoughtWorks.CruiseControl.Core.IConfiguration,ThoughtWorks.CruiseControl.Core.Config.ConfigurationTrace,ThoughtWorks.CruiseControl.Core.Config.IConfigurationErrorProcesser)">
            <summary>
            Checks the internal validation of the item.
            </summary>
            <param name="configuration">The entire configuration.</param>
            <param name="parent">The parent item for the item being validated.</param>
            <param name="errorProcesser">The error processer to use.</param>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.Conditions.AndTaskCondition.Conditions">
            <summary>
            The conditions to check.
            </summary>
            <version>1.6</version>
            <default>n/a</default>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Tasks.Conditions.BuildConditionTaskCondition">
            <title>Build Condition Condition</title>
            <version>1.6</version>
            <summary>
            Checks if the current build condition matches a value.
            </summary>
            <example>
            <code title="Basic example">
            <![CDATA[
            <buildCondition value="ForeceBuild" />
            ]]>
            </code>
            <code title="Example in context">
            <![CDATA[
            <conditional>
            <conditions>
            <buildCondition>
            <value>ForceBuild</value>
            </buildCondition>
            </conditions>
            <tasks>
            <!-- Tasks to perform if condition passed -->
            </tasks>
            <elseTasks>
            <!-- Tasks to perform if condition failed -->
            </elseTasks>
            </conditional>
            ]]>
            </code>
            </example>
            <remarks>
            <para>
            This condition has been kindly supplied by Lasse Sjørup. The original project is available from
            <link>http://ccnetconditional.codeplex.com/</link>.
            </para>
            </remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.Conditions.BuildConditionTaskCondition.Evaluate(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Performs the actual evaluation.
            </summary>
            <param name="result">The result.</param>
            <returns>
            <c>true</c> if the condition is true; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.Conditions.BuildConditionTaskCondition.BuildCondition">
            <summary>
            The build condition to match.
            </summary>
            <version>1.6</version>
            <default>n/a</default>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Tasks.Conditions.CompareValuesTaskCondition">
            <title>Compare Values Condition</title>
            <version>1.6</version>
            <summary>
            <para>
            Checks if two values are the same.
            </para>
            <para>
            This is typically used with dynamic values.
            </para>
            </summary>
            <example>
            <code title="Basic example">
            <![CDATA[
            <compareCondition>
            <value1>${value1}</value1>
            <value2>ToMatch</value2>
            <evaluation>notEqual</evaluation>
            <ignoreCase>true</ignoreCase>
            </compareCondition>
            ]]>
            </code>
            <code title="Example in context">
            <![CDATA[
            <conditional>
            <conditions>
            <compareCondition>
            <value1>${value1}</value1>
            <value2>ToMatch</value2>
            <evaluation>equal</evaluation>
            </compareCondition>
            </conditions>
            <tasks>
            <!-- Tasks to perform if condition passed -->
            </tasks>
            <elseTasks>
            <!-- Tasks to perform if condition failed -->
            </elseTasks>
            </conditional>
            ]]>
            </code>
            </example>
            <remarks>
            <para>
            This condition has been kindly supplied by Lasse Sjørup. The original project is available from
            <link>http://ccnetconditional.codeplex.com/</link>.
            </para>
            </remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.Conditions.CompareValuesTaskCondition.Evaluate(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Performs the actual evaluation.
            </summary>
            <param name="result">The result.</param>
            <returns>
            <c>true</c> if the condition is true; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.Conditions.CompareValuesTaskCondition.Value1">
            <summary>
            The first value to evaluate.
            </summary>
            <version>1.6</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.Conditions.CompareValuesTaskCondition.Value2">
            <summary>
            The second value to evaluate.
            </summary>
            <version>1.6</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.Conditions.CompareValuesTaskCondition.EvaluationType">
            <summary>
            The type of evaluation.
            </summary>
            <version>1.6</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.Conditions.CompareValuesTaskCondition.IgnoreCase">
            <summary>
            Whether to ignore any case differences or not.
            </summary>
            <version>1.6</version>
            <default>false</default>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Tasks.Conditions.CompareValuesTaskCondition.Evaluation">
            <summary>
            The type of evaluation to perform.
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.Conditions.CompareValuesTaskCondition.Evaluation.Equal">
            <summary>
            Are the two values equal.
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.Conditions.CompareValuesTaskCondition.Evaluation.NotEqual">
            <summary>
            Are the two values not equal.
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Tasks.Conditions.FileExistsTaskCondition">
            <title>File Exists Condition</title>
            <version>1.6</version>
            <summary>
            Checks if a file exists.
            </summary>
            <example>
            <code title="Basic example">
            <![CDATA[
            <fileExistsCondition file="readme.txt" />
            ]]>
            </code>
            <code title="Example in context">
            <![CDATA[
            <conditional>
            <conditions>
            <fileExistsCondition>
            <file>readme.txt</file>
            </fileExistsCondition>
            </conditions>
            <tasks>
            <!-- Tasks to perform if condition passed -->
            </tasks>
            <elseTasks>
            <!-- Tasks to perform if condition failed -->
            </elseTasks>
            </conditional>
            ]]>
            </code>
            </example>
            <remarks>
            <para>
            This condition has been kindly supplied by Lasse Sjørup. The original project is available from
            <link>http://ccnetconditional.codeplex.com/</link>.
            </para>
            </remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.Conditions.FileExistsTaskCondition.Evaluate(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Performs the actual evaluation.
            </summary>
            <param name="result">The result.</param>
            <returns>
            <c>true</c> if the condition is true; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.Conditions.FileExistsTaskCondition.FileName">
            <summary>
            The file to check for.
            </summary>
            <version>1.6</version>
            <default>n/a</default>
            <remarks>
            If the file is relative then it will be relative to the working directory.
            </remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.Conditions.FileExistsTaskCondition.FileSystem">
            <summary>
            Gets or sets the file system.
            </summary>
            <value>The file system.</value>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Tasks.Conditions.FolderExistsTaskCondition">
            <title>Folder Exists Condition</title>
            <version>1.6</version>
            <summary>
            Checks if a folder exists.
            </summary>
            <example>
            <code title="Basic example">
            <![CDATA[
            <folderExistsCondition folder="documentation" />
            ]]>
            </code>
            <code title="Example in context">
            <![CDATA[
            <conditional>
            <conditions>
            <folderExistsCondition>
            <folder>documentation</folder>
            </folderExistsCondition>
            </conditions>
            <tasks>
            <!-- Tasks to perform if condition passed -->
            </tasks>
            <elseTasks>
            <!-- Tasks to perform if condition failed -->
            </elseTasks>
            </conditional>
            ]]>
            </code>
            </example>
            <remarks>
            <para>
            This condition has been kindly supplied by Lasse Sjørup. The original project is available from
            <link>http://ccnetconditional.codeplex.com/</link>.
            </para>
            </remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.Conditions.FolderExistsTaskCondition.Evaluate(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Performs the actual evaluation.
            </summary>
            <param name="result">The result.</param>
            <returns>
            <c>true</c> if the condition is true; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.Conditions.FolderExistsTaskCondition.FolderName">
            <summary>
            The folder to check for.
            </summary>
            <version>1.6</version>
            <default>n/a</default>
            <remarks>
            If the folder is relative then it will be relative to the working directory.
            </remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.Conditions.FolderExistsTaskCondition.FileSystem">
            <summary>
            Gets or sets the file system.
            </summary>
            <value>The file system.</value>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Tasks.Conditions.LastBuildStatusTaskCondition">
            <title>Last Build Status Condition</title>
            <version>1.6</version>
            <summary>
            Checks if the status of the last build matches a value. If no previous build exists any specified status will return false.
            </summary>
            <example>
            <code title="Basic example">
            <![CDATA[
            <lastStatusCondition value="Success" />
            ]]>
            </code>
            <code title="Example in context">
            <![CDATA[
            <conditional>
            <conditions>
            <lastStatusCondition>
            <value>Failure</value>
            </lastStatusCondition>
            </conditions>
            <tasks>
            <!-- Tasks to perform if condition passed -->
            </tasks>
            <elseTasks>
            <!-- Tasks to perform if condition failed -->
            </elseTasks>
            </conditional>
            ]]>
            </code>
            </example>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.Conditions.LastBuildStatusTaskCondition.Evaluate(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Performs the actual evaluation.
            </summary>
            <param name="result">The result.</param>
            <returns>
            <c>true</c> if the condition is true; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.Conditions.LastBuildStatusTaskCondition.Status">
            <summary>
            The status to match.
            </summary>
            <version>1.6</version>
            <default>n/a</default>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Tasks.Conditions.LastBuildTimeTaskCondition">
            <title>Last Build Time Condition</title>
            <version>1.6</version>
            <summary>
            Checks if the last build started at least a certain time period ago.
            </summary>
            <example>
            <code title="Basic example">
            <![CDATA[
            <lastBuildTimeCondition time="120" />
            ]]>
            </code>
            <code title="Example in context">
            <![CDATA[
            <conditional>
            <conditions>
            <lastBuildTimeCondition>
            <time unit="minutes">5</time>
            </lastBuildTimeCondition>
            </conditions>
            <tasks>
            <!-- Tasks to perform if condition passed -->
            </tasks>
            <elseTasks>
            <!-- Tasks to perform if condition failed -->
            </elseTasks>
            </conditional>
            ]]>
            </code>
            </example>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.Conditions.LastBuildTimeTaskCondition.Evaluate(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Performs the actual evaluation.
            </summary>
            <param name="result">The result.</param>
            <returns>
            <c>true</c> if the condition is true; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.Conditions.LastBuildTimeTaskCondition.Time">
            <summary>
            The time period to use.
            </summary>
            <version>1.6</version>
            <default>n/a</default>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Tasks.Conditions.OrTaskCondition">
            <title>Or Condition</title>
            <version>1.6</version>
            <summary>
            Checks that at least one child condition matches.
            </summary>
            <example>
            <code title="Basic example">
            <![CDATA[
            <orCondition>
            <conditions>
            <!-- Conditions to check -->
            </conditions>
            </orCondition>
            ]]>
            </code>
            <code title="Example in context">
            <![CDATA[
            <conditional>
            <conditions>
            <orCondition>
            <conditions>
            <!-- Conditions to check -->
            </conditions>
            </orCondition>
            </conditions>
            <tasks>
            <!-- Tasks to perform if condition passed -->
            </tasks>
            <elseTasks>
            <!-- Tasks to perform if condition failed -->
            </elseTasks>
            </conditional>
            ]]>
            </code>
            </example>
            <remarks>
            <para>
            This condition has been kindly supplied by Lasse Sjørup. The original project is available from
            <link>http://ccnetconditional.codeplex.com/</link>.
            </para>
            </remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.Conditions.OrTaskCondition.Evaluate(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Performs the actual evaluation.
            </summary>
            <param name="result">The result.</param>
            <returns>
            <c>true</c> if the condition is true; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.Conditions.OrTaskCondition.Validate(ThoughtWorks.CruiseControl.Core.IConfiguration,ThoughtWorks.CruiseControl.Core.Config.ConfigurationTrace,ThoughtWorks.CruiseControl.Core.Config.IConfigurationErrorProcesser)">
            <summary>
            Checks the internal validation of the item.
            </summary>
            <param name="configuration">The entire configuration.</param>
            <param name="parent">The parent item for the item being validated.</param>
            <param name="errorProcesser">The error processer to use.</param>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.Conditions.OrTaskCondition.Conditions">
            <summary>
            The conditions to check.
            </summary>
            <version>1.6</version>
            <default>n/a</default>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Tasks.Conditions.StatusTaskCondition">
            <title>Status Condition</title>
            <version>1.6</version>
            <summary>
            Checks if the current status matches a value.
            </summary>
            <example>
            <code title="Basic example">
            <![CDATA[
            <statusCondition value="Success" />
            ]]>
            </code>
            <code title="Example in context">
            <![CDATA[
            <conditional>
            <conditions>
            <statusCondition>
            <value>Failure</value>
            </statusCondition>
            </conditions>
            <tasks>
            <!-- Tasks to perform if condition passed -->
            </tasks>
            <elseTasks>
            <!-- Tasks to perform if condition failed -->
            </elseTasks>
            </conditional>
            ]]>
            </code>
            </example>
            <remarks>
            <para>
            This condition has been kindly supplied by Lasse Sjørup. The original project is available from
            <link>http://ccnetconditional.codeplex.com/</link>.
            </para>
            </remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.Conditions.StatusTaskCondition.Evaluate(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Performs the actual evaluation.
            </summary>
            <param name="result">The result.</param>
            <returns>
            <c>true</c> if the condition is true; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.Conditions.StatusTaskCondition.Status">
            <summary>
            The status to match.
            </summary>
            <version>1.6</version>
            <default>n/a</default>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Tasks.Conditions.UrlHeaderValueTaskCondition">
            <title>URL Header Value Condition</title>
            <version>1.6</version>
            <summary>
            Checks if a URL returns a specified header.
            </summary>
            <example>
            <code title="Basic example">
            <![CDATA[
            <urlHeaderValueCondition url="http://somewhere.com" />
            ]]>
            </code>
            <code title="Example in context">
            <![CDATA[
            <conditional>
            <conditions>
            <urlHeaderValueCondition>
            <url>http://somewhere.com</url>
            </urlHeaderValueCondition>
            </conditions>
            <tasks>
            <!-- Tasks to perform if condition passed -->
            </tasks>
            <elseTasks>
            <!-- Tasks to perform if condition failed -->
            </elseTasks>
            </conditional>
            ]]>
            </code>
            </example>
            <remarks>
            <para>
            This condition has been kindly supplied by Lasse Sjørup. The original project is available from
            <link>http://ccnetconditional.codeplex.com/</link>.
            </para>
            </remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.Conditions.UrlHeaderValueTaskCondition.Validate(ThoughtWorks.CruiseControl.Core.IConfiguration,ThoughtWorks.CruiseControl.Core.Config.ConfigurationTrace,ThoughtWorks.CruiseControl.Core.Config.IConfigurationErrorProcesser)">
            <summary>
            Checks the internal validation of the item.
            </summary>
            <param name="configuration">The entire configuration.</param>
            <param name="parent">The parent item for the item being validated.</param>
            <param name="errorProcesser">The error processer to use.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.Conditions.UrlHeaderValueTaskCondition.Evaluate(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Performs the actual evaluation.
            </summary>
            <param name="result">The result.</param>
            <returns>
            <c>true</c> if the condition is true; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.Conditions.UrlHeaderValueTaskCondition.Url">
            <summary>
            The URL to ping.
            </summary>
            <version>1.6</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.Conditions.UrlHeaderValueTaskCondition.HeaderKey">
            <summary>
            The key of the header to check.
            </summary>
            <version>1.6</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.Conditions.UrlHeaderValueTaskCondition.HeaderValue">
            <summary>
            The expected value for the header.
            </summary>
            <version>1.6</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.Conditions.UrlHeaderValueTaskCondition.WebFunctions">
            <summary>
            Gets or sets the web functions.
            </summary>
            <value>The web functions.</value>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Tasks.Conditions.UrlPingsTaskCondition">
            <title>URL Ping Condition</title>
            <version>1.6</version>
            <summary>
            Checks if a URL can be pinged.
            </summary>
            <example>
            <code title="Basic example">
            <![CDATA[
            <urlPingCondition url="http://somewhere.com" />
            ]]>
            </code>
            <code title="Example in context">
            <![CDATA[
            <conditional>
            <conditions>
            <urlPingCondition>
            <url>http://somewhere.com</url>
            </urlPingCondition>
            </conditions>
            <tasks>
            <!-- Tasks to perform if condition passed -->
            </tasks>
            <elseTasks>
            <!-- Tasks to perform if condition failed -->
            </elseTasks>
            </conditional>
            ]]>
            </code>
            </example>
            <remarks>
            <para>
            This condition has been kindly supplied by Lasse Sjørup. The original project is available from
            <link>http://ccnetconditional.codeplex.com/</link>.
            </para>
            </remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.Conditions.UrlPingsTaskCondition.Validate(ThoughtWorks.CruiseControl.Core.IConfiguration,ThoughtWorks.CruiseControl.Core.Config.ConfigurationTrace,ThoughtWorks.CruiseControl.Core.Config.IConfigurationErrorProcesser)">
            <summary>
            Checks the internal validation of the item.
            </summary>
            <param name="configuration">The entire configuration.</param>
            <param name="parent">The parent item for the item being validated.</param>
            <param name="errorProcesser">The error processer to use.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.Conditions.UrlPingsTaskCondition.Evaluate(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Performs the actual evaluation.
            </summary>
            <param name="result">The result.</param>
            <returns>
            <c>true</c> if the condition is true; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.Conditions.UrlPingsTaskCondition.Url">
            <summary>
            The URL to ping.
            </summary>
            <version>1.6</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.Conditions.UrlPingsTaskCondition.WebFunctions">
            <summary>
            Gets or sets the web functions.
            </summary>
            <value>The web functions.</value>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Tasks.CoverageFilter">
            <summary>
            A filter for a coverage report.
            </summary>
            <title>Coverage Filter</title>
            <version>1.5</version>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.CoverageFilter.#ctor">
            <summary>
            Initialise a new <see cref="T:ThoughtWorks.CruiseControl.Core.Tasks.CoverageFilter"/>.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.CoverageFilter.ToParamString">
            <summary>
            Returns a string that can be used an a parameter to the application.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.CoverageFilter.Data">
            <summary>
            The pattern to use for matching elements.
            </summary>
            <version>1.5</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.CoverageFilter.ItemType">
            <summary>
            The type of item.
            </summary>
            <version>1.5</version>
            <default>Default</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.CoverageFilter.IsRegex">
            <summary>
            Whether this is a regex or not.
            </summary>
            <version>1.5</version>
            <default>false</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.CoverageFilter.IsInclude">
            <summary>
            Whether to include or exclude items.
            </summary>
            <version>1.5</version>
            <default>false</default>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Tasks.CoverageFilter.NCoverItemType">
            <summary>
            The item types.
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.CoverageFilter.NCoverItemType.Default">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.CoverageFilter.NCoverItemType.Assembly">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.CoverageFilter.NCoverItemType.Namespace">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.CoverageFilter.NCoverItemType.Class">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.CoverageFilter.NCoverItemType.Method">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.CoverageFilter.NCoverItemType.Document">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Tasks.CoverageThreshold">
            <summary>
            A threshold for a coverage report.
            </summary>
            <title>Coverage Threshold</title>
            <version>1.5</version>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.CoverageThreshold.#ctor">
            <summary>
            Initialise a new <see cref="T:ThoughtWorks.CruiseControl.Core.Tasks.CoverageThreshold"/>.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.CoverageThreshold.ToParamString">
            <summary>
            Returns a string that can be used an a parameter to the application.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.CoverageThreshold.Metric">
            <summary>
            The coverage metric.
            </summary>
            <version>1.5</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.CoverageThreshold.MinValue">
            <summary>
            The minimum coverage value.
            </summary>
            <version>1.5</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.CoverageThreshold.ItemType">
            <summary>
            The type of item.
            </summary>
            <version>1.5</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.CoverageThreshold.Pattern">
            <summary>
            The matching pattern to use.
            </summary>
            <version>1.5</version>
            <default>None</default>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Tasks.CoverageThreshold.NCoverMetric">
            <summary>
            The coverage metrics.
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.CoverageThreshold.NCoverMetric.SymbolCoverage">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.CoverageThreshold.NCoverMetric.BranchCoverage">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.CoverageThreshold.NCoverMetric.MethodCoverage">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.CoverageThreshold.NCoverMetric.CyclomaticComplexity">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Tasks.CoverageThreshold.NCoverItemType">
            <summary>
            The item types.
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.CoverageThreshold.NCoverItemType.Default">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.CoverageThreshold.NCoverItemType.View">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.CoverageThreshold.NCoverItemType.Module">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.CoverageThreshold.NCoverItemType.Namespace">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.CoverageThreshold.NCoverItemType.Class">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Tasks.CruiseServerControlTask">
            <summary>
            Sends a management task to a CruiseControl.NET server.
            </summary>
            <title>CruiseServer Control Task</title>
            <version>1.5</version>
            <example>
            <code>
            &lt;cruiseServerControl&gt;
            &lt;actions&gt;
            &lt;controlAction type="StartProject" project="CCNet" /&gt;
            &lt;/actions&gt;
            &lt;/cruiseServerControl&gt;
            </code>
            </example>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.CruiseServerControlTask.Validate(ThoughtWorks.CruiseControl.Core.IConfiguration,ThoughtWorks.CruiseControl.Core.Config.ConfigurationTrace,ThoughtWorks.CruiseControl.Core.Config.IConfigurationErrorProcesser)">
            <summary>
            Checks the internal validation of the item.
            </summary>
            <param name="configuration">The entire configuration.</param>
            <param name="parent">The parent item for the item being validated.</param>
            <param name="errorProcesser">The error processer to use.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.CruiseServerControlTask.Execute(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Sends the specified control tasks to the server.
            </summary>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.CruiseServerControlTask.CacheProjectNames(ThoughtWorks.CruiseControl.Core.Util.ILogger,ThoughtWorks.CruiseControl.Remote.CruiseServerClientBase)">
            <summary>
            Caches the project names.
            </summary>
            <param name="logger">The logger.</param>
            <param name="client">The client.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.CruiseServerControlTask.RetrieveAction(ThoughtWorks.CruiseControl.Core.Util.ILogger,ThoughtWorks.CruiseControl.Remote.CruiseServerClientBase,ThoughtWorks.CruiseControl.Core.Tasks.CruiseServerControlTaskAction)">
            <summary>
            Retrieves the action to perform.
            </summary>
            <param name="logger">The logger.</param>
            <param name="client">The client.</param>
            <param name="action">The action definition.</param>
            <returns>The action to perform.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.CruiseServerControlTask.ListProjects(System.String)">
            <summary>
            Lists the projects.
            </summary>
            <param name="projectPattern">The project pattern.</param>
            <returns>The project names that match the pattern.</returns>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.CruiseServerControlTask.Server">
            <summary>
            The server to send the commands to.
            </summary>
            <version>1.5</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.CruiseServerControlTask.Actions">
            <summary>
            The actions to perform.
            </summary>
            <version>1.5</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.CruiseServerControlTask.ClientFactory">
            <summary>
            The client factory to use.
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.CruiseServerControlTask.Logger">
            <summary>
            Gets or sets the logger.
            </summary>
            <value>The logger.</value>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Tasks.CruiseServerControlTaskAction">
            <summary>
            An action to perform on a CruiseControl.NET server.
            </summary>
            <title>CruiseServer Control Action</title>
            <version>1.5</version>
            <example>
            <code>
            &lt;controlAction type="StartProject" project="CCNet" /&gt;
            </code>
            </example>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.CruiseServerControlTaskAction.Project">
            <summary>
            The project to run the command on.
            </summary>
            <version>1.5</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.CruiseServerControlTaskAction.Type">
            <summary>
            The type of command.
            </summary>
            <version>1.5</version>
            <default>n/a</default>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Tasks.CruiseServerControlTaskActionType">
            <summary>
            The allowed actions to perform on a CruiseControl.NET server.
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.CruiseServerControlTaskActionType.StartProject">
            <summary>
            Start a project.
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.CruiseServerControlTaskActionType.StopProject">
            <summary>
            Stop a project.
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Tasks.DirectDynamicValue">
            <title>Direct Dynamic Value</title>
            <version>1.5</version>
            <summary>
            <para>
            This will replace the value of a property with the value from a parameter. If the user does not enter a
            parameter value, then the default will be used (when set).
            </para>
            <para type="warning">
            This dynamic value does not perform any formatting, it just directly puts the value into the property.
            </para>
            </summary>
            <example>
            <code title="Basic example">
            &lt;nant&gt;
            &lt;!-- Omitted for brevity --&gt;
            &lt;dynamicValues&gt;
            &lt;buildArgs&gt;Help&lt;/buildArgs&gt;
            &lt;directValue property="buildArgs" parameter="CommandToRun" default="Help"/&gt;
            &lt;/dynamicValues&gt;
            &lt;/nant&gt;
            </code>
            <code title="Shorthand example">
            &lt;nant&gt;
            &lt;!-- Omitted for brevity --&gt;
            &lt;dynamicValues&gt;
            &lt;buildArgs&gt;$[CommandToRun|Help]&lt;/buildArgs&gt;
            &lt;/dynamicValues&gt;
            &lt;/nant&gt;
            </code>
            <code title="Example in context">
            &lt;project name="Test Project"&gt;
            &lt;sourcecontrol type="svn"&gt;
            &lt;!-- Omitted for brevity --&gt;
            &lt;/sourcecontrol&gt;
            &lt;triggers&gt;
            &lt;intervalTrigger /&gt;
            &lt;/triggers&gt;
            &lt;tasks&gt;
            &lt;nant&gt;
            &lt;!-- Omitted for brevity --&gt;
            &lt;buildArgs&gt;Help&lt;/buildArgs&gt;
            &lt;dynamicValues&gt;
            &lt;directValue property="buildArgs" parameter="CommandToRun" default="Help"/&gt;
            &lt;/dynamicValues&gt;
            &lt;/nant&gt;
            &lt;!-- Omitted for brevity --&gt;
            &lt;/tasks&gt;
            &lt;publishers&gt;
            &lt;!-- Omitted for brevity --&gt;
            &lt;/publishers&gt;
            &lt;parameters&gt;
            &lt;!-- Omitted for brevity --&gt;
            &lt;/parameters&gt;
            &lt;/project&gt;
            </code>
            </example>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Tasks.IDynamicValue">
            <summary>
            Defines a dynamic value.
            </summary>
            <title>Dynamic Values</title>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.IDynamicValue.ApplyTo(System.Object,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.IEnumerable{ThoughtWorks.CruiseControl.Remote.Parameters.ParameterBase})">
            <summary>
            Applies a dynamc value to an object.
            </summary>
            <param name="value">The object to apply the value to.</param>
            <param name="parameters">The parameters to apply.</param>
            <param name="parameterDefinitions">The original parameter definitions.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.DirectDynamicValue.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Tasks.DirectDynamicValue"/> class.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.DirectDynamicValue.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Tasks.DirectDynamicValue"/> class.	
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="property">The property.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.DirectDynamicValue.ApplyTo(System.Object,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.IEnumerable{ThoughtWorks.CruiseControl.Remote.Parameters.ParameterBase})">
            <summary>
            Applies a dynamc value to an object.
            </summary>
            <param name="value">The object to apply the value to.</param>
            <param name="parameters">The parameters to apply.</param>
            <param name="parameterDefinitions">The original parameter definitions.</param>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.DirectDynamicValue.PropertyName">
            <summary>
            The name of the property to set. This must be the same name as what is in the task/publisher/trigger
            configuration. 
            </summary>
            <version>1.5</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.DirectDynamicValue.ParameterName">
            <summary>
            The name of the parameter to use. This must be the same name as what is in the parameters configuration. 
            </summary>
            <version>1.5</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.DirectDynamicValue.DefaultValue">
            <summary>
            The default value to use if nothing is set in the parameters.
            </summary>
            <version>1.5</version>
            <default>n/a</default>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Tasks.DupFinderTask">
            <summary>
            <para>
            Check for duplicates using dupfinder (http://duplicatefinder.codeplex.com/).
            </para>
            </summary>
            <title>Duplicate Finder Task</title>
            <version>1.5</version>
            <example>
            <code title="Minimalist example">
            &lt;dupfinder&gt;
            &lt;fileMask&gt;*.cs&lt;/fileMask&gt;
            &lt;inputDir&gt;Code&lt;/inputDir&gt;
            &lt;/dupfinder&gt;
            </code>
            <code title="Full example">
            &lt;dupfinder&gt;
            &lt;dynamicValues /&gt;
            &lt;fileMask&gt;*.cs&lt;/fileMask&gt;
            &lt;includeCode&gt;False&lt;/includeCode&gt;
            &lt;inputDir&gt;Code&lt;/inputDir&gt;
            &lt;recurse&gt;False&lt;/recurse&gt;
            &lt;shortenNames&gt;False&lt;/shortenNames&gt;
            &lt;threshold&gt;5&lt;/threshold&gt;
            &lt;timeout&gt;600&lt;/timeout&gt;
            &lt;width&gt;2&lt;/width&gt;
            &lt;/dupfinder&gt;
            </code>
            </example>
            <remarks>
            <heading>Extended Functionality</heading>
            <para>
            This task offers some extended functionality over what the base dupfinder executable offers. This extended
            functionality is primarily intended to add extra value to the web dashboard display. The extended options are:
            </para>
            <para>
            <b>&lt;shortenNames&gt;</b>: This will remove the &lt;inputDir&gt; value from the file names. This means the
            filenames only contain the relative path to the file, which makes it easier to see where the file is.
            </para>
            <para>
            <b>&lt;includeCode&gt;</b>: This will include the lines of code that were duplicated into the output. These can
            then be seen in the web dashboard. This meakes it easy to see the code that has been duplicated.
            </para>
            <para>
            These features work by post-processing the XML output from dupfinder. That is, once dupfinder has finished, the
            task loads the XML file, finds all the elements that need changing and changes them as required. For the code
            inclusion, it will also open the relevant code files and extract the lines of code as needed.
            </para>
            </remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.DupFinderTask.DefaultPriority">
            <summary>Default priority class</summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.DupFinderTask.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Tasks.DupFinderTask"/> class.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.DupFinderTask.#ctor(ThoughtWorks.CruiseControl.Core.Util.ProcessExecutor)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Tasks.DupFinderTask"/> class.
            </summary>
            <param name="executor">The executor to use.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.DupFinderTask.Execute(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Run the task.
            </summary>
            <param name="result">The result to use.</param>
            <returns>
            True if the task was successful, false otherwise.
            </returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.DupFinderTask.GetProcessFilename">
            <summary>
            Retrieve the executable to use.
            </summary>
            <returns>The filename of the process to execute.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.DupFinderTask.GetProcessBaseDirectory(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Retrieve the base directory.
            </summary>
            <param name="result">The result to use.</param>
            <returns>The base directory to use.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.DupFinderTask.GetProcessTimeout">
            <summary>
            Get the time-out period.
            </summary>
            <returns>The time-out period in milliseconds.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.DupFinderTask.GetProcessArguments(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Retrieve the arguments
            </summary>
            <param name="result">The result to use.</param>
            <returns>The arguments to pass to the process.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.DupFinderTask.GetProcessPriorityClass">
            <summary>
            Gets the requested priority class value for this Task.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.DupFinderTask.RemoveInputDir(System.Xml.XmlDocument)">
            <summary>
            Removes the input directory from the filenames.
            </summary>
            <param name="document">The document containing the data.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.DupFinderTask.ImportCode(System.Xml.XmlDocument)">
            <summary>
            Imports the duplicated code lines.
            </summary>
            <param name="document">The document to use.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.DupFinderTask.CompareFileNodes(System.Xml.XmlElement,System.Xml.XmlElement)">
            <summary>
            Compares two file nodes.
            </summary>
            <param name="firstNode">The first node.</param>
            <param name="secondNode">The second node.</param>
            <returns>
            Condition Less than 0 firstNode is less than secondNode. 0 firstNode equals secondNode.
            Greater than 0 firstNode is greater than secondNode.
            </returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.DupFinderTask.QuoteSpaces(System.String)">
            <summary>
            Adds quotes to a string if it contains spaces.
            </summary>
            <param name="value">The string to check.</param>
            <returns>The string with quotes if needed.</returns>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.DupFinderTask.Executable">
            <summary>
            The executable to use.
            </summary>
            <version>1.5</version>
            <default>dupfinder</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.DupFinderTask.Priority">
            <summary>
            The priority class of the spawned process.
            </summary>
            <version>1.5</version>
            <default>Normal</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.DupFinderTask.InputDir">
            <summary>
            The input directory to scan. If relative, this will be relative to the project working directory.
            </summary>
            <version>1.5</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.DupFinderTask.FileMask">
            <summary>
            The file mask to use.
            </summary>
            <version>1.5</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.DupFinderTask.Focus">
            <summary>
            The name of the file to focus on.
            </summary>
            <version>1.5</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.DupFinderTask.TimeOut">
            <summary>
            The time-out period in seconds.
            </summary>
            <version>1.5</version>
            <default>600</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.DupFinderTask.Threshold">
            <summary>
            The threshold is the number of consecutive lines that have to be the same before it is considered a
            duplicate.
            </summary>
            <version>1.5</version>
            <default>5</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.DupFinderTask.Width">
            <summary>
            The first line of a duplicate must contain at least this many non-white-space characters.
            </summary>
            <version>1.5</version>
            <default>2</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.DupFinderTask.Recurse">
            <summary>
            To find files that match the filemask in current directory and subdirectories.
            </summary>
            <version>1.5</version>
            <default>false</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.DupFinderTask.ShortenFileNames">
            <summary>
            Whether to shorten filenames.
            </summary>
            <version>1.5</version>
            <default>false</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.DupFinderTask.IncludeCode">
            <summary>
            Whether to include the code that has been duplicated.
            </summary>
            <version>1.5</version>
            <default>false</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.DupFinderTask.LinesToExclude">
            <summary>
            The lines to exclude.
            </summary>
            <version>1.5</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.DupFinderTask.FilesToExclude">
            <summary>
            The files to exclude.
            </summary>
            <version>1.5</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.DupFinderTask.logger">
            <summary>
            Gets or sets the logger to use.
            </summary>
            <value>The logger.</value>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Tasks.DynamicValueUtility">
            <summary>
            Utility class for setting dynamic values.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.DynamicValueUtility.FindProperty(System.Object,System.String)">
            <summary>
            Attempts to find a property on an objec using reflection attributes.
            </summary>
            <param name="value"></param>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.DynamicValueUtility.FindActualProperty(System.Object,System.String)">
            <summary>
            Attempts to find a reflector property.
            </summary>
            <param name="value">The value.</param>
            <param name="reflectorProperty">The reflector property.</param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.DynamicValueUtility.FindTypedValue(System.Collections.IEnumerable,System.String)">
            <summary>
            Finds a keyed value.
            </summary>
            <param name="values">The enumeration containing the values.</param>
            <param name="typeName"></param>
            <returns>The matching value, if found, null otherwise.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.DynamicValueUtility.FindKeyedValue(System.Collections.IEnumerable,System.String,System.String)">
            <summary>
            Finds a keyed value.
            </summary>
            <param name="values">The enumeration containing the values.</param>
            <param name="keyName">The name of the key.</param>
            <param name="keyValue">The value of the key.</param>
            <returns>The matching value, if found, null otherwise.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.DynamicValueUtility.SplitPropertyName(System.String)">
            <summary>
            Splits a property name into its component parts.
            </summary>
            <param name="propertyName">The property to split.</param>
            <returns>An array of component parts.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.DynamicValueUtility.ConvertValue(System.String,System.String,System.Collections.Generic.IEnumerable{ThoughtWorks.CruiseControl.Remote.Parameters.ParameterBase})">
            <summary>
            Performs any conversion required by the original parameter definition.
            </summary>
            <param name="parameterName">The name of the parameter.</param>
            <param name="inputValue">The input value.</param>
            <param name="parameterDefinitions">The definitions.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.DynamicValueUtility.ConvertXmlToDynamicValues(Exortech.NetReflector.NetReflectorTypeTable,System.Xml.XmlNode,System.String[])">
            <summary>
            Check for and convert inline XML dynamic value notation into <see cref="T:ThoughtWorks.CruiseControl.Core.Tasks.IDynamicValue"/> definitions.
            </summary>
            <param name="typeTable">The type table.</param>
            <param name="inputNode">The node to process.</param>
            <param name="exclusions">Any elements to exclude.</param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.DynamicValueUtility.AddElement(System.Xml.XmlElement,System.String,System.String)">
            <summary>
            Adds an XML element.
            </summary>
            <param name="parent"></param>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.DynamicValueUtility.CheckForExclusion(System.Xml.XmlNode,System.String[])">
            <summary>
            Check to see if the node should be excluded.
            </summary>
            <param name="node"></param>
            <param name="exclusions"></param>
            <returns></returns>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Tasks.DynamicValueUtility.PropertyValue">
            <summary>
            Defines a property value.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.DynamicValueUtility.PropertyValue.ChangeProperty(System.Object)">
            <summary>
            Changes the value of the property.
            </summary>
            <param name="value">The new value to set.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.DynamicValueUtility.PropertyValue.ChangePropertyValue(System.Object)">
            <summary>
            Change the value when the source is a property.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.DynamicValueUtility.PropertyValue.ChangeFieldValue(System.Object)">
            <summary>
            Change the value when the source is a field.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.DynamicValueUtility.PropertyValue.Source">
            <summary>
            The source of the property.
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.DynamicValueUtility.PropertyValue.Property">
            <summary>
            The property.
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.DynamicValueUtility.PropertyValue.Value">
            <summary>
            The current value of the property.
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Tasks.DynamicValueUtility.PropertyPart">
            <summary>
            Defines a part of a property.
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.DynamicValueUtility.PropertyPart.Name">
            <summary>
            The name of the property.
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.DynamicValueUtility.PropertyPart.KeyName">
            <summary>
            The name of the key
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.DynamicValueUtility.PropertyPart.KeyValue">
            <summary>
            The value of the key
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.DynamicValueUtility.PropertyPart.Index">
            <summary>
            The index of the item in the array.
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Tasks.FakeTask">
            <summary>
            <para>Runs a FAKE - F# Make script.</para>
            <para>
            "FAKE - F# Make" is a build automation system. Due to its integration in F#, all benets of the .NET Framework and
            functional programming can be used, including the extensive class library,
            powerful debuggers and integrated development environments like
            Visual Studio 2008 or SharpDevelop, which provide syntax highlighting and code completion.
            </para>
            <para>
            <list type="bullet">
            <item>
            The Google group can be found at: http://groups.google.com/group/fsharpMake
            </item>
            <item>
            More information on: http://bitbucket.org/forki/fake/wiki/Home
            </item>
            </list>
            </para>
            </summary>
            <title>FAKE - F# Make Task</title>
            <version>1.6</version>
            <example>
            <code title="Minimalist example">
            &lt;fake&gt;
            &lt;buildFile&gt;build.fsx&lt;/buildFile&gt;
            &lt;/fake&gt;
            </code>
            <code title="Full example">
            &lt;fake&gt;
            &lt;executable&gt;Tools\FAKE.exe&lt;/executable&gt;
            &lt;baseDirectory&gt;C:\Build\Project1\&lt;/baseDirectory&gt;
            &lt;buildFile&gt;build.fsx&lt;/buildFile&gt;
            &lt;buildTimeoutSeconds&gt;1200&lt;/buildTimeoutSeconds&gt;
            &lt;/fake&gt;
            </code>
            </example>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.FakeTask.defaultExecutable">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.FakeTask.DefaultBuildTimeout">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.FakeTask.logFilename">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.FakeTask.DefaultPriority">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.FakeTask.LogFileId">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.FakeTask.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Tasks.FakeTask"/> class.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.FakeTask.#ctor(ThoughtWorks.CruiseControl.Core.Util.ProcessExecutor)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Tasks.FakeTask"/> class.	
            </summary>
            <param name="executor">The executor.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.FakeTask.Execute(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Execute the actual task functionality.
            </summary>
            <param name="result">The result to use.</param>
            <returns><c>true</c> if the task was successful; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.FakeTask.GetProcessFilename">
            <summary>
            Gets the process filename.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.FakeTask.GetProcessArguments(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Gets the process arguments.	
            </summary>
            <param name="result">The result.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.FakeTask.GetProcessBaseDirectory(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Gets the process base directory.	
            </summary>
            <param name="result">The result.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.FakeTask.GetProcessPriorityClass">
            <summary>
            Gets the process priority class.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.FakeTask.GetProcessTimeout">
            <summary>
            Gets the process timeout.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.FakeTask.ToString">
            <summary>
            Toes the string.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.FakeTask.Executable">
            <summary>
            The location of the FAKE executable.
            </summary>
            <version>1.6</version>
            <default>FAKE.exe</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.FakeTask.ConfiguredBaseDirectory">
            <summary>
            The directory to run FAKE in.
            </summary>
            <version>1.6</version>
            <default>Project Working Directory</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.FakeTask.Priority">
            <summary>
            The priority class of the spawned process.
            </summary>
            <version>1.6</version>
            <default>Normal</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.FakeTask.BuildTimeoutSeconds">
            <summary>
            The maximum number of seconds that the build may take.  If the build process takes longer than this period, it will be killed.
            Specify this value as zero to disable process timeouts.
            </summary>
            <version>1.6</version>
            <default>600</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.FakeTask.BuildFile">
            <summary>
            The name of the build file to run, relative to the baseDirectory. 
            </summary>
            <version>1.6</version>
            <default>Default build field in the working directory</default>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Tasks.FBVariable">
            <summary>
            Defines a variable to pass to FinalBuilder.
            </summary>
            <title>FBVariable</title>
            <version>1.3</version>
            <example>
            <code>
            &lt;FBVariable name="variable" value="something" /&gt;
            </code>
            </example>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.FBVariable.ToString">
            <summary>
            Toes the string.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.FBVariable.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Tasks.FBVariable"/> class.	
            </summary>
            <param name="name">The name.</param>
            <param name="avalue">The avalue.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.FBVariable.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Tasks.FBVariable"/> class.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.FBVariable.Name">
            <summary>
            The name of the variable.
            </summary>
            <version>1.3</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.FBVariable.Value">
            <summary>
            The value for the variable.
            </summary>
            <version>1.3</version>
            <default>n/a</default>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Tasks.FtpTask">
            <summary>
            <para>
            The ftp task / publisher allows to download or upload files/ folders, for example, uploading a new version of a web page to ftp site
            of an ISP.
            </para>
            </summary>
            <title>FTP Task / Publisher </title>
            <version>1.5</version>
            <example>
            <code>
            &lt;ftp&gt;
            &lt;serverName&gt;ftp.isp.com&lt;/serverName&gt;
            &lt;userName&gt;john&lt;/userName&gt;
            &lt;password&gt;doe&lt;/password&gt;
            &lt;action&gt;UploadFolder&lt;/action&gt;
            &lt;ftpFolderName&gt;site/config&lt;/ftpFolderName&gt;
            &lt;localFolderName&gt;d:\website\config&lt;/localFolderName&gt;
            &lt;recursiveCopy&gt;true&lt;/recursiveCopy&gt;
            &lt;/ftp&gt;
            </code>
            </example>
            <remarks>
            <includePage>Integration Properties</includePage>
            </remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.FtpTask.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Tasks.FtpTask"/> class.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.FtpTask.Execute(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Executes the specified result.	
            </summary>
            <param name="result">The result.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.FtpTask.ServerName">
            <summary>
            The name of the server to connect to.
            </summary>
            <version>1.5</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.FtpTask.UserName">
            <summary>
            The username to log in with.
            </summary>
            <version>1.5</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.FtpTask.Password">
            <summary>
            The password to use.
            </summary>
            <version>1.5</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.FtpTask.UseActiveConnectionMode">
            <summary>
            Whether to use active connection mode or not.
            </summary>
            <version>1.5</version>
            <default>true</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.FtpTask.Action">
            <summary>
            The action to perform.
            </summary>
            <version>1.5</version>
            <default>DownloadFolder</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.FtpTask.FtpFolderName">
            <summary>
            The path to the folder to use on the FTP server.
            </summary>
            <version>1.5</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.FtpTask.LocalFolderName">
            <summary>
            The to the folder to use on the local machine.
            </summary>
            <version>1.5</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.FtpTask.RecursiveCopy">
            <summary>
            Whether to perform a recursive copy or not.
            </summary>
            <version>1.5</version>
            <default>true</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.FtpTask.TimeDifference">
            <summary>
            Time difference between server and client (relative to client) in hours.
            </summary>
            <version>1.6</version>
            <default>0</default>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Tasks.FtpTask.FtpAction">
            <summary>
            	
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.FtpTask.FtpAction.UploadFolder">
            <summary>
            Uploads the specified folder to the ftp server
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.FtpTask.FtpAction.DownloadFolder">
            <summary>
            Downloads the specified folder from the ftp server
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Tasks.GeneralTaskResult">
            <summary>
            A general task result.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.GeneralTaskResult.#ctor(System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Tasks.GeneralTaskResult"/> class.
            </summary>
            <param name="succeeded">if set to <c>true</c> [succeeded].</param>
            <param name="data">The data.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.GeneralTaskResult.CheckIfSuccess">
            <summary>
            Checks whether the result was successful.
            </summary>
            <returns>
            <c>true</c> if the result was successful, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.GeneralTaskResult.Data">
            <summary>
            Gets the data.
            </summary>
            <value>The data from the result.</value>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Tasks.HttpRequestHeader">
            <summary>
            A header for an HTTP request.
            </summary>
            <title>HTTP Request Header</title>
            <version>1.5</version>
            <example>
            <code>
            &lt;header name="name" value="value" /&gt;
            </code>
            </example>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.HttpRequestHeader.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <default>n/a</default>
            <version>1.5</version>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.HttpRequestHeader.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value of the header.</value>
            <default>n/a</default>
            <version>1.5</version>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Tasks.HttpRequestSettings">
            <summary>
            <para>
            The settings for an HTTP request.
            </para>
            </summary>
            <title>HTTP Settings</title>
            <version>1.5</version>
            <example>
            <code title="Minimalist example">
            &lt;httpRequest&gt;
            &lt;uri&gt;http://somewhere.com&lt;/uri&gt;
            &lt;/httpRequest&gt;
            </code>
            <code title="Full example">
            &lt;httpRequest&gt;
            &lt;method&gt;GET&lt;/method&gt;
            &lt;uri&gt;http://somewhere.com/&lt;/uri&gt;
            &lt;useDefaultCredentials&gt;false&lt;/useDefaultCredentials&gt;
            &lt;/httpRequest&gt;
            </code>
            </example>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.HttpRequestSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Tasks.HttpRequestSettings"/> class.
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.HttpRequestSettings.Method">
            <summary>
            The method to use.
            </summary>
            <version>1.5</version>
            <default>GET</default>
            <remarks>
            This can be any valid HTTP method, e.g. GET, POST, etc.
            </remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.HttpRequestSettings.HasMethod">
            <summary>
            Gets a value indicating whether this instance has method.
            </summary>
            <value>
            <c>true</c> if this instance has method; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.HttpRequestSettings.Headers">
            <summary>
            The HTTP headers to send.
            </summary>
            <version>1.5</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.HttpRequestSettings.Body">
            <summary>
            The body of the request to send.
            </summary>
            <version>1.5</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.HttpRequestSettings.HasBody">
            <summary>
            Gets a value indicating whether this instance has body.
            </summary>
            <value><c>true</c> if this instance has body; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.HttpRequestSettings.HasSendFile">
            <summary>
            Gets a value indicating whether this instance has send file.
            </summary>
            <value>
            <c>true</c> if this instance has send file; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.HttpRequestSettings.SendFile">
            <summary>
            A file to send in the request.
            </summary>
            <version>1.5</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.HttpRequestSettings.Uri">
            <summary>
            The URL to make the request to.
            </summary>
            <version>1.5</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.HttpRequestSettings.Timeout">
            <summary>
            The timeout period before cancelling the request.
            </summary>
            <version>1.5</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.HttpRequestSettings.OverrideTimeout">
            <summary>
            Gets or sets the override timeout.
            </summary>
            <value>The override timeout.</value>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.HttpRequestSettings.HasTimeout">
            <summary>
            Gets a value indicating whether this instance has timeout.
            </summary>
            <value>
            <c>true</c> if this instance has timeout; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.HttpRequestSettings.ReadWriteTimeout">
            <summary>
            The read/write timeout period.
            </summary>
            <version>1.5</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.HttpRequestSettings.HasReadWriteTimeout">
            <summary>
            Gets a value indicating whether this instance has read write timeout.
            </summary>
            <value>
            <c>true</c> if this instance has read write timeout; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.HttpRequestSettings.Credentials">
            <summary>
            The credentials to use in the request.
            </summary>
            <version>1.5</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.HttpRequestSettings.HasCredentials">
            <summary>
            Gets a value indicating whether this instance has credentials.
            </summary>
            <value>
            <c>true</c> if this instance has credentials; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.HttpRequestSettings.HasHeaders">
            <summary>
            Gets a value indicating whether this instance has headers.
            </summary>
            <value>
            <c>true</c> if this instance has headers; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.HttpRequestSettings.UseDefaultCredentials">
            <summary>
            Whether to use the default credentials or not.
            </summary>
            <version>1.5</version>
            <default>false</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.HttpRequestSettings.HasOverrideTimeout">
            <summary>
            Gets a value indicating whether this instance has override timeout.
            </summary>
            <value>
            <c>true</c> if this instance has override timeout; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Tasks.HttpStatusTask">
            <summary>
            <para>
            Sends an HTTP request to the specified URL.
            </para>
            </summary>
            <title>HTTP Status Task</title>
            <version>1.5</version>
            <example>
            <code title="Minimalist example">
            &lt;checkHttpStatus&gt;
            &lt;httpRequest&gt;
            &lt;uri&gt;http://somewhere.com&lt;/uri&gt;
            &lt;/httpRequest&gt;
            &lt;/checkHttpStatus&gt;
            </code>
            <code title="Full example">
            &lt;checkHttpStatus&gt;
            &lt;dynamicValues /&gt;
            &lt;includeContent&gt;False&lt;/includeContent&gt;
            &lt;httpRequest&gt;
            &lt;method&gt;GET&lt;/method&gt;
            &lt;uri&gt;http://somewhere.com/&lt;/uri&gt;
            &lt;useDefaultCredentials&gt;false&lt;/useDefaultCredentials&gt;
            &lt;/httpRequest&gt;
            &lt;retries&gt;3&lt;/retries&gt;
            &lt;successStatusCodes&gt;200&lt;/successStatusCodes&gt;
            &lt;/checkHttpStatus&gt;
            </code>
            </example>
            <remarks>
            <para>
            Task supplied by Patrik Husfloen.
            </para>
            </remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.HttpStatusTask.successStatusCodes">
            <summary>
            The successful status codes.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.HttpStatusTask.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Tasks.HttpStatusTask"/> class.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.HttpStatusTask.Execute(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Execute the actual task functionality.
            </summary>
            <param name="result">The current build result.</param>
            <returns>
            True if the task was successful, false otherwise.
            </returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.HttpStatusTask.GetRequestStatus(ThoughtWorks.CruiseControl.Core.Tasks.HttpRequestSettings)">
            <summary>
            Gets the request status.
            </summary>
            <param name="settings">The settings.</param>
            <returns>A <see cref="T:ThoughtWorks.CruiseControl.Core.Tasks.HttpStatusTask.HttpRequestStatus"/>.</returns>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.HttpStatusTask.SuccessStatusCodes">
            <summary>
            The list of exit codes that indicate success, separated by commas.
            </summary>
            <version>1.5</version>
            <default>200</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.HttpStatusTask.RequestSettings">
            <summary>
            The request settings.
            </summary>
            <version>1.5</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.HttpStatusTask.Retries">
            <summary>
            The number of retries to allow.
            </summary>
            <version>1.5</version>
            <default>3</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.HttpStatusTask.IncludeContent">
            <summary>
            Whether to include the content of the call in the log.
            </summary>
            <version>1.5</version>
            <default>false</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.HttpStatusTask.Timeout">
            <summary>
            The timeout period to allow.
            </summary>
            <version>1.5</version>
            <default>5 seconds</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.HttpStatusTask.HasTimeout">
            <summary>
            Gets a value indicating whether this instance has timeout.
            </summary>
            <value>
            <c>true</c> if this instance has timeout; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.HttpStatusTask.RetryDelay">
            <summary>
            Gets or sets the retry delay.
            </summary>
            <value>The retry delay.</value>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Tasks.HttpStatusTask.HttpRequestStatus">
            <summary>
            An HTTP request status.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.HttpStatusTask.HttpRequestStatus.WriteTo(System.Xml.XmlWriter,System.Boolean)">
            <summary>
            Writes to the specified writer.
            </summary>
            <param name="writer">The writer to use.</param>
            <param name="writeContent">iF set to <c>true</c> then the content will be written.</param>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.HttpStatusTask.HttpRequestStatus.Settings">
            <summary>
            Gets or sets the settings.
            </summary>
            <value>The settings.</value>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.HttpStatusTask.HttpRequestStatus.Content">
            <summary>
            Gets or sets the content.
            </summary>
            <value>The content.</value>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.HttpStatusTask.HttpRequestStatus.StatusCode">
            <summary>
            Gets or sets the status code.
            </summary>
            <value>The status code.</value>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.HttpStatusTask.HttpRequestStatus.StatusDescription">
            <summary>
            Gets or sets the status description.
            </summary>
            <value>The status description.</value>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.HttpStatusTask.HttpRequestStatus.TimedOut">
            <summary>
            Gets or sets a value indicating whether [timed out].
            </summary>
            <value><c>true</c> if [timed out]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.HttpStatusTask.HttpRequestStatus.Success">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:ThoughtWorks.CruiseControl.Core.Tasks.HttpStatusTask.HttpRequestStatus"/> is success.
            </summary>
            <value><c>true</c> if success; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.HttpStatusTask.HttpRequestStatus.ContentIsBase64Encoded">
            <summary>
            Gets or sets a value indicating whether [content is base64 encoded].
            </summary>
            <value>
            <c>true</c> if [content is base64 encoded]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.HttpStatusTask.HttpRequestStatus.Duration">
            <summary>
            Gets or sets the duration.
            </summary>
            <value>The duration.</value>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.HttpStatusTask.HttpRequestStatus.RequestTime">
            <summary>
            Gets or sets the request time.
            </summary>
            <value>The request time.</value>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.HttpStatusTask.HttpRequestStatus.ResponseEncoding">
            <summary>
            Gets or sets the response encoding.
            </summary>
            <value>The response encoding.</value>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.HttpStatusTask.HttpRequestStatus.Exception">
            <summary>
            Gets or sets the exception.
            </summary>
            <value>The exception.</value>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.HttpStatusTask.HttpRequestStatus.ContentEncoding">
            <summary>
            Gets or sets the content encoding.
            </summary>
            <value>The content encoding.</value>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.HttpStatusTask.HttpRequestStatus.CharacterSet">
            <summary>
            Gets or sets the character set.
            </summary>
            <value>The character set.</value>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.HttpStatusTask.HttpRequestStatus.ContentType">
            <summary>
            Gets or sets the type of the content.
            </summary>
            <value>The type of the content.</value>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.HttpStatusTask.HttpRequestStatus.Headers">
            <summary>
            Gets or sets the headers.
            </summary>
            <value>The headers.</value>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Tasks.MergeFileSerialiser">
            <summary>
            Serialise/deserialise a merge file.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.MergeFileSerialiser.#ctor(Exortech.NetReflector.Util.ReflectorMember,Exortech.NetReflector.ReflectorPropertyAttribute)">
            <summary>
            Initialise a new <see cref="T:ThoughtWorks.CruiseControl.Core.Tasks.MergeFileSerialiser"/>.
            </summary>
            <param name="info"></param>
            <param name="attribute"></param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.MergeFileSerialiser.Read(System.Xml.XmlNode,Exortech.NetReflector.NetReflectorTypeTable)">
            <summary>
            Read a node.
            </summary>
            <param name="node"></param>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.MergeFileSerialiser.Write(System.Xml.XmlWriter,System.Object)">
            <summary>
            Write a node.
            </summary>
            <param name="writer"></param>
            <param name="target"></param>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Tasks.MergeFileSerialiserFactory">
            <summary>
            Generate a serialiser for deserialising merge files.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.MergeFileSerialiserFactory.Create(Exortech.NetReflector.Util.ReflectorMember,Exortech.NetReflector.ReflectorPropertyAttribute)">
            <summary>
            Create the serialiser.
            </summary>
            <param name="memberInfo"></param>
            <param name="attribute"></param>
            <returns></returns>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Tasks.MergeFileInfo">
            <summary>
            Details on a file to merge.
            </summary>
            <title>Merge File</title>
            <version>1.0</version>
            <example>
            <code title="Minimalist Example">
            &lt;file&gt;&lt;!-- path to file --&gt;&lt;/file&gt;
            </code>
            <code title="Full Example">
            &lt;file action="Copy" deleteAfterMerge="false"&gt;
            &lt;path&gt;
            &lt;!-- path to file --&gt;
            &lt;/path&gt;
            &lt;/file&gt;
            </code>
            </example>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.MergeFileInfo.FileName">
            <summary>
            The name of the file to merge.
            </summary>
            <version>1.0</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.MergeFileInfo.MergeAction">
            <summary>
            The type of the file to merge.
            </summary>
            <version>1.5</version>
            <default>Merge</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.MergeFileInfo.DeleteAfterMerge">
            <summary>
            Delete the file after merging if set to true.
            </summary>
            <version>1.5</version>
            <default>false</default>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Tasks.MergeFileInfo.MergeActionType">
            <summary>
            The type of merge to perform.
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.MergeFileInfo.MergeActionType.Merge">
            <summary>
            Merge the files into the report file.
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.MergeFileInfo.MergeActionType.Copy">
            <summary>
            Copy the files into the target folder.
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.MergeFileInfo.MergeActionType.CData">
            <summary>
            Merge the data in a CData section.
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.MergeFileInfo.MergeActionType.IndexCopy">
            <summary>
            The file is an index file for selecting which files to copy.
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Tasks.NCoverReportTask">
            <summary>
            <para>
            Generate a code coverage report using NCover.
            </para>
            <para type="tip">
            NCover is a commerical application that will profile code while unit tests are running. The tool is available from
            http://www.ncover.com/.
            </para>
            <para type="info">
            <title>Supported Versions</title>
            CruiseControl.NET only supports NCover 3.x currently.
            </para>
            </summary>
            <title>NCover Report Task</title>
            <version>1.5</version>
            <example>
            <code title="To produce a summary report with a minimum coverage of 95%">
            &lt;ncoverReport&gt;
            &lt;executable&gt;C:\Program Files\NCover\NCover.Reporting.exe&lt;/executable&gt;
            &lt;outputDir&gt;ncover\reports&lt;/outputDir&gt;
            &lt;reports&gt;
            &lt;report&gt;Summary&lt;/report&gt;
            &lt;/reports&gt;
            &lt;minimumThresholds&gt;
            &lt;coverageThreshold metric="SymbolCoverage" value="95"/&gt;
            &lt;/minimumThresholds&gt;
            &lt;/ncoverReport&gt;
            </code>
            <code title="To generate a full report that is ordered by coverage percentage in a descending order">
            &lt;ncoverReport&gt;
            &lt;executable&gt;C:\Program Files\NCover\NCover.Reporting.exe&lt;/executable&gt;
            &lt;outputDir&gt;ncover\reports&lt;/outputDir&gt;
            &lt;reports&gt;
            &lt;report&gt;FullCoverageReport&lt;/report&gt;
            &lt;/reports&gt;
            &lt;sortBy&gt;CoveragePercentageDescending&lt;/sortBy&gt;
            &lt;/ncoverReport&gt;
            </code>
            </example>
            <remarks>
            <para>
            This task requires a profile to be completed before running. See the <link>NCover Profiler Task</link>.
            </para>
            <para>
            This task calls NCover.Reporting to generate the reports. Full details on this tool is available at
            http://docs.ncover.com/ref/3-0/ncover-reporting/. Additional details on the mapped arguments can be found there.
            </para>
            </remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.NCoverReportTask.#ctor">
            <summary>
            Initialise a new <see cref="T:ThoughtWorks.CruiseControl.Core.Tasks.NCoverReportTask"/>.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.NCoverReportTask.#ctor(ThoughtWorks.CruiseControl.Core.Util.ProcessExecutor)">
            <summary>
            Initialise a new <see cref="T:ThoughtWorks.CruiseControl.Core.Tasks.NCoverReportTask"/> with a <see cref="T:ThoughtWorks.CruiseControl.Core.Util.ProcessExecutor"/>.
            </summary>
            <param name="executor"></param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.NCoverReportTask.Execute(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Run the task.
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.NCoverReportTask.GetProcessFilename">
            <summary>
            Retrieve the executable to use.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.NCoverReportTask.GetProcessBaseDirectory(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Retrieve the base directory.
            </summary>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.NCoverReportTask.GetProcessTimeout">
            <summary>
            Get the time-out period.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.NCoverReportTask.GetProcessArguments(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Retrieve the arguments
            </summary>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.NCoverReportTask.GetProcessPriorityClass">
            <summary>
            Gets the requested priority class value for this Task.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.NCoverReportTask.RootPath(System.String,System.Boolean)">
            <summary>
            Ensures that a path is rooted.
            </summary>
            <param name="path"></param>
            <param name="doubleQuote"></param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.NCoverReportTask.ListFileDifferences(System.Collections.Generic.Dictionary{System.String,System.DateTime},System.IO.DirectoryInfo)">
            <summary>
            Generate a list of differences in files.
            </summary>
            <param name="originalList"></param>
            <param name="outputDirectory"></param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.NCoverReportTask.GenerateOriginalFileList(System.IO.DirectoryInfo)">
            <summary>
            Generate a list of the original files.
            </summary>
            <param name="outputDirectory"></param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.NCoverReportTask.GenerateReportList(ThoughtWorks.CruiseControl.Core.Util.ProcessArgumentBuilder)">
            <summary>
            Generate the list of reports to generate.
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.NCoverReportTask.Executable">
            <summary>
            The executable to use.
            </summary>
            <version>1.5</version>
            <default>NCover.Reporting</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.NCoverReportTask.TimeOut">
            <summary>
            The time-out period in seconds. If the task does no finish running in this time it will be terminated. 
            </summary>
            <version>1.5</version>
            <default>600</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.NCoverReportTask.BaseDirectory">
            <summary>
            The base directory to use. All relative parameters will be relative to this parameter. 
            </summary>
            <version>1.5</version>
            <default>Project Working Directory</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.NCoverReportTask.WorkingDirectory">
            <summary>
            The working directory for the executable. If relative, this will be relative to baseDir.
            </summary>
            <version>1.5</version>
            <default>None</default>
            <remarks>
            <b>Maps to //w</b>
            </remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.NCoverReportTask.Priority">
            <summary>
            The priority class of the spawned process.
            </summary>
            <version>1.5</version>
            <default>Normal</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.NCoverReportTask.CoverageFile">
            <summary>
            The location to read the coverage date from. If relative, this will be relative to baseDir.
            </summary>
            <version>1.5</version>
            <default>coverage.xml</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.NCoverReportTask.ClearCoverageFilters">
            <summary>
            Should the coverage filters be cleared.
            </summary>
            <version>1.5</version>
            <default>false</default>
            <remarks>
            <b>Maps to //ccf</b>
            </remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.NCoverReportTask.CoverageFilters">
            <summary>
            The filters to apply.
            </summary>
            <version>1.5</version>
            <default>None</default>
            <remarks>
            <b>Maps to //cf</b>
            </remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.NCoverReportTask.MinimumThresholds">
            <summary>
            The minimum coverage thresholds.
            </summary>
            <version>1.5</version>
            <default>None</default>
            <remarks>
            <b>Maps to //mc</b>
            </remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.NCoverReportTask.UseMinimumCoverage">
            <summary>
            Whether to use minimum coverage or not.
            </summary>
            <version>1.5</version>
            <default>false</default>
            <remarks>
            <b>Maps to //mcsc</b>
            </remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.NCoverReportTask.XmlReportFilter">
            <summary>
            The type of report filtering to use.
            </summary>
            <version>1.5</version>
            <default>Default</default>
            <remarks>
            <b>Maps to //rdf</b>
            </remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.NCoverReportTask.SatisfactoryThresholds">
            <summary>
            The satisfactory coverage thresholds.
            </summary>
            <version>1.5</version>
            <default>None</default>
            <remarks>
            <b>Maps to //sct</b>
            </remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.NCoverReportTask.NumberToReport">
            <summary>
            The maximum number of items to report.
            </summary>
            <version>1.5</version>
            <default>-1</default>
            <remarks>
            <b>Maps to //smf</b>
            </remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.NCoverReportTask.TrendOutputFile">
            <summary>
            The file to append the trend to.
            </summary>
            <version>1.5</version>
            <default>None</default>
            <remarks>
            <b>Maps to //at</b>
            </remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.NCoverReportTask.TrendInputFile">
            <summary>
            The file to import the trend from.
            </summary>
            <version>1.5</version>
            <default>None</default>
            <remarks>
            <b>Maps to //lt</b>
            </remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.NCoverReportTask.BuildId">
            <summary>
            A custom build id to attach.
            </summary>
            <version>1.5</version>
            <default>The build label</default>
            <remarks>
            <b>Maps to //bi</b>
            </remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.NCoverReportTask.HideElements">
            <summary>
            The elements to hide.
            </summary>
            <version>1.5</version>
            <default>None</default>
            <remarks>
            <b>Maps to //hi</b>
            </remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.NCoverReportTask.OutputDir">
            <summary>
            The directory to output the reports to. If relative, this will be relative to baseDir. 
            </summary>
            <version>1.5</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.NCoverReportTask.Reports">
            <summary>
            The type of report to generate.
            </summary>
            <version>1.5</version>
            <default>FullCoverageReport</default>
            <remarks>
            <b>Maps to //or</b>
            </remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.NCoverReportTask.ProjectName">
            <summary>
            The project name to use.
            </summary>
            <version>1.5</version>
            <default>None</default>
            <remarks>
            <b>Maps to //p</b>
            </remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.NCoverReportTask.SortBy">
            <summary>
            The sort order to use.
            </summary>
            <version>1.5</version>
            <default>None</default>
            <remarks>
            <b>Maps to //so</b>
            </remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.NCoverReportTask.TopUncoveredAmount">
            <summary>
            The amount of uncovered items to cover.
            </summary>
            <version>1.5</version>
            <default>None</default>
            <remarks>
            <b>Maps to //tu</b>
            </remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.NCoverReportTask.MergeMode">
            <summary>
            The merge mode to use.
            </summary>
            <version>1.5</version>
            <default>Default</default>
            <remarks>
            <b>Maps to //mfm</b>
            </remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.NCoverReportTask.MergeFile">
            <summary>
            The file to store the merged data in. If relative, this will be relative to baseDir. 
            </summary>
            <version>1.5</version>
            <default>None</default>
            <remarks>
            <b>Maps to //s</b>
            </remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Tasks.NCoverReportTask.NCoverReportFilter">
            <summary>
            The type of report filter.
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.NCoverReportTask.NCoverReportFilter.Default">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.NCoverReportTask.NCoverReportFilter.Assembly">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.NCoverReportTask.NCoverReportFilter.Namespace">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Tasks.NCoverReportTask.NCoverReportType">
            <summary>
            The type of report to generate.
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.NCoverReportTask.NCoverReportType.FullCoverageReport">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.NCoverReportTask.NCoverReportType.Summary">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.NCoverReportTask.NCoverReportType.UncoveredCodeSections">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.NCoverReportTask.NCoverReportType.SymbolSourceCode">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.NCoverReportTask.NCoverReportType.SymbolSourceCodeClass">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.NCoverReportTask.NCoverReportType.SymbolSourceCodeClassMethod">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.NCoverReportTask.NCoverReportType.MethodSourceCode">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.NCoverReportTask.NCoverReportType.MethodSourceCodeClass">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.NCoverReportTask.NCoverReportType.MethodSourceCodeClassMethod">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.NCoverReportTask.NCoverReportType.SymbolModule">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.NCoverReportTask.NCoverReportType.SymbolModuleNamespace">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.NCoverReportTask.NCoverReportType.SymbolModuleNamespaceClass">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.NCoverReportTask.NCoverReportType.SymbolModuleNamespaceClassMethod">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.NCoverReportTask.NCoverReportType.SymbolCCModuleClassFailedCoverageTop">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.NCoverReportTask.NCoverReportType.SymbolCCModuleClassCoverageTop">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.NCoverReportTask.NCoverReportType.MethodModuleNamespaceClass">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.NCoverReportTask.NCoverReportType.MethodModuleNamespaceClassMethod">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.NCoverReportTask.NCoverReportType.MethodCCModuleClassFailedCoverageTop">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.NCoverReportTask.NCoverReportType.MethodCCModuleClassCoverageTop">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Tasks.NCoverReportTask.NCoverSortBy">
            <summary>
            The sort order to use.
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.NCoverReportTask.NCoverSortBy.None">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.NCoverReportTask.NCoverSortBy.Name">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.NCoverReportTask.NCoverSortBy.ClassLine">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.NCoverReportTask.NCoverSortBy.CoveragePercentageAscending">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.NCoverReportTask.NCoverSortBy.CoveragePercentageDescending">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.NCoverReportTask.NCoverSortBy.UnvisitedSequencePointsAscending">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.NCoverReportTask.NCoverSortBy.UnvisitedSequencePointsDescending">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.NCoverReportTask.NCoverSortBy.VisitCountAscending">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.NCoverReportTask.NCoverSortBy.VisitCountDescending">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.NCoverReportTask.NCoverSortBy.FunctionCoverageAscending">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.NCoverReportTask.NCoverSortBy.FunctionCoverageDescending">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Tasks.NCoverReportTask.NCoverMergeMode">
            <summary>
            The merge mode to use.
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.NCoverReportTask.NCoverMergeMode.Default">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.NCoverReportTask.NCoverMergeMode.KeepSourceFilters">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.NCoverReportTask.NCoverMergeMode.Destructive">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.NCoverReportTask.NCoverMergeMode.AppendFilters">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Tasks.NCoverProfileTask">
            <summary>
            <para>
            Perform a code coverage profile using NCover.
            </para>
            <para type="tip">
            NCover is a commerical application that will profile code while unit tests are running. The tool is available from
            http://www.ncover.com/.
            </para>
            <para type="info">
            <title>Supported Versions</title>
            CruiseControl.NET only supports NCover 3.x currently.
            </para>
            </summary>
            <title>NCover Profiler Task</title>
            <version>1.5</version>
            <example>
            <code>
            &lt;ncoverProfile&gt;
            &lt;executable&gt;C:\Program Files\NCover\NCover.Console.exe&lt;/executable&gt;
            &lt;program&gt;tools\nunit\nunit-console.exe&lt;/program&gt;
            &lt;testProject&gt;myproject.test.dll&lt;/testProject&gt;
            &lt;workingDir&gt;build\unittests&lt;/workingDir&gt;
            &lt;includedAssemblies&gt;myproject.*.dll&lt;/includedAssemblies&gt;
            &lt;/ncoverProfile&gt;
            </code>
            </example>
            <remarks>
            <para>
            This task calls NCover.Console to perform the profiling. Full details on this tool is available at
            http://docs.ncover.com/ref/3-0/ncover-console/. Additional details on the mapped arguments can be found there.
            </para>
            </remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.NCoverProfileTask.#ctor">
            <summary>
            Initialise a new <see cref="T:ThoughtWorks.CruiseControl.Core.Tasks.NCoverProfileTask"/>.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.NCoverProfileTask.#ctor(ThoughtWorks.CruiseControl.Core.Util.ProcessExecutor)">
            <summary>
            Initialise a new <see cref="T:ThoughtWorks.CruiseControl.Core.Tasks.NCoverProfileTask"/> with a <see cref="T:ThoughtWorks.CruiseControl.Core.Util.ProcessExecutor"/>.
            </summary>
            <param name="executor"></param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.NCoverProfileTask.Execute(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Run the task.
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.NCoverProfileTask.GetProcessFilename">
            <summary>
            Retrieve the executable to use.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.NCoverProfileTask.GetProcessBaseDirectory(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Retrieve the base directory.
            </summary>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.NCoverProfileTask.GetProcessTimeout">
            <summary>
            Get the time-out period.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.NCoverProfileTask.GetProcessArguments(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Retrieve the arguments
            </summary>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.NCoverProfileTask.GetProcessPriorityClass">
            <summary>
            Gets the requested priority class value for this Task.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.NCoverProfileTask.RootPath(System.String,System.Boolean)">
            <summary>
            Ensures that a path is rooted.
            </summary>
            <param name="path"></param>
            <param name="doubleQuote"></param>
            <returns></returns>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.NCoverProfileTask.ProgramToCover">
            <summary>
            The program to execute and collect coverage stats from.
            </summary>
            <version>1.5</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.NCoverProfileTask.TestProject">
            <summary>
            The project that contains the tests. If relative, this will be relative to baseDir. 
            </summary>
            <version>1.5</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.NCoverProfileTask.ProgramParameters">
            <summary>
            The parameters to pass to the program.
            </summary>
            <version>1.5</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.NCoverProfileTask.Executable">
            <summary>
            The executable to use.
            </summary>
            <version>1.5</version>
            <default>Ncover.Console</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.NCoverProfileTask.Priority">
            <summary>
            The priority class of the spawned process.
            </summary>
            <version>1.5</version>
            <default>Normal</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.NCoverProfileTask.TimeOut">
            <summary>
            The time-out period in seconds. If the task does no finish running in this time it will be terminated. 
            </summary>
            <version>1.5</version>
            <default>600</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.NCoverProfileTask.BaseDirectory">
            <summary>
            The base directory to use. All relative parameters will be relative to this parameter. 
            </summary>
            <version>1.5</version>
            <default>Project Working Directory</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.NCoverProfileTask.WorkingDirectory">
            <summary>
            The working directory to use. If relative, this will be relative to baseDir.
            </summary>
            <version>1.5</version>
            <default>None</default>
            <remarks>
            <b>Maps to //w</b>
            </remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.NCoverProfileTask.Publish">
            <summary>
            Whether to publish the output files or not.
            </summary>
            <version>1.5</version>
            <default>true</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.NCoverProfileTask.LogFile">
            <summary>
            The location of the NCover log file. If relative, this will be relative to baseDir.
            </summary>
            <version>1.5</version>
            <default>None</default>
            <remarks>
            <b>Maps to //l</b>
            </remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.NCoverProfileTask.LogLevel">
            <summary>
            The profiler log level.
            </summary>
            <version>1.5</version>
            <default>Default</default>
            <remarks>
            <b>Maps to //ll</b>
            </remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.NCoverProfileTask.ProjectName">
            <summary>
            The name of the project (used in the HTML report).
            </summary>
            <version>1.5</version>
            <default>None</default>
            <remarks>
            <b>Maps to //p</b>
            </remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.NCoverProfileTask.CoverageFile">
            <summary>
            The location to write the coverage file to. If relative, this will be relative to baseDir.
            </summary>
            <version>1.5</version>
            <default>Coverage.xml</default>
            <remarks>
            <b>Maps to //x</b>
            </remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.NCoverProfileTask.CoverageMetric">
            <summary>
            The coverage metric to use.
            </summary>
            <version>1.5</version>
            <default>None</default>
            <remarks>
            <b>Maps to //ct</b>
            </remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.NCoverProfileTask.ExcludedAttributes">
            <summary>
            The attributes to exclude.
            </summary>
            <version>1.5</version>
            <default>None</default>
            <remarks>
            <b>Maps to //ea</b>
            </remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.NCoverProfileTask.ExcludedAssemblies">
            <summary>
            The assemblies to exclude.
            </summary>
            <version>1.5</version>
            <default>None</default>
            <remarks>
            <b>Maps to //eas</b>
            </remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.NCoverProfileTask.ExcludedFiles">
            <summary>
            The files to exclude.
            </summary>
            <version>1.5</version>
            <default>None</default>
            <remarks>
            <b>Maps to //ef</b>
            </remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.NCoverProfileTask.ExcludedMethods">
            <summary>
            The methods to exclude.
            </summary>
            <version>1.5</version>
            <default>None</default>
            <remarks>
            <b>Maps to //em</b>
            </remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.NCoverProfileTask.ExcludedTypes">
            <summary>
            The types to exclude.
            </summary>
            <version>1.5</version>
            <default>None</default>
            <remarks>
            <b>Maps to //et</b>
            </remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.NCoverProfileTask.IncludedAttributes">
            <summary>
            The attributes to include.
            </summary>
            <version>1.5</version>
            <default>None</default>
            <remarks>
            <b>Maps to //ia</b>
            </remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.NCoverProfileTask.IncludedAssemblies">
            <summary>
            The assemblies to include.
            </summary>
            <version>1.5</version>
            <default>None</default>
            <remarks>
            <b>Maps to //ias</b>
            </remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.NCoverProfileTask.IncludedFiles">
            <summary>
            The files to include.
            </summary>
            <version>1.5</version>
            <default>None</default>
            <remarks>
            <b>Maps to //if</b>
            </remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.NCoverProfileTask.IncludedTypes">
            <summary>
            The types to include.
            </summary>
            <version>1.5</version>
            <default>None</default>
            <remarks>
            <b>Maps to //it</b>
            </remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.NCoverProfileTask.DisableAutoexclusion">
            <summary>
            Whether to turn off autoexclusion or not.
            </summary>
            <version>1.5</version>
            <default>false</default>
            <remarks>
            <b>Maps to //na</b>
            </remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.NCoverProfileTask.ProcessModule">
            <summary>
            The module to process.
            </summary>
            <version>1.5</version>
            <default>None</default>
            <remarks>
            <b>Maps to //pm</b>
            </remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.NCoverProfileTask.SymbolSearch">
            <summary>
            The symbol search policy to use.
            </summary>
            <version>1.5</version>
            <default>None</default>
            <remarks>
            <b>Maps to //ssp</b>
            </remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.NCoverProfileTask.TrendFile">
            <summary>
            The location to write the trend file to.
            </summary>
            <version>1.5</version>
            <default>None</default>
            <remarks>
            <b>Maps to //at</b>
            </remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.NCoverProfileTask.BuildId">
            <summary>
            A custom build id to attach.
            </summary>
            <version>1.5</version>
            <default>The build label</default>
            <remarks>
            <b>Maps to //bi</b>
            </remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.NCoverProfileTask.SettingsFile">
            <summary>
            The location to read the settings from. If relative, this will be relative to baseDir.
            </summary>
            <version>1.5</version>
            <default>None</default>
            <remarks>
            <b>Maps to //cr</b>
            </remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.NCoverProfileTask.Register">
            <summary>
            Temporarily enable NCover.
            </summary>
            <version>1.5</version>
            <default>false</default>
            <remarks>
            <b>Maps to //reg</b>
            </remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.NCoverProfileTask.ApplicationLoadWait">
            <summary>
            The amount of time that NCover will wait for the application to start up.
            </summary>
            <version>1.5</version>
            <default>None</default>
            <remarks>
            <b>Maps to //wal</b>
            </remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.NCoverProfileTask.CoverIis">
            <summary>
            Whether to cover IIS or not.
            </summary>
            <version>1.5</version>
            <default>false</default>
            <remarks>
            <b>Maps to //iis</b>
            </remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.NCoverProfileTask.ServiceTimeout">
            <summary>
            The timeout period for covering a service.
            </summary>
            <version>1.5</version>
            <default>None</default>
            <remarks>
            <b>Maps to //st</b>
            </remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.NCoverProfileTask.WindowsService">
            <summary>
            The windows service to cover.
            </summary>
            <version>1.5</version>
            <default>None</default>
            <remarks>
            <b>Maps to //svc</b>
            </remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Tasks.NCoverProfileTask.NCoverLogLevel">
            <summary>
            The allowed logging levels.
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.NCoverProfileTask.NCoverLogLevel.Default">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.NCoverProfileTask.NCoverLogLevel.None">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.NCoverProfileTask.NCoverLogLevel.Normal">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.NCoverProfileTask.NCoverLogLevel.Verbose">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Tasks.DataTaskResult">
            <summary>
            	
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.DataTaskResult.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Tasks.DataTaskResult"/> class.	
            </summary>
            <param name="data">The data.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.DataTaskResult.CheckIfSuccess">
            <summary>
            Checks whether the result was successful.
            </summary>
            <returns><c>true</c> if the result was successful, <c>false</c> otherwise.</returns>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.DataTaskResult.Data">
            <summary>
            Gets the data.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Tasks.DevenvTask">
            <summary>
            <para>
            Most complex build processes use <link>NAnt Task</link> or <link>MSBuild Task</link> to script the build. However, for simple
            projects that just need to build a Visual Studio.NET solution, the Visual Studio task &lt;devenv&gt; provides an easier method.
            </para>
            </summary>
            <title>Visual Studio Task</title>
            <version>1.0</version>
            <remarks>
            <para>
            If executable and version are not specified, CC.NET will search the registry for VS.NET 2010, 2008, 2005, 2003, and 2002 in that order.
            If you need to use a specific version when a newer version is installed, you should specify the version property to identify it,
            or specify the executable property to point to the location of correct version of devenv.com.
            </para>
            <para type="warning">
            This task requires you to have Visual Studio .NET installed on your integration server.
            </para>
            <para>
            Often programmers like to use a centralised project to build an entire software system. They define specific dependencies and the
            build order on that specific project to reproduce the behaviours of an nmake build.
            </para>
            <includePage>Integration Properties</includePage>
            </remarks>
            <example>
            <code title="Minimalist example">
            &lt;devenv&gt;
            &lt;solutionfile&gt;src\MyProject.sln&lt;/solutionfile&gt;
            &lt;configuration&gt;Debug&lt;/configuration&gt;
            &lt;/devenv&gt;
            </code>
            <code title="Full example">
            &lt;devenv&gt;
            &lt;solutionfile&gt;src\MyProject.sln&lt;/solutionfile&gt;
            &lt;configuration&gt;Debug&lt;/configuration&gt;
            &lt;buildtype&gt;Build&lt;/buildtype&gt;
            &lt;project&gt;MyProject&lt;/project&gt;
            &lt;executable&gt;c:\program files\Microsoft Visual Studio .NET\Common7\IDE\devenv.com&lt;/executable&gt;
            &lt;buildTimeoutSeconds&gt;600&lt;/buildTimeoutSeconds&gt;
            &lt;version&gt;VS2002&lt;/version&gt;
            &lt;/devenv&gt;
            </code>
            </example>    
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.DevenvTask.LogFilename">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.DevenvTask.VS2010_REGISTRY_PATH">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.DevenvTask.VS2008_REGISTRY_PATH">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.DevenvTask.VS2005_REGISTRY_PATH">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.DevenvTask.VS2003_REGISTRY_PATH">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.DevenvTask.VS2002_REGISTRY_PATH">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.DevenvTask.VS_REGISTRY_KEY">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.DevenvTask.DEVENV_EXE">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.DevenvTask.DEFAULT_BUILD_TIMEOUT">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.DevenvTask.DEFAULT_BUILDTYPE">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.DevenvTask.DEFAULT_PROJECT">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.DevenvTask.DEFAULT_PRIORITY">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.DevenvTask.LogFileId">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.DevenvTask.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Tasks.DevenvTask"/> class.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.DevenvTask.#ctor(ThoughtWorks.CruiseControl.Core.Util.IRegistry,ThoughtWorks.CruiseControl.Core.Util.ProcessExecutor)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Tasks.DevenvTask"/> class.	
            </summary>
            <param name="registry">The registry.</param>
            <param name="executor">The executor.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.DevenvTask.ReadDevenvExecutableFromRegistry">
            <summary>
            Get the name of the Visual Studio executable for the highest version installed on this machine.
            </summary>
            <returns>The fully-qualified pathname of the executable.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.DevenvTask.Execute(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Executes the specified result.	
            </summary>
            <param name="result">The result.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.DevenvTask.Version">
            <summary>
            The version of Visual Studio.
            </summary>
            <version>1.0</version>
            <default>See below</default>
            <values>
            <value>VS2002</value>
            <value>VS2003</value>
            <value>VS2005</value>
            <value>VS2008</value>
            <value>VS2010</value>
            <value>7.0</value>
            <value>7.1</value>
            <value>8.0</value>
            <value>9.0</value>
            <value>10.0</value>
            </values>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.DevenvTask.Executable">
            <summary>
            The path to devenv.com.
            </summary>
            <version>1.0</version>
            <default>See below</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.DevenvTask.SolutionFile">
            <summary>
            The path of the solution file to build. If relative, it is relative to the Project Working Directory. 
            </summary>
            <default>n/a</default>
            <version>1.0</version>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.DevenvTask.Configuration">
            <summary>
            The solution configuration to use (not case sensitive). 
            </summary>
            <default>n/a</default>
            <version>1.0</version>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.DevenvTask.BuildTimeoutSeconds">
            <summary>
            Number of seconds to wait before assuming that the process has hung and should be killed. 
            </summary>
            <default>600 (10 minutes)</default>
            <version>1.0</version>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.DevenvTask.BuildType">
            <summary>
            The type of build.
            </summary>
            <version>1.0</version>
            <default>rebuild</default>
            <values>
            <value>Rebuild</value>
            <value>Build</value>
            <value>Clean</value>
            </values>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.DevenvTask.Project">
            <summary>
            A specific project in the solution, if you only want to build one project (not case sensitive). 
            </summary>
            <version>1.0</version>
            <default>All projects</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.DevenvTask.Priority">
            <summary>
            The priority class of the spawned process.
            </summary>
            <version>1.5</version>
            <default>Normal</default>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Tasks.DevenvTaskResult">
            <summary>
            	
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Tasks.ProcessTaskResult">
            <summary>
            	
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.ProcessTaskResult.result">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.ProcessTaskResult.ignoreStandardOutputOnSuccess">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.ProcessTaskResult.#ctor(ThoughtWorks.CruiseControl.Core.Util.ProcessResult)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Tasks.ProcessTaskResult"/> class.	
            </summary>
            <param name="result">The result.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.ProcessTaskResult.#ctor(ThoughtWorks.CruiseControl.Core.Util.ProcessResult,System.Boolean)">
            <summary>
            Constructor of ProcessTaskResult
            </summary>
            <param name="result">Process result data.</param>
            <param name="ignoreStandardOutputOnSuccess">Set this to true if you do not want the standard output (stdout) of the process to be merged in the build log; otherwise false.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.ProcessTaskResult.WriteTo(System.Xml.XmlWriter)">
            <summary>
            Writes to.	
            </summary>
            <param name="writer">The writer.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.ProcessTaskResult.CheckIfSuccess">
            <summary>
            Checks whether the result was successful.
            </summary>
            <returns><c>true</c> if the result was successful, <c>false</c> otherwise.</returns>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.ProcessTaskResult.Data">
            <summary>
            Gets the data.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.DevenvTaskResult.#ctor(ThoughtWorks.CruiseControl.Core.Util.ProcessResult)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Tasks.DevenvTaskResult"/> class.	
            </summary>
            <param name="result">The result.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.DevenvTaskResult.TransformDevenvOutput(System.String,System.String)">
            <summary>
            Transform the devenv output streams into an XML build report fragment and return it.
            </summary>
            <param name="devenvOutput">devenv's standard output with platform-specific newlines</param>
            <param name="devenvError">devenv's standard error with platform-specific newlines</param>
            <returns>the resulting build report fragment</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.DevenvTaskResult.WriteContent(System.Xml.XmlWriter,System.String,System.Boolean)">
            <summary>
            Add the lines of output from devenv's standard output and standard error streams
            to the build results.
            </summary>
            <param name="writer">an <c>XmlWriter</c> to receive the output</param>
            <param name="messages">the messages, with platform-specific newlines between them</param>
            <param name="areErrors">True if the messages are errors, false otherwise.</param>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.DevenvTaskResult.Data">
            <summary>
            Gets the data.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Tasks.ExecutableTask">
            <summary>
            <para>
            The Executable Task lets you invoke any command line executable. It doesn't offer as much specific
            integration as (for example) the <link>NAnt Task</link>, but does allow you to hook almost anything
            up as a build process to CCNet. CCNet will examine the exit code when the executable ends and act
            accordingly.
            </para>
            </summary>
            <title>Executable Task</title>
            <version>1.0</version>
            <example>
            <code title="Minimalist example">
            &lt;exec executable="c:\projects\myproject\build.bat" /&gt;
            </code>
            <code title="Full example">
            &lt;exec&gt;
            &lt;executable&gt;make&lt;/executable&gt;
            &lt;baseDirectory&gt;D:\dev\MyProject&lt;/baseDirectory&gt;
            &lt;buildArgs&gt;all&lt;/buildArgs&gt;
            &lt;buildTimeoutSeconds&gt;10&lt;/buildTimeoutSeconds&gt;
            &lt;successExitCodes&gt;0,1,3,5&lt;/successExitCodes&gt;
            &lt;environment&gt;
            &lt;variable&gt;
            &lt;name&gt;MyVar1&lt;/name&gt;
            &lt;value&gt;Var1Value&lt;/value&gt;
            &lt;/variable&gt;
            &lt;variable name="MyVar2" value="Var2Value"/&gt;
            &lt;/environment&gt;
            &lt;/exec&gt;
            </code>
            </example>
            <remarks>
            <para type="note">
            An exit code of -1 is always treated as the operation has timed out. This will fail the build.
            </para>
            <para type="warning">
            Windows seems to change the case of environment variables occasionally. If your task target doesn't
            find one of these properties, try using all upper case or all lower case versions of these properties.
            </para>
            <heading>Frequently Asked Questions</heading>
            <para>
            <b>Does the exec task pass the integration properties via the command line?</b>
            </para>
            <para>
            No. The integration properties are only available as environment variables. As there is no way of
            knowing the way in which the external program expects these properties to be formatted as command line
            arguments, environment variables are a simple, common medium for making these values accessible. To
            pass these environment variables into an external program, have the exec task call a batch file instead
            that will pick up the environment variables, format them and pass them as command line arguments to the
            external program.
            </para>
            <para>
            <b>Using built in shell commands</b>
            </para>
            <para>
            In Windows use cmd.exe as the executable, and pass the wanted command as an argument, preceded with /c.
            This allows to execute del *.* and the like. For example :
            </para>
            <code>
            &lt;exec&gt;
            &lt;executable&gt;c:\Windows\System32\cmd.exe&lt;/executable&gt;
            &lt;buildArgs&gt;/C NET STOP "Service name"&lt;/buildArgs&gt;
            &lt;/exec&gt;
            </code>
            <para>
            The following parameters are passed to the external program using environment variables, in addition to those you specify in
            the &lt;environment&gt; element.:
            </para>
            <includePage>Integration Properties</includePage>
            </remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.ExecutableTask.DEFAULT_BUILD_TIMEOUT">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.ExecutableTask.DEFAULT_PRIORITY">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.ExecutableTask.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Tasks.ExecutableTask"/> class.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.ExecutableTask.#ctor(ThoughtWorks.CruiseControl.Core.Util.ProcessExecutor)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Tasks.ExecutableTask"/> class.	
            </summary>
            <param name="executor">The executor.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.ExecutableTask.Execute(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Run the specified executable and add its output to the build results.
            </summary>
            <param name="result">the IIntegrationResult object for the build</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.ExecutableTask.GetProcessFilename">
            <summary>
            Gets the process filename.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.ExecutableTask.GetProcessArguments(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Gets the process arguments.	
            </summary>
            <param name="result">The result.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.ExecutableTask.GetProcessBaseDirectory(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Gets the process base directory.	
            </summary>
            <param name="result">The result.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.ExecutableTask.GetProcessSuccessCodes">
            <summary>
            Gets the process success codes.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.ExecutableTask.GetProcessTimeout">
            <summary>
            Gets the process timeout.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.ExecutableTask.GetProcessPriorityClass">
            <summary>
            Gets the process priority class.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.ExecutableTask.ToString">
            <summary>
            Toes the string.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.ExecutableTask.Executable">
            <summary>
            The path of the program to run. If this is relative, then must be relative to either (a) the base
            directory, (b) the CCNet Server application, or (c) if the path doesn't contain any directory
            details then can be available in the system or application's 'path' environment variable.
            </summary>
            <version>1.0</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.ExecutableTask.Priority">
            <summary>
            The priority class of the spawned process.
            </summary>
            <version>1.5</version>
            <default>Normal</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.ExecutableTask.ConfiguredBaseDirectory">
            <summary>
            The directory to run the process in. If relative, is a subdirectory of the Project Working
            Directory.
            </summary>
            <version>1.0</version>
            <default>Project working directory</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.ExecutableTask.BuildArgs">
            <summary>
            Any command line arguments to pass in.
            </summary>
            <version>1.0</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.ExecutableTask.SuccessExitCodes">
            <summary>
            The list of exit codes that indicate success, separated by commas.
            </summary>
            <version>1.0</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.ExecutableTask.BuildTimeoutSeconds">
            <summary>
            Number of seconds to wait before assuming that the process has hung and should be killed.  If the 
            build process takes longer than this period, it will be killed.  Specify this value as zero to 
            disable process timeouts.
            </summary>
            <version>1.0</version>
            <default>600</default>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Tasks.FileTaskResult">
            <summary>
            A <see cref="T:ThoughtWorks.CruiseControl.Core.ITaskResult"/> that reads the data directly from a file.
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.FileTaskResult.dataSource">
            <summary>
            The file containing the data.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.FileTaskResult.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Tasks.FileTaskResult"/> class from a file name.
            </summary>
            <param name="filename">The name of the file.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.FileTaskResult.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Tasks.FileTaskResult"/> class from a file name.
            </summary>
            <param name="filename">The name of the file.</param>
            <param name="deleteAfterMerge">Delete file after merging.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.FileTaskResult.#ctor(System.IO.FileInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Tasks.FileTaskResult"/> class from a <see cref="T:System.IO.FileInfo"/>.
            </summary>
            <param name="file">The <see cref="T:System.IO.FileInfo"/>.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.FileTaskResult.#ctor(System.IO.FileInfo,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Tasks.FileTaskResult"/> class from a <see cref="T:System.IO.FileInfo"/>.
            </summary>
            <param name="file">The <see cref="T:System.IO.FileInfo"/>.</param>
            <param name="deleteAfterMerge">Delete file after merging.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.FileTaskResult.#ctor(System.IO.FileInfo,System.Boolean,ThoughtWorks.CruiseControl.Core.Util.IFileSystem)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Tasks.FileTaskResult"/> class from a <see cref="T:System.IO.FileInfo"/>.
            </summary>
            <param name="file">The <see cref="T:System.IO.FileInfo"/>.</param>
            <param name="deleteAfterMerge">Delete file after merging.</param>
            <param name="fileSystem">IFileSystem instance, allows this task to interact with the file system in a testable way.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.FileTaskResult.CheckIfSuccess">
            <summary>
            Checks whether the result was successful.
            </summary>
            <returns><c>true</c> if the result was successful, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.FileTaskResult.CleanUp">
            <summary>
            Clean up the result when it is no longer needed.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.FileTaskResult.ReadFileContents">
            <summary>
            Reads the contents of the file.
            </summary>
            <returns>The contents of the file as a <c>string</c>.</returns>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.FileTaskResult.WrapInCData">
            <summary>
            Gets or sets a value indicating whether the data should be wrapped in a CData section.
            </summary>
            <value>
            	<c>true</c> if the data should be wrapped in a CData section; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.FileTaskResult.DeleteAfterMerge">
            <summary>
            Gets a value indicating if the file should be deleted after merge.
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.FileTaskResult.File">
            <summary>
            Gets the <see cref="T:System.IO.FileInfo"/> object represinting this FileTaskResult.
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.FileTaskResult.Data">
            <summary>
            Gets the data.
            </summary>
            <value>The data from the result.</value>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Tasks.FinalBuilderTask">
            <summary>
            <para>
            The FinalBuilder Task allows you to invoke FinalBuilder build projects as part of a CruiseControl.NET
            integration project. FinalBuilder is a commercial build and release management solution for Windows software
            developers and SCM professionals, developed and marketed by VSoft Technologies 
            (http://www.finalbuilder.com/finalbuilder.aspx).
            </para>
            </summary>
            <title>FinalBuilder Task</title>
            <version>1.3</version>
            <example>
            <code title="Minimalist example">
            &lt;FinalBuilder&gt;
            &lt;ProjectFile&gt;C:\Projects\BuildProject\Build Process.fbz5&lt;/ProjectFile&gt;
            &lt;/FinalBuilder&gt;
            </code>
            <code title="Full example">
            &lt;FinalBuilder&gt;
            &lt;ProjectFile&gt;C:\Projects\BuildProject\Build Process.fbz5&lt;/ProjectFile&gt;
            &lt;FBVersion&gt;5&lt;/FBVersion&gt;
            &lt;ShowBanner&gt;false&lt;/ShowBanner&gt;
            &lt;FBVariables&gt;
            &lt;FBVariable name="IsContinuousIntegrationBuild" value="True" /&gt;
            &lt;/FBVariables&gt;
            &lt;Timeout&gt;3600&lt;/Timeout&gt;
            &lt;DontWriteToLog&gt;true&lt;/DontWriteToLog&gt;
            &lt;/FinalBuilder&gt;
            </code>
            </example>
            <remarks>
            <heading>Frequently Asked Questions</heading>
            <para>
            <b>Can I format output to the CruiseControl.NET web dashboard?</b>
            </para>
            <para>
            At the moment, output from the FinalBuilder Task is plain text. We are planning to change this so that the task
            outputs XML which can be easily used with the various CruiseControl.NET publishers. In the meantime, it is
            possible to use the FinalBuilder Export Log Action to export an XML file, which can then be incorporated via
            the File Merge Task.
            </para>
            <b>Which FinalBuilder version do I need?</b>
            <para>
            The task will work with FinalBuilder versions 3, 4, and 5. However, because the task uses the FBCMD command
            line utility, users of FinalBuilder 3 and 4 will need the Professional Edition. FinalBuilder 5 users can use
            either the Standard or Professional editions. A free 30 day trial download is available.
            </para>
            <includePage>Integration Properties</includePage>
            </remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.FinalBuilderTask.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Tasks.FinalBuilderTask"/> class.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.FinalBuilderTask.#ctor(ThoughtWorks.CruiseControl.Core.Util.IRegistry,ThoughtWorks.CruiseControl.Core.Util.ProcessExecutor)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Tasks.FinalBuilderTask"/> class.	
            </summary>
            <param name="registry">The registry.</param>
            <param name="executor">The executor.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.FinalBuilderTask.Execute(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Executes the specified result.	
            </summary>
            <param name="result">The result.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.FinalBuilderTask.AttemptToExecute(ThoughtWorks.CruiseControl.Core.Util.ProcessInfo,System.String)">
            <summary>
            Attempts to execute.	
            </summary>
            <param name="info">The info.</param>
            <param name="projectName">Name of the project.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.FinalBuilderTask.GetFBVersion">
            <summary>
            Gets the FB version.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.FinalBuilderTask.GetFBPath">
            <summary>
            Gets the FB path.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.FinalBuilderTask.Validate(ThoughtWorks.CruiseControl.Core.IConfiguration,ThoughtWorks.CruiseControl.Core.Config.ConfigurationTrace,ThoughtWorks.CruiseControl.Core.Config.IConfigurationErrorProcesser)">
            <summary>
            Checks the internal validation of the item.
            </summary>
            <param name="configuration">The entire configuration.</param>
            <param name="parent">The parent item for the item being validated.</param>
            <param name="errorProcesser">The error processer to use.</param>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.FinalBuilderTask.ProjectFile">
            <summary>
            The full path of the FinalBuilder project to run.
            </summary>
            <version>1.3</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.FinalBuilderTask.ShowBanner">
            <summary>
            Specify 'true' to enable the "banner" at the top of the FinalBuilder console output.
            </summary>
            <version>1.3</version>
            <default>false</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.FinalBuilderTask.FBVariables">
            <summary>
            One or more FBVariable elements to pass to FinalBuilder. 
            </summary>
            <version>1.3</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.FinalBuilderTask.FBVersion">
            <summary>
            Use this element to explicitly specify a version of FinalBuilder to run (for instance, you could force
            a FinalBuilder 4 project to run in FinalBuilder 5.)
            </summary>
            <version>1.3</version>
            <default>Generated</default>
            <remarks>
            If this element is not specified, the FinalBuilder version is determined automatically from the project
            file name (recommended.)
            </remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.FinalBuilderTask.FBCMDPath">
            <summary>
            The absolute path to FBCMD.EXE.
            </summary>
            <version>1.3</version>
            <default>Generated</default>
            <remarks>
            If this value is not set, then the value will be generated using either FBVersion or the project file.
            </remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.FinalBuilderTask.DontWriteToLog">
            <summary>
            Disable output to the FinalBuilder project log file.
            </summary>
            <version>1.3</version>
            <default>false</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.FinalBuilderTask.UseTemporaryLogFile">
            <summary>
            Log to a temporary log file which is deleted when the project closes. Overrides DontWriteToLog.
            </summary>
            <version>1.3</version>
            <default>false</default>
            <remarks>
            Use this option instead of DontWriteToLog if you still want to be able to use the Export Log action, but
            don't want the log file to be updated.
            </remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.FinalBuilderTask.Timeout">
            <summary>
            The number of seconds to wait before assuming that the FinalBuilder project has hung and should be killed. 
            </summary>
            <version>1.3</version>
            <default>0</default>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Tasks.GendarmeTask">
            <summary>
            <para>
            Gendarme is a extensible rule-based tool to find problems in .NET applications and libraries. Gendarme inspects programs and libraries
            that contain code in ECMA CIL format (Mono and .NET) and looks for common problems with the code, problems that compiler do not
            typically check or have not historically checked. Website: http://mono-project.com/Gendarme
            </para>
            <para type="tip">
            See <link>Using CruiseControl.NET with Gendarme</link> for more details.
            </para>
            </summary>
            <title>Gendarme Task</title>
            <version>1.4.3</version>
            <example>
            <code title="Minimalist example">
            &lt;gendarme&gt;
            &lt;assemblies&gt;
            &lt;assemblyMatch expr='*.dll' /&gt;
            &lt;assemblyMatch expr='*.exe' /&gt;
            &lt;/assemblies&gt;
            &lt;/gendarme&gt;
            </code>
            <code title="Full example">
            &lt;gendarme&gt;
            &lt;executable&gt;Tools\gendarme.exe&lt;/executable&gt;
            &lt;baseDirectory&gt;C:\Build\Project1\Bin\Debug\&lt;/baseDirectory&gt;
            &lt;configFile&gt;rules.xml&lt;/configFile&gt;
            &lt;ruleSet&gt;*&lt;/ruleSet&gt;
            &lt;ignoreFile&gt;C:\Build\Project1\gendarme.ignore.list.txt&lt;/ignoreFile&gt;
            &lt;limit&gt;200&lt;/limit&gt;
            &lt;severity&gt;medium+&lt;/severity&gt;
            &lt;confidence&gt;normal+&lt;/confidence&gt;
            &lt;quiet&gt;FALSE&lt;/quiet&gt;
            &lt;verbose&gt;TRUE&lt;/verbose&gt;
            &lt;failBuildOnFoundDefects&gt;TRUE&lt;/failBuildOnFoundDefects&gt;
            &lt;verifyTimeoutSeconds&gt;600&lt;/verifyTimeoutSeconds&gt;
            &lt;assemblyListFile&gt;C:\Build\Project1\gendarme.assembly.list.txt&lt;/assemblyListFile&gt;
            &lt;description&gt;Test description&lt;/description&gt;
            &lt;/gendarme&gt;
            </code>
            </example>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.GendarmeTask.defaultExecutable">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.GendarmeTask.logFilename">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.GendarmeTask.defaultLimit">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.GendarmeTask.defaultQuiet">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.GendarmeTask.defaultVerbose">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.GendarmeTask.defaultFailBuildOnFoundDefects">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.GendarmeTask.defaultVerifyTimeout">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.GendarmeTask.defaultPriority">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.GendarmeTask.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Tasks.GendarmeTask"/> class.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.GendarmeTask.#ctor(ThoughtWorks.CruiseControl.Core.Util.ProcessExecutor)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Tasks.GendarmeTask"/> class.	
            </summary>
            <param name="executor">The executor.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.GendarmeTask.GetProcessFilename">
            <summary>
            Gets the process filename.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.GendarmeTask.GetProcessArguments(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Gets the process arguments.	
            </summary>
            <param name="result">The result.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.GendarmeTask.GetProcessBaseDirectory(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Gets the process base directory.	
            </summary>
            <param name="result">The result.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.GendarmeTask.GetProcessTimeout">
            <summary>
            Gets the process timeout.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.GendarmeTask.GetProcessPriorityClass">
            <summary>
            Gets the process priority class.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.GendarmeTask.Execute(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Executes the specified result.	
            </summary>
            <param name="result">The result.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.GendarmeTask.GetProcessSuccessCodes">
            <summary>
            Gendarme returns the following codes:
            - 0 for success
            - 1 if some defects are found
            - 2 if some parameters are bad
            - 3 if a problem is related to the xml configuration file
            - 4 if an uncaught exception occured
            </summary>
            <returns>Defects should not break the build, so return an array of 0 and 1.</returns>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.GendarmeTask.Executable">
            <summary>
            The location of the Gendarme executable.
            </summary>
            <version>1.4.3</version>
            <default>gendarme</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.GendarmeTask.ConfiguredBaseDirectory">
            <summary>
            The directory to run Gendarme in.
            </summary>
            <version>1.4.3</version>
            <default>Project Working Directory</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.GendarmeTask.Priority">
            <summary>
            The priority class of the spawned process.
            </summary>
            <version>1.5</version>
            <default>Normal</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.GendarmeTask.ConfigFile">
            <summary>
            Specify the configuration file.
            </summary>
            <version>1.4.3</version>
            <default>rules.xml</default>
            <remarks>
            <b>Maps to "--config configfile"</b>
            </remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.GendarmeTask.RuleSet">
            <summary>
            Specify the set of rules to verify.
            </summary>
            <version>1.4.3</version>
            <default>*</default>
            <remarks>
            <b>Maps to "--set ruleset"</b>
            </remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.GendarmeTask.IgnoreFile">
            <summary>
            Do not report the known defects that are part of the specified file.
            </summary>
            <version>1.4.3</version>
            <default>None</default>
            <remarks>
            <b>Maps to "--ignore ignore-file"</b>
            </remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.GendarmeTask.Limit">
            <summary>
            Stop reporting after N defects are found.
            </summary>
            <version>1.4.3</version>
            <default>-1</default>
            <remarks>
            <b>Maps to "--limit N"</b>
            </remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.GendarmeTask.Severity">
            <summary>
            Filter the reported defects to include the specified severity levels.
            </summary>
            <version>1.4.3</version>
            <default>Medium+</default>
            <remarks>
            <b>Maps to "--severity [all | audit[+] | low[+|-] | medium[+|-] | high[+|-] | critical[-]],..."</b>
            </remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.GendarmeTask.Confidence">
            <summary>
            Filter the reported defects to include the specified confidence levels.
            </summary>
            <version>1.4.3</version>
            <default>normal+</default>
            <remarks>
            <b>"--confidence [all | low[+] | normal[+|-] | high[+|-] | total[-]],..."</b>
            </remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.GendarmeTask.Quiet">
            <summary>
            If true, display minimal output (results) from the runner.
            </summary>
            <version>1.4.3</version>
            <default>false</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.GendarmeTask.Verbose">
            <summary>
            Enable debugging output.
            </summary>
            <version>1.4.3</version>
            <default>false</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.GendarmeTask.FailBuildOnFoundDefects">
            <summary>
            Specify whenver the build should fail if some defects are found by Gendarme.
            </summary>
            <version>1.4.3</version>
            <default>false</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.GendarmeTask.Assemblies">
            <summary>
            Specify the assemblies to verify. You can specify multiple filenames, including masks (? and *).
            </summary>
            <version>1.4.3</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.GendarmeTask.AssemblyListFile">
            <summary>
            Specify a file that contains the assemblies to verify. You can specify multiple filenames, including masks (? and *), one by line.
            </summary>
            <version>1.4.3</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.GendarmeTask.VerifyTimeoutSeconds">
            <summary>
            The maximum number of seconds that the build may take.  If the build process takes longer than this period, it will be killed.  Specify this value as zero to disable process timeouts.
            </summary>
            <version>1.4.3</version>
            <default>0</default>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Tasks.MergeFilesTask">
            <summary>
            <para>
            Merges external files into the build log.
            </para>
            <para>
            Most build processes interact with external tools that write their output to file (e.g. NUnit, FxCop, or NCover). To make the
            output of these tools available to CruiseControl.NET to be used in the build process or displayed in the CruiseControl.NET web page or
            included in CruiseControl.NET emails, these files need to be merged into the CruiseControl.NET integration.
            </para>
            <para type="tip">
            You should place your File Merge Tasks in the &lt;publishers /&gt; section of your <link>Project Configuration Block</link> before 
            your <link>Xml Log Publisher</link>.
            </para>
            </summary>
            <title>File Merge Task</title>
            <version>1.0</version>
            <example>
            <code>
            &lt;merge&gt;
            &lt;files&gt;
            &lt;file&gt;&lt;!-- path to NUnit test file --&gt;&lt;/file&gt;
            &lt;file&gt;&lt;!-- path to FxCop file --&gt;&lt;/file&gt;
            &lt;/files&gt;
            &lt;/merge&gt;
            </code>
            </example>
            <remarks>
            <heading>Merge actions</heading>
            <para>
            Prior to CruiseControl.NET 1.5.0, all files specified in this task are merged into the build log (this is the default behaviour if no
            action is specified.) Since the build log is XML data, all data that is merged needed to be treated as XML data. If the data was XML,
            it would be merged without any problems, otherwise the data would be embedded inside a CDATA block.
            </para>
            <para>
            With CruiseControl.NET 1.5.0 it is now possible to control how the merge will work. There are three available actions:
            </para>
            <list type="1">
            <item>
            Merge: the default behaviour - merge to the build log as XML if possible, as CDATA if not possible
            </item>
            <item>
            CData: always merge to the build log in a CDATA block
            </item>
            <item>
            Copy: instead of merging the data into the build log, it will copy the specified files into a "build" folder under the artefacts 
            folder for the project
            </item>
            </list>
            <para>
            The following is an example of how to configure a "copy" action instead of merging:
            </para>
            <code>
            &lt;merge&gt;
            &lt;files&gt;
            &lt;file&gt;&lt;!-- path to NUnit test file --&gt;&lt;/file&gt;
            &lt;file action="Copy"&gt;&lt;!-- path to NUnit images --&gt;&lt;/file&gt;
            &lt;/files&gt;
            &lt;/merge&gt;
            </code>
            <para>
            The build folder will use the same name as the build label for the project. If this folder already exists, any files within this
            folder will be overwritten.
            </para>
            <heading>
            Why are the merged results not showing up in the Web Dashboard?
            </heading>
            <para>
            If you have set up the configuration for the File Merge Task as described above and you are still not ending up with the appropriate
            results showing up within the web application, please try the following steps:
            </para>
            <para>
            1. Click the original log link and check to see if the merged content is included in the xml. If it is missing then got onto step 2.
            If it is present and is still not showing up in the web page then try emailing the CCNet users list .
            </para>
            <para>
            2. Have you put the File Merge Tasks in the &lt;publishers /&gt; section of your Project Configuration Block before your Xml Log Publisher?
            </para>
            <para>
            3. Check the folder that contains the files that should be merged. If they are not there then you need to dig into your build script
            to find out why they aren't getting created.
            </para>
            <para>
            4. If the files are there but aren't getting merged, double-check your ccnet.config file. Is the configuration specified correctly as
            specified above? Remember that case matters in XML tag and attribute names.
            </para>
            <para>
            5. Check the ccnet.log file. You should see Info-level log messages stating that the files have been merged.
            </para>
            <para>
            6. Does the file contain valid XML data? The File Merge Task only expects to process XML files. It will attempt to clean up non-XML
            files and write errors to the ccnet.log file, but it isn't always successful.
            </para>
            </remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.MergeFilesTask.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Tasks.MergeFilesTask"/> class.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.MergeFilesTask.Execute(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Executes the specified result.	
            </summary>
            <param name="result">The result.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.MergeFilesTask.TargetFolder">
            <summary>
            The folder to copy the files to.
            </summary>
            <version>1.0</version>
            <default>Project Artefact Directory</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.MergeFilesTask.MergeFiles">
            <summary>
            The files to merge.
            </summary>
            <version>1.0</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.MergeFilesTask.FileSystem">
            <summary>
            Allows this task to interact with the file system in a testable way.
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.MergeFilesTask.Logger">
            <summary>
            Allows this task to interact with the logger in a testable way.
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Tasks.ModificationReaderTask">
            <summary>
            <para>
            This tasks makes it possible to read back modifications made by the <link>Modification Writer Task</link>.
            </para>
            </summary>
            <title>Modification Reader Task</title>
            <version>1.4</version>
            <example>
            <code title="Minimalist example">
            &lt;modificationReader /&gt;
            </code>
            <code title="Full example">
            &lt;modificationReader&gt;
            &lt;deleteAfterRead&gt;true&lt;/deleteAfterRead&gt;
            &lt;filename&gt;last-mods.xml&lt;/filename&gt;
            &lt;path&gt;mods-path&lt;/path&gt;
            &lt;/modificationReader&gt;
            </code>
            </example>
            <remarks>
            <para>
            2 projects in CCNet
            </para>
            <para>
            1) is a project that does the compile, test, ... stuff, and also writes the modifications using the ModificationWriterTask be sure to
            set the appendTimeStamp of the modificationWriter to true
            </para>
            <para>
            2) is a project that deploys the result of project 1
            </para>
            <para>
            --&gt; copies it to other servers, updates source control (binary references like a framework), ...
            </para>
            <para>
            The reason for a second project is that this can be done on releases of milestones of project 1
            </para>
            <para>
            The ModificationReaderTask can now easily read the modification file(s) made by project one, into it's own integration, making it
            possible that these can be used by the existing tasks/publishers of ccnet for project 2
            </para>
            <para>
            It is best to place the modificationreader in the prebuild section, so all the other tasks / publisers know the read modifications
            also. 
            </para>
            <para>
            It is adivisable to keep these configuration elements of the modificationWriter and the modificationReader the same.  
            </para>
            </remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.ModificationReaderTask.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Tasks.ModificationReaderTask"/> class.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.ModificationReaderTask.#ctor(ThoughtWorks.CruiseControl.Core.Util.IFileSystem)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Tasks.ModificationReaderTask"/> class.	
            </summary>
            <param name="fileSystem">The file system.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.ModificationReaderTask.Execute(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Executes the specified result.	
            </summary>
            <param name="result">The result.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.ModificationReaderTask.DeleteAfterRead">
            <summary>
            Delete the files after they have been read. 
            </summary>
            <version>1.4</version>
            <default>false</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.ModificationReaderTask.Filename">
            <summary>
            The filename pattern for the file containing the modifications. CCnet with search in the path for files starting with this
            filename, and having the same extention. For example when filename is set to modifications.xml, ccnet will search for files
            like so: modifications*.xml 
            </summary>
            <version>1.4</version>
            <default>modifications.xml</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.ModificationReaderTask.OutputPath">
            <summary>
            The directory to search the xml file(s) in. 
            </summary>
            <version>1.4</version>
            <default>Project Artefact Directory</default>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Tasks.ModificationWriterTask">
            <summary>
            <para>
            This task writes the detected modifications for the current integration to a file as XML. This enables the modifications to be used
            by external programs, such as within a NAnt build script.
            </para>
            </summary>
            <title>Modification Writer Task</title>
            <version>1.0</version>
            <example>
            <code title="Minimalist example">
            &lt;modificationWriter /&gt;
            </code>
            <code title="Full example">
            &lt;modificationWriter&gt;
            &lt;filename&gt;mods.xml&lt;/filename&gt;
            &lt;path&gt;&lt;/path&gt;
            &lt;appendTimeStamp&gt;False&lt;/appendTimeStamp&gt;
            &lt;/modificationWriter&gt;
            </code>
            </example>
            <remarks>
            <heading>Output format</heading>
            <para>
            The modifications are written as follows:
            </para>
            <code>
            &lt;!-- Start of the group of modifications (even if just one). --&gt;
            &lt;ArrayOfModification xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"&gt;
            &lt;!-- Start of one modification. --&gt;
            &lt;Modification&gt;
            &lt;!-- The change number. --&gt;
            &lt;ChangeNumber&gt;... value ...&lt;/ChangeNumber&gt;
            &lt;!-- The comment. --&gt;
            &lt;Comment&gt;... value ...&lt;/Comment&gt;
            &lt;!-- The user's email address. --&gt;
            &lt;EmailAddress&gt;... value ...&lt;/EmailAddress&gt;
            &lt;!-- The affected file name. --&gt;
            &lt;FileName&gt;... value ...&lt;/FileName&gt;
            &lt;!-- The affect file's folder name. --&gt;
            &lt;FolderName&gt;... value ...&lt;/FolderName&gt;
            &lt;!-- The change timestamp, in yyyy-mm-ddThh:mm:ss.nnnn-hhmm format --&gt;
            &lt;ModifiedTime&gt;... value ...&lt;/ModifiedTime&gt;
            &lt;!-- The operation type. --&gt;
            &lt;Type&gt;... value ...&lt;/Type&gt;
            &lt;!-- The user name. --&gt;
            &lt;UserName&gt;... value ...&lt;/UserName&gt;
            &lt;!-- The related URL. --&gt;
            &lt;Url&gt;... value ...&lt;/Url&gt;
            &lt;!-- The file version. --&gt;
            &lt;Version&gt;... value ...&lt;/Version&gt;
            &lt;!-- End of modification. --&gt;
            &lt;/Modification&gt;
            &lt;!-- End of the group of modifications. --&gt;
            &lt;/ArrayOfModification&gt;
            </code>
            <heading>Sample output</heading>
            <code>
            &lt;ArrayOfModification xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"&gt;
            &lt;Modification&gt;
            &lt;ChangeNumber&gt;12245&lt;/ChangeNumber&gt;
            &lt;Comment&gt;New Project for testing stuff&lt;/Comment&gt;
            &lt;EmailAddress&gt;JUser@Example.Com&lt;/EmailAddress&gt;
            &lt;FileName&gt;AssemblyInfo.cs&lt;/FileName&gt;
            &lt;FolderName&gt;Dev\Server\Interface\Properties\&lt;/FolderName&gt;
            &lt;ModifiedTime&gt;2006-11-22T11:11:00-0500&lt;/ModifiedTime&gt;
            &lt;Type&gt;add&lt;/Type&gt;
            &lt;UserName&gt;joe_user&lt;/UserName&gt;
            &lt;Url&gt;http://www.example.com/index.html&lt;/Url&gt;
            &lt;Version&gt;5&lt;/Version&gt;
            &lt;/Modification&gt;
            &lt;Modification&gt;
            &lt;ChangeNumber&gt;12244&lt;/ChangeNumber&gt;
            &lt;Comment&gt;New Project for accessing web services&lt;/Comment&gt;
            &lt;EmailAddress&gt;SSpade@Example.Com&lt;/EmailAddress&gt;
            &lt;FileName&gt;Interface&lt;/FileName&gt;
            &lt;FolderName&gt;Dev\Server\&lt;/FolderName&gt;
            &lt;ModifiedTime&gt;2006-11-22T11:10:44-0500&lt;/ModifiedTime&gt;
            &lt;Type&gt;add&lt;/Type&gt;
            &lt;UserName&gt;sam_spade&lt;/UserName&gt;
            &lt;Url&gt;http://www.example.com/index.html&lt;/Url&gt;
            &lt;Version&gt;4&lt;/Version&gt;
            &lt;/Modification&gt;
            &lt;/ArrayOfModification&gt;    
            </code>
            </remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.ModificationWriterTask.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Tasks.ModificationWriterTask"/> class.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.ModificationWriterTask.#ctor(ThoughtWorks.CruiseControl.Core.Util.IFileSystem)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Tasks.ModificationWriterTask"/> class.	
            </summary>
            <param name="fileSystem">The file system.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.ModificationWriterTask.Execute(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Executes the specified result.	
            </summary>
            <param name="result">The result.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.ModificationWriterTask.Filename">
            <summary>
            The filename for the file containing the modifications.
            </summary>
            <version>1.0</version>
            <default>modifications.xml</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.ModificationWriterTask.OutputPath">
            <summary>
            The directory to write the xml file to. 
            </summary>
            <version>1.0</version>
            <default>Project Artefact Directory</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.ModificationWriterTask.AppendTimeStamp">
            <summary>
            Appends the integration start time to the filename, just before the extention. Making it possible to create a modification file
            per integration, without overwriting existing ones. Intended to be used with the <link>Modification Reader Task</link>.
            </summary>
            <version>1.0</version>
            <default>false</default>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Tasks.MsBuildTask">
            <summary>
            <para>
            The &lt;msbuild&gt; task is used to execute MsBuild projects, which are the default project format for Visual Studio 2005 projects
            and can also be compiled by using the MSBuild application that ships with the .NET 2 Framework.
            </para>
            <para>
            In order to work with the results of MsBuild it is important to use a custom xml logger to format the build results. For details on
            this, and a tutorial on how to use the task, see <link>Using CruiseControl.NET with MSBuild</link>.
            </para>
            <para type="tip">
            To see build progress information in the CCNet 1.5 WebDashboard remove the "/noconsolelogger" argument.
            </para>
            </summary>
            <title>MSBuild Task</title>
            <version>1.0</version>
            <example>
            <code title="Minimalist example">
            &lt;msbuild /&gt;
            </code>
            <code title="Full example">
            &lt;msbuild&gt;
            &lt;executable&gt;C:\WINDOWS\Microsoft.NET\Framework\v2.0.50727\MSBuild.exe&lt;/executable&gt;
            &lt;workingDirectory&gt;C:\dev\ccnet&lt;/workingDirectory&gt;
            &lt;projectFile&gt;CCNet.sln&lt;/projectFile&gt;
            &lt;buildArgs&gt;/p:Configuration=Debug /v:diag&lt;/buildArgs&gt;
            &lt;targets&gt;Build;Test&lt;/targets&gt;
            &lt;timeout&gt;900&lt;/timeout&gt;
            &lt;logger&gt;C:\Program Files\CruiseControl.NET\server\ThoughtWorks.CruiseControl.MsBuild.dll&lt;/logger&gt;
            &lt;/msbuild&gt;
            </code>
            </example>
            <remarks>
            <includePage>Integration Properties</includePage>
            <para>
            Many thanks to Szymon Kobalczyk for helping out with this part of CruiseControl.NET.
            </para>
            </remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.MsBuildTask.LogFilename">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.MsBuildTask.DefaultTimeout">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.MsBuildTask.LogFileId">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.MsBuildTask.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Tasks.MsBuildTask"/> class.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.MsBuildTask.#ctor(ThoughtWorks.CruiseControl.Core.Util.ProcessExecutor,ThoughtWorks.CruiseControl.Core.Util.IExecutionEnvironment,ThoughtWorks.CruiseControl.Core.Util.IShadowCopier)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Tasks.MsBuildTask"/> class.	
            </summary>
            <param name="executor">The executor.</param>
            <param name="executionEnvironment">The execution environment.</param>
            <param name="shadowCopier">The shadow copier.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.MsBuildTask.GetProcessFilename">
            <summary>
            Gets the process filename.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.MsBuildTask.GetProcessArguments(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Gets the process arguments.	
            </summary>
            <param name="result">The result.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.MsBuildTask.GetProcessBaseDirectory(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Gets the process base directory.	
            </summary>
            <param name="result">The result.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.MsBuildTask.GetProcessTimeout">
            <summary>
            Gets the process timeout.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.MsBuildTask.GetProcessPriorityClass">
            <summary>
            Gets the requested priority class value for this Task.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.MsBuildTask.Execute(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Executes the specified result.	
            </summary>
            <param name="result">The result.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.MsBuildTask.GetDefaultExecutable">
            <summary>
            Gets the default msbuild/xbuild executable.
            
            On Windows/.NET:
            	Return the path of the msbuild.exe of the current .NET framework CCNet is running on.
            
            On Unix/Mono:
            	Return xbuild.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.MsBuildTask.Executable">
            <summary>
            The location of the MSBuild.exe executable.
            </summary>
            <version>1.0</version>
            <default>MSBuild with .NET Framework, xbuild on Unix with Mono.</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.MsBuildTask.WorkingDirectory">
            <summary>
            The directory to run MSBuild in - this is generally the directory containing your build project. If relative, is a
            subdirectory of the Project Working Directory.
            </summary>
            <version>1.0</version>
            <default>Project Working Directory</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.MsBuildTask.ProjectFile">
            <summary>
            The name of the build project to run, relative to the workingDirectory. 
            </summary>
            <version>1.0</version>
            <default>Default MSBuild file.</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.MsBuildTask.BuildArgs">
            <summary>
            Any extra arguments to pass through to MSBuild.
            </summary>
            <version>1.0</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.MsBuildTask.Targets">
            <summary>
            A semicolon-separated list of the targets to run.
            </summary>
            <version>1.0</version>
            <default>Default project target.</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.MsBuildTask.Logger">
            <summary>
            The full path to the assembly containing the custom logger to use. Arguments can be passed to the logger by appending them
            after the logger name separated by a semicolon. Only if the assembly contains more than one logger implementation you need to
            specify the logger class (see MSBuild reference): [LoggerClass,]LoggerAssembly[;LoggerParameters] 
            </summary>
            <version>1.0</version>
            <default>ThoughtWorks.CruiseControl.MsBuild.XmlLogger, ThoughtWorks.CruiseControl.MsBuild.dll</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.MsBuildTask.Timeout">
            <summary>
            Number of seconds to wait before assuming that the process has hung and should be killed. 
            </summary>
            <version>1.0</version>
            <default>600</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.MsBuildTask.Priority">
            <summary>
            The priority class of the spawned process.
            </summary>
            <version>1.5</version>
            <default>Normal</default>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Tasks.NAntTask">
            <summary>
            <para>
            Runs a NAnt script.
            </para>
            <para type="tip">
            See <link>Using CruiseControl.NET with NAnt</link> for more information on working with NAnt and CruiseControl.Net.
            </para>
            <para type="tip">
            To see build progress information in the CCNet 1.5 WebDashboard remove any listener arguments from &lt;buildArgs&gt;
            and leave the &lt;listener&gt; property on the default value.
            </para>
            </summary>
            <title>NAnt Task</title>
            <version>1.0</version>
            <example>
            <code title="Minimalist example">
            &lt;nant /&gt;
            </code>
            <code title="Full example">
            &lt;nant&gt;
            &lt;executable&gt;c:\fromcvs\myrepo\myproject\tools\nant\nant.exe&lt;/executable&gt;
            &lt;baseDirectory&gt;c:\fromcvs\myrepo\myproject&lt;/baseDirectory&gt;
            &lt;buildArgs&gt;-D:cvs.executable=c:\putty\cvswithplinkrsh.bat&lt;/buildArgs&gt;
            &lt;nologo&gt;false&lt;/nologo&gt;
            &lt;buildFile&gt;cruise.build&lt;/buildFile&gt;
            &lt;logger&gt;My.Other.XmlLogger&lt;/logger&gt;
            &lt;targetList&gt;
            &lt;target&gt;run&lt;/target&gt;
            &lt;/targetList&gt;
            &lt;buildTimeoutSeconds&gt;1200&lt;/buildTimeoutSeconds&gt;
            &lt;/nant&gt;
            </code>
            </example>
            <remarks>
            <heading>NAnt output in Xml</heading>
            <para>
            CruiseControl.NET expects NAnt to generate its output as Xml so that the build results can be parsed and rendered appropriately. To
            accomplish this, CruiseControl.NET will, by default, launch NAnt using the "-logger:NAnt.Core.XmlLogger" argument. If you want to
            override this behaviour, specify the logger property in the NAntBuilder configuration in the ccnet.config file. If this element is
            specified but is empty then NAnt will be started with the default logger (though this may cause some problems for CCNet). It is also
            possible to instruct NAnt to log its output to an Xml file and then merge the file into the build using the File Merge Task.
            </para>
            <para type="warning">
            The configuration of which NAnt logger to use was orginally specified in the ccnet.exe.config file. This has now been deprecated,
            and the "NAnt.Logger" element in the &lt;appSettings&gt; section can now be removed.
            </para>
            <heading>NUnit and NAnt</heading>
            <para>
            CruiseControl.NET uses xsl to process the build log and produce html for display on the web page. Since xml is so easy to parse the
            nunit2 task in NAnt can produce xml output. The tasks must be configured to do that in order for test results to show up on the web
            page. Typically this is done by adding a formatter element to the nunit2 task and setting the type to be "Xml". Additionally the
            usefile flag of the formatter element must be set to "false". If it isn't the nunit2 task will try and save the output to a file and
            not write it out to the build log.
            </para>
            <includePage>Integration Properties</includePage>
            <code>
            &lt;target name="test.unit" depends="compile" description="runs unit tests"&gt;
            &lt;nunit2&gt;
            &lt;formatter type="Xml" usefile="false"/&gt;
            &lt;test assemblyname="${build.dir}\${core.dll}" fork="true"/&gt;
            &lt;test assemblyname="${build.dir}\${console.exe}" fork="true"/&gt;
            &lt;/nunit2&gt;
            &lt;/target&gt;
            </code>
            <para>
            It would be pretty tedious for developers to read the xml output when they run the build locally. Define a property for the build
            output type and set it to "Plain" and use the property in the formatter element..
            </para>
            <code>
            &lt;build&gt;
            &lt;property name="outputType" value="Plain"/&gt;
            &lt;!-- ... --&gt;
            &lt;formatter type="${outputType}" usefile="false"/&gt;
            &lt;!-- ... --&gt;
            &lt;/build&gt;
            </code>
            <para>
            Then in the ccnet.config file pass in a different value for outputType.
            </para>
            <code>
            &lt;nant&gt;
            &lt;!-- ... --&gt;
            &lt;buildArgs&gt;"-DoutputType=Xml"&lt;/buildArgs&gt;
            &lt;!-- ... --&gt;
            &lt;/nant&gt;
            </code>
            <heading>Accessing CruiseControl.NET build labels in NAnt</heading>
            <para>
            CCNet will pass the current build label to NAnt via the NAnt property CCNetLabel. This means that you can access use this property to,
            for example, archive the newly built assemblies in a folder with the same name as the build label (this is what we do on CCNetLive.
            Here's an example NAnt script demonstrating how to do this:
            </para>
            <code>
            &lt;target name="dist.publish" depends="dist"&gt;
            &lt;ifnot propertyexists="CCNetLabel"&gt;
            &lt;fail message="CCNetLabel property not set, so can't create labelled distribution files" /&gt;
            &lt;/ifnot&gt;
            &lt;property name="publish.dir" value="D:\download-area\CCNet-Builds\${CCNetLabel}" /&gt;
            &lt;mkdir dir="${publish.dir}" /&gt;
            &lt;copy todir="${publish.dir}"&gt;
            &lt;fileset basedir="dist"&gt;
            &lt;includes name="*"/&gt;
            &lt;/fileset&gt;
            &lt;/copy&gt;
            &lt;/target&gt;
            </code>
            </remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.NAntTask.DefaultBuildTimeout">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.NAntTask.logFilename">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.NAntTask.defaultExecutable">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.NAntTask.DefaultLogger">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.NAntTask.DefaultListener">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.NAntTask.DefaultNoLogo">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.NAntTask.DefaultPriority">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.NAntTask.LogFileId">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.NAntTask.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Tasks.NAntTask"/> class.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.NAntTask.#ctor(ThoughtWorks.CruiseControl.Core.Util.ProcessExecutor)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Tasks.NAntTask"/> class.	
            </summary>
            <param name="executor">The executor.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.NAntTask.Execute(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Runs the integration using NAnt.  The build number is provided for labelling, build
            timeouts are enforced.  The specified targets are used for the specified NAnt build file.
            StdOut from nant.exe is redirected and stored.
            </summary>
            <param name="result">For storing build output.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.NAntTask.GetProcessFilename">
            <summary>
            Gets the process filename.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.NAntTask.GetProcessTimeout">
            <summary>
            Gets the process timeout.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.NAntTask.GetProcessArguments(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Gets the process arguments.	
            </summary>
            <param name="result">The result.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.NAntTask.GetProcessBaseDirectory(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Gets the process base directory.	
            </summary>
            <param name="result">The result.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.NAntTask.GetProcessPriorityClass">
            <summary>
            Gets the process priority class.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.NAntTask.ToString">
            <summary>
            Toes the string.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.NAntTask.Targets">
            <summary>
            A list of targets to be called. CruiseControl.NET does not call NAnt once for each target, it uses the NAnt feature of being
            able to specify multiple targets.
            </summary>
            <version>1.0</version>
            <default>Default build target</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.NAntTask.Executable">
            <summary>
            The path of the version of nant.exe you want to run. If this is relative, then must be relative to either (a) the base directory,
            (b) the CCNet Server application, or (c) if the path doesn't contain any directory details then can be available in the system or
            application's 'path' environment variable
            </summary>
            <version>1.0</version>
            <default>nant</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.NAntTask.Priority">
            <summary>
            The priority class of the spawned process.
            </summary>
            <version>1.5</version>
            <default>Normal</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.NAntTask.BuildFile">
            <summary>
            The name of the build file to run, relative to the baseDirectory. 
            </summary>
            <version>1.0</version>
            <default>Default build field in the working directory</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.NAntTask.ConfiguredBaseDirectory">
            <summary>
            The directory to run the NAnt process in. If relative, is a subdirectory of the Project Working Directory.
            </summary>
            <version>1.0</version>
            <default>Project working directory</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.NAntTask.BuildArgs">
            <summary>
            Any arguments to pass through to NAnt (e.g to specify build properties).
            </summary>
            <version>1.0</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.NAntTask.Logger">
            <summary>
            The NAnt logger to use.
            </summary>
            <version>1.0</version>
            <default>NAnt.Core.XmlLogger</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.NAntTask.Listener">
            <summary>
            The NAnt listener to use. 
            </summary>
            <version>1.5</version>
            <default>NAnt.Core.DefaultLogger</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.NAntTask.NoLogo">
            <summary>
            Whether to use the -nologo argument when calling NAnt.
            </summary>
            <version>1.0</version>
            <default>true</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.NAntTask.BuildTimeoutSeconds">
            <summary>
            The maximum number of seconds that the build may take.  If the build process takes longer than this period, it will be killed.
            Specify this value as zero to disable process timeouts.
            </summary>
            <version>1.0</version>
            <default>600</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.NAntTask.TargetsForPresentation">
            <summary>
            Gets or sets the targets for presentation.	
            </summary>
            <value>The targets for presentation.</value>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Tasks.NDependTask">
            <summary>
            <para>
            Runs an NDepend analysis.
            </para>
            <para>
            NDepend is a tool that simplifies managing a complex .NET code base. Architects and developers can analyze code structure, specify
            design rules, plan massive refactoring, do effective code reviews and master evolution by comparing different versions of the code.
            </para>
            <para>
            This application is available from www.ndepend.com. There is both an open source/academic/evaluation version and a professional
            version.
            </para>
            </summary>
            <title>NDepend Task</title>
            <version>1.4.4</version>
            <example>
            <code title="Minimalist example">
            &lt;ndepend&gt;
            &lt;project&gt;NDepend-Project.xml&lt;/project&gt;
            &lt;/ndepend&gt;
            </code>
            <code title="Full example">
            &lt;ndepend&gt;
            &lt;project&gt;NDepend-Project.xml&lt;/project&gt;
            &lt;executable&gt;tools\NDepend.Console.exe&lt;/executable&gt;
            &lt;description&gt;Run the NDepend analysis.&lt;/description&gt;
            &lt;emitXml&gt;true&lt;/emitXml&gt;
            &lt;outputDir&gt;NDepend-Reports&lt;/outputDir&gt;
            &lt;inputDirs&gt;
            &lt;inputDir&gt;bin\&lt;/inputDir&gt;
            &lt;inputDir&gt;deploy\&lt;/inputDir&gt;
            &lt;/inputDirs&gt;
            &lt;silent&gt;false&lt;/silent&gt;
            &lt;reportXslt&gt;custom-report.xsl&lt;/reportXslt&gt;
            &lt;timeout&gt;120&lt;/timeout&gt;
            &lt;baseDir&gt;project\&lt;/baseDir&gt;
            &lt;publish&gt;true&lt;/publish&gt;
            &lt;/ndepend&gt;
            </code>
            </example>
            <remarks>
            <para>
            This task works in two stages:
            </para>
            <para>
            1. Run the NDepend executable
            </para>
            <para>
            2. Publish the results
            </para>
            <para>
            Running the NDepend executable is what generates the actual analysis, and as such cannot be skipped (otherwise there is no point to
            this task.) The results of the analysis will be saved in the folder specified by outputDir. If this parameter is omitted, then the
            results will be stored in a folder called NDependResults under the baseDir.
            </para>
            <para>
            In order for these results to be displayed in the dashboard they must be stored in a folder in the artefacts directory. To achieve
            this, this task will publish the results. This involves copying all the results files from the output directory to a folder in the
            artefacts directory. This folder will have the same name as the build label. Additionally any XML files will be merged with the build
            log (this makes them available for the dashboard plugins).
            </para>
            <para>
            If the publishing behaviour is not required it can be turned off by setting the publish property to false. By default this is set to
            true so the results can be displayed in the dashboard.
            </para>
            </remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.NDependTask.DefaultPriority">
            <summary>Default priority class</summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.NDependTask.#ctor">
            <summary>
            Initialise a new <see cref="T:ThoughtWorks.CruiseControl.Core.Tasks.NDependTask"/>.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.NDependTask.#ctor(ThoughtWorks.CruiseControl.Core.Util.ProcessExecutor,ThoughtWorks.CruiseControl.Core.Util.IFileSystem,ThoughtWorks.CruiseControl.Core.Util.ILogger)">
            <summary>
            Initialise a new <see cref="T:ThoughtWorks.CruiseControl.Core.Tasks.NDependTask"/> with the injection properties.
            </summary>
            <param name="executor"></param>
            <param name="fileSystem"></param>
            <param name="logger"></param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.NDependTask.Execute(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Run the task.
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.NDependTask.GetProcessFilename">
            <summary>
            Retrieve the executable to use.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.NDependTask.GetProcessBaseDirectory(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Retrieve the base directory.
            </summary>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.NDependTask.GetProcessTimeout">
            <summary>
            Get the time-out period.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.NDependTask.GetProcessArguments(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Retrieve the arguments
            </summary>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.NDependTask.GetProcessPriorityClass">
            <summary>
            Gets the requested priority class value for this Task.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.NDependTask.RootPath(System.String,System.Boolean)">
            <summary>
            Ensures that a path is rooted.
            </summary>
            <param name="path"></param>
            <param name="doubleQuote"></param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.NDependTask.ListFileDifferences(System.Collections.Generic.Dictionary{System.String,System.DateTime},System.String)">
             <summary>
             Generate a list of differences in files.
             </summary>
             <param name="originalList"></param>
            <param name="outputDirectory"></param>
             <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.NDependTask.GenerateOriginalFileList(System.String)">
            <summary>
            Generate a list of the original files.
            </summary>
            <param name="outputDirectory"></param>
            <returns></returns>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.NDependTask.ProjectFile">
            <summary>
            The NDepend project file. This is generated from VisualNDepend. 
            </summary>
            <version>1.4.4</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.NDependTask.Executable">
            <summary>
            The executable to use.
            </summary>
            <version>1.4.4</version>
            <default>NDepend.Console</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.NDependTask.Priority">
            <summary>
            The priority class of the spawned process.
            </summary>
            <version>1.5</version>
            <default>Normal</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.NDependTask.EmitXml">
            <summary>
            Whether to emit the XML report data or not.
            </summary>
            <version>1.4.4</version>
            <default>false</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.NDependTask.OutputDir">
            <summary>
            The output directory to use.
            </summary>
            <version>1.4.4</version>
            <default>NDependResults</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.NDependTask.InputDirs">
            <summary>
            The input directories to use.
            </summary>
            <version>1.4.4</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.NDependTask.Silent">
            <summary>
            Whether to hide any output or not.
            </summary>
            <version>1.4.4</version>
            <default>false</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.NDependTask.ReportXslt">
            <summary>
            The location of a custom report XSL-T.
            </summary>
            <version>1.4.4</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.NDependTask.TimeOut">
            <summary>
            The time-out period in seconds.
            </summary>
            <version>1.4.4</version>
            <default>false</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.NDependTask.BaseDirectory">
            <summary>
            The base directory to use. If omitted this will default to the working directory of the project. 
            </summary>
            <version>1.4.4</version>
            <default>Project Working Directory</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.NDependTask.Publish">
            <summary>
            Whether to publish the output files or not.
            </summary>
            <version>1.4.4</version>
            <default>true</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.NDependTask.FileSystem">
            <summary>
            The file system that is being used.
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.NDependTask.Logger">
            <summary>
            The logger that is being used.
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Tasks.UpdateConfigurationTask">
            <summary>
            Updates the configuration for the server.
            </summary>
            <title>Update Configuration Task</title>
            <version>1.6</version>
            <example>
            <code title="Minimalist example">
            &lt;updateConfig /&gt;
            </code>
            <code title="Full example">
            &lt;updateConfig /&gt;
            </code>
            </example>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.UpdateConfigurationTask.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Tasks.UpdateConfigurationTask"/> class.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.UpdateConfigurationTask.#ctor(ThoughtWorks.CruiseControl.Core.Util.ProcessExecutor)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Tasks.UpdateConfigurationTask"/> class.
            </summary>
            <param name="executor">The executor to use.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.UpdateConfigurationTask.Execute(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Execute the actual task functionality.
            </summary>
            <param name="result">The result to use.</param>
            <returns>
            <c>true</c> if the task was successful; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.UpdateConfigurationTask.GetProcessFilename">
            <summary>
            Gets the process filename.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.UpdateConfigurationTask.GetProcessArguments(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Gets the process arguments.
            </summary>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.UpdateConfigurationTask.GetProcessBaseDirectory(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Gets the process base directory.
            </summary>
            <param name="result">The result.</param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.UpdateConfigurationTask.GetProcessPriorityClass">
            <summary>
            Gets the process priority class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.UpdateConfigurationTask.GetProcessTimeout">
            <summary>
            Gets the process timeout.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.UpdateConfigurationTask.FindConfigFile(ThoughtWorks.CruiseControl.Core.IIntegrationResult,ThoughtWorks.CruiseControl.Core.Util.IFileSystem)">
            <summary>
            Finds the config file.
            </summary>
            <param name="result">The result.</param>
            <param name="fileSystem">The file system.</param>
            <returns>
            The path to the file if it exists; <c>null</c> otherwise.
            </returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.UpdateConfigurationTask.HasDifferences(ThoughtWorks.CruiseControl.Core.Util.IFileSystem,System.String,System.String)">
            <summary>
            Determines whether the specified config file has differences.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="newFile">The new file.</param>
            <param name="oldFile">The old file.</param>
            <returns>
              <c>true</c> if the specified config file has differences; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.UpdateConfigurationTask.GenerateFileHash(ThoughtWorks.CruiseControl.Core.Util.IFileSystem,System.String,System.Security.Cryptography.HashAlgorithm)">
            <summary>
            Generates the file hash.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="filePath">The file path.</param>
            <param name="hashProvider">The hash provider.</param>
            <returns>
            An SHA1 hash for the file.
            </returns>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.UpdateConfigurationTask.SourceFile">
            <summary>
            The source of the configuration file.
            </summary>
            <version>1.6</version>
            <default>none</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.UpdateConfigurationTask.AlwaysUpdate">
            <summary>
            Whether to always update the file, even if there are no changes.
            </summary>
            <version>1.6</version>
            <default>false</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.UpdateConfigurationTask.ValidateFile">
            <summary>
            Whether to validate the file before it is applied or not.
            </summary>
            <version>1.6</version>
            <default>true</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.UpdateConfigurationTask.Executable">
            <summary>
            The executable to use.
            </summary>
            <version>1.5</version>
            <default>ccvalidator</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.UpdateConfigurationTask.Priority">
            <summary>
            The priority class of the spawned process.
            </summary>
            <version>1.5</version>
            <default>Normal</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.UpdateConfigurationTask.TimeOut">
            <summary>
            The time-out period in seconds.
            </summary>
            <version>1.5</version>
            <default>600</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.UpdateConfigurationTask.FileSystem">
            <summary>
            Gets or sets the file system.
            </summary>
            <value>
            The file system.
            </value>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Tasks.XmlTaskResult">
            <summary>
            An XML task result.
            </summary>
            <remarks>
            Not thread safe!
            </remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.XmlTaskResult.GetWriter">
            <summary>
            Gets the writer.
            </summary>
            <returns>A new <see cref="T:System.Xml.XmlWriter"/>.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.XmlTaskResult.CheckIfSuccess">
            <summary>
            Checks whether the result was successful.
            </summary>
            <returns>
            <c>true</c> if the result was successful, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.XmlTaskResult.Success">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:ThoughtWorks.CruiseControl.Core.Tasks.XmlTaskResult"/> is success.
            </summary>
            <value><c>true</c> if success; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.XmlTaskResult.Data">
            <summary>
            Gets the data.
            </summary>
            <value>The data from the result.</value>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.XmlTaskResult.BackingStream">
            <summary>
            Gets or sets the backing stream.
            </summary>
            <value>The backing stream.</value>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.XmlTaskResult.Writer">
            <summary>
            Gets or sets the writer.
            </summary>
            <value>The <see cref="T:System.Xml.XmlWriter"/>.</value>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.XmlTaskResult.CachedData">
            <summary>
            Gets or sets the cached data.
            </summary>
            <value>The cached data.</value>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Triggers.CronTrigger">
            <summary>
            A crontab expression are a very compact way to express a recurring schedule. A single expression is composed of 5 space-delimited fields :
            <para> MINUTES HOURS DAYS MONTHS DAYS-OF-WEEK</para>
            <list type="bullet">
            <item><description>A single wildcard (*), which covers all values for the field. So a * in days means all days of a month (which varies with month and year). </description></item>
            <item><description>A single value, e.g. 5. Naturally, the set of values that are valid for each field varies.  </description></item>
            <item><description>A comma-delimited list of values, e.g. 1,2,3,4. The list can be unordered as in 3,4,2,6,1.  </description></item>
            <item><description>A range where the minimum and maximum are separated by a dash, e.g. 1-10. You can also specify these in the wrong order and they will be fixed. So 10-5 will be treated as 5-10.  </description></item>
            <item><description>An interval specification using a slash, e.g. */4. This means every 4th value of the field. You can also use it in a range, as in 1-6/2. </description></item>
            <item><description>You can also mix all of the above, as in: 1-5,10,12,20-30/5 </description></item>   
            </list> 
            </summary>
            <title>Cron Trigger</title>
            <version>1.6</version>
            <example>
            1st januari of each year
            <code>
            &lt;cronTrigger&gt;
            &lt;cronExpression&gt;* * 1 1 *&lt;/cronExpression&gt;
            &lt;/cronTrigger&gt;
            </code>
            </example>
            <example>
            12th of every month at 8 am
            <code>
            &lt;cronTrigger&gt;
            &lt;cronExpression&gt;0 8 12 * *&lt;/cronExpression&gt;
            &lt;/cronTrigger&gt;
            </code>
            </example>
            <example>
            Every 5 minutes between 06:00 and 18:00
            <code>
            &lt;cronTrigger&gt;
            &lt;cronExpression&gt;0/5 6-18 * * *&lt;/cronExpression&gt;
            &lt;/cronTrigger&gt;
            </code>
            </example>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Triggers.CronTrigger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Triggers.CronTrigger"/> class.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Triggers.CronTrigger.#ctor(ThoughtWorks.CruiseControl.Core.Util.DateTimeProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Triggers.CronTrigger"/> class.	
            </summary>
            <param name="dtProvider">The dt provider.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Triggers.CronTrigger.IntegrationCompleted">
            <summary>
            Integrations the completed.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Triggers.CronTrigger.Fire">
            <summary>
            Fires this instance.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Triggers.CronTrigger.NextBuild">
            <summary>
            Gets the next build.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Triggers.CronTrigger.CronExpression">
            <summary>
            The expression in Cron format when to trigger the build
            see http://code.google.com/p/ncrontab/wiki/CrontabExpression for an example
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Triggers.CronTrigger.Name">
            <summary>
            The name of the trigger. This name is passed to external tools as a means to identify the trigger that requested the build.
            </summary>
            <version>1.6</version>
            <default>ScheduleTrigger</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Triggers.CronTrigger.BuildCondition">
            <summary>
            The condition that should be used to launch the integration. By default, this value is <b>IfModificationExists</b>, meaning that an integration will
            only be triggered if modifications have been detected. Set this attribute to <b>ForceBuild</b> in order to ensure that a build should be launched 
            regardless of whether new modifications are detected. 
            </summary>
            <version>1.0</version>
            <default>IfModificationExists</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Triggers.CronTrigger.StartDate">
            <summary>
            The startdate to use for the cron schedule.
            Defaults to now
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Triggers.CronTrigger.EndDate">
            <summary>
            The end data to use for the cron schedule
            Defaults to DateTime.MaxDate
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Triggers.NCrontab.CrontabException">
            <summary>
            	
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Triggers.NCrontab.CrontabException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Triggers.NCrontab.CrontabException"/> class.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Triggers.NCrontab.CrontabException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Triggers.NCrontab.CrontabException"/> class.	
            </summary>
            <param name="message">The message.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Triggers.NCrontab.CrontabException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Triggers.NCrontab.CrontabException"/> class.	
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Triggers.NCrontab.CrontabException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Triggers.NCrontab.CrontabException"/> class.	
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Triggers.NCrontab.CrontabField">
            <summary>
            Represents a single crontab field.
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Triggers.NCrontab.ICrontabField">
            <summary>
            	
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Triggers.NCrontab.ICrontabField.GetFirst">
            <summary>
            Gets the first.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Triggers.NCrontab.ICrontabField.Next(System.Int32)">
            <summary>
            Nexts the specified start.	
            </summary>
            <param name="start">The start.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Triggers.NCrontab.ICrontabField.Contains(System.Int32)">
            <summary>
            Determines whether [contains] [the specified value].	
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Triggers.NCrontab.CrontabField.Parse(ThoughtWorks.CruiseControl.Core.Triggers.NCrontab.CrontabFieldKind,System.String)">
            <summary>
            Parses a crontab field expression given its kind.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Triggers.NCrontab.CrontabField.Minutes(System.String)">
            <summary>
            Parses a crontab field expression representing minutes.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Triggers.NCrontab.CrontabField.Hours(System.String)">
            <summary>
            Parses a crontab field expression representing hours.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Triggers.NCrontab.CrontabField.Days(System.String)">
            <summary>
            Parses a crontab field expression representing days in any given month.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Triggers.NCrontab.CrontabField.Months(System.String)">
            <summary>
            Parses a crontab field expression representing months.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Triggers.NCrontab.CrontabField.DaysOfWeek(System.String)">
            <summary>
            Parses a crontab field expression representing days of a week.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Triggers.NCrontab.CrontabField.GetFirst">
            <summary>
            Gets the first value of the field or -1.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Triggers.NCrontab.CrontabField.Next(System.Int32)">
            <summary>
            Gets the next value of the field that occurs after the given 
            start value or -1 if there is no next value available.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Triggers.NCrontab.CrontabField.Contains(System.Int32)">
            <summary>
            Determines if the given value occurs in the field.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Triggers.NCrontab.CrontabField.Accumulate(System.Int32,System.Int32,System.Int32)">
            <summary>
            Accumulates the given range (start to end) and interval of values
            into the current set of the field.
            </summary>
            <remarks>
            To set the entire range of values representable by the field,
            set <param name="start" /> and <param name="end" /> to -1 and
            <param name="interval" /> to 1.
            </remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Triggers.NCrontab.CrontabField.ToString">
            <summary>
            Toes the string.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Triggers.NCrontab.CrontabField.ToString(System.String)">
            <summary>
            Toes the string.	
            </summary>
            <param name="format">The format.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Triggers.NCrontab.CrontabField.Format(System.IO.TextWriter)">
            <summary>
            Formats the specified writer.	
            </summary>
            <param name="writer">The writer.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Triggers.NCrontab.CrontabField.Format(System.IO.TextWriter,System.Boolean)">
            <summary>
            Formats the specified writer.	
            </summary>
            <param name="writer">The writer.</param>
            <param name="noNames">The no names.</param>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Triggers.NCrontab.CrontabFieldAccumulator">
            <summary>
            	
            </summary>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="interval">The interval.</param>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Triggers.NCrontab.CrontabFieldImpl">
            <summary>
            	
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Triggers.NCrontab.CrontabFieldImpl.Minute">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Triggers.NCrontab.CrontabFieldImpl.Hour">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Triggers.NCrontab.CrontabFieldImpl.Day">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Triggers.NCrontab.CrontabFieldImpl.Month">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Triggers.NCrontab.CrontabFieldImpl.DayOfWeek">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Triggers.NCrontab.CrontabFieldImpl.FromKind(ThoughtWorks.CruiseControl.Core.Triggers.NCrontab.CrontabFieldKind)">
            <summary>
            Froms the kind.	
            </summary>
            <param name="kind">The kind.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Triggers.NCrontab.CrontabFieldImpl.Format(ThoughtWorks.CruiseControl.Core.Triggers.NCrontab.ICrontabField,System.IO.TextWriter)">
            <summary>
            Formats the specified field.	
            </summary>
            <param name="field">The field.</param>
            <param name="writer">The writer.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Triggers.NCrontab.CrontabFieldImpl.Format(ThoughtWorks.CruiseControl.Core.Triggers.NCrontab.ICrontabField,System.IO.TextWriter,System.Boolean)">
            <summary>
            Formats the specified field.	
            </summary>
            <param name="field">The field.</param>
            <param name="writer">The writer.</param>
            <param name="noNames">The no names.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Triggers.NCrontab.CrontabFieldImpl.Parse(System.String,ThoughtWorks.CruiseControl.Core.Triggers.NCrontab.CrontabFieldAccumulator)">
            <summary>
            Parses the specified STR.	
            </summary>
            <param name="str">The STR.</param>
            <param name="acc">The acc.</param>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Triggers.NCrontab.CrontabFieldImpl.Kind">
            <summary>
            Gets the kind.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Triggers.NCrontab.CrontabFieldImpl.MinValue">
            <summary>
            Gets the min value.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Triggers.NCrontab.CrontabFieldImpl.MaxValue">
            <summary>
            Gets the max value.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Triggers.NCrontab.CrontabFieldImpl.ValueCount">
            <summary>
            Gets the value count.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Triggers.NCrontab.CrontabFieldKind">
            <summary>
            	
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Triggers.NCrontab.CrontabFieldKind.Minute">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Triggers.NCrontab.CrontabFieldKind.Hour">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Triggers.NCrontab.CrontabFieldKind.Day">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Triggers.NCrontab.CrontabFieldKind.Month">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Triggers.NCrontab.CrontabFieldKind.DayOfWeek">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Triggers.NCrontab.CrontabSchedule">
            <summary>
            Represents a schedule initialized from the crontab expression.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Triggers.NCrontab.CrontabSchedule.Parse(System.String)">
            <summary>
            Parses the specified expression.	
            </summary>
            <param name="expression">The expression.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Triggers.NCrontab.CrontabSchedule.GetNextOccurrences(System.DateTime,System.DateTime)">
            <summary>
            Gets the next occurrences.	
            </summary>
            <param name="baseTime">The base time.</param>
            <param name="endTime">The end time.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Triggers.NCrontab.CrontabSchedule.GetNextOccurrence(System.DateTime)">
            <summary>
            Gets the next occurrence.	
            </summary>
            <param name="baseTime">The base time.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Triggers.NCrontab.CrontabSchedule.GetNextOccurrence(System.DateTime,System.DateTime)">
            <summary>
            Gets the next occurrence.	
            </summary>
            <param name="baseTime">The base time.</param>
            <param name="endTime">The end time.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Triggers.NCrontab.CrontabSchedule.ToString">
            <summary>
            Toes the string.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Triggers.RollUpTrigger">
            <title>Roll-up Trigger</title>
            <summary>
            <para>
            A trigger that will "roll-up" multiple changes into a single trigger.
            </para>
            <para>
            This trigger can be used to reduce the load on a build server for in very active development
            environment.
            </para>
            </summary>
            <version>1.6</version>
            <example>
            <code title="Time Period Example">
            <![CDATA[
            <rollUpTrigger>
            <trigger type="intervalTrigger" seconds="60" />
            <time units="hours">1</time>
            </rollUpTrigger>
            ]]>
            </code>
            </example>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Triggers.RollUpTrigger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Triggers.RollUpTrigger"/> class.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Triggers.RollUpTrigger.#ctor(ThoughtWorks.CruiseControl.Core.IClock)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Triggers.RollUpTrigger"/> class with a clock.
            </summary>
            <remarks>
            This override is primarily for testing.
            </remarks>
            <param name="clock">The clock.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Triggers.RollUpTrigger.IntegrationCompleted">
            <summary>
            Notifies the trigger that an integration has completed.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Triggers.RollUpTrigger.Fire">
            <summary>
            Fires this instance.
            </summary>
            <returns>
            An <see cref="T:ThoughtWorks.CruiseControl.Remote.IntegrationRequest"/> if this trigger has fired, <c>null</c> otherwise.
            </returns>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Triggers.RollUpTrigger.NextBuild">
            <summary>
            Returns the time of the next build.
            </summary>
            <value></value>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Triggers.RollUpTrigger.InnerTrigger">
            <summary>
            The inner trigger to filter. 
            </summary>
            <version>1.6</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Triggers.RollUpTrigger.MinimumTime">
            <summary>
            The minimum allowed time between builds.
            </summary>
            <version>1.6</version>
            <default>none</default>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Util.DefaultCryptoFunctions">
            <summary>
            	
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Util.ICryptoFunctions">
            <summary>
            Defines some common crypto functions.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.ICryptoFunctions.GenerateHash(System.String)">
            <summary>
            Generates a security hash of a value.
            </summary>
            <param name="value">The value.</param>
            <returns>The new hash in base64.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.DefaultCryptoFunctions.GenerateHash(System.String)">
            <summary>
            Generates a security hash of a value.
            </summary>
            <param name="value">The value.</param>
            <returns>The new hash in base64.</returns>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Util.DefaultPerformanceCounters">
            <summary>
            Default implementation of <see cref="T:ThoughtWorks.CruiseControl.Core.Util.IPerformanceCounters"/>.
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Util.IPerformanceCounters">
            <summary>
            Exposes functionality for working with performance counters.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.IPerformanceCounters.EnsureCategoryExists(System.String,System.String,System.Diagnostics.CounterCreationData[])">
            <summary>
            Ensures the category exists.
            </summary>
            <param name="category">The category.</param>
            <param name="description">The description.</param>
            <param name="counters">The counters.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.IPerformanceCounters.IncrementCounter(System.String,System.String)">
            <summary>
            Increments the counter.
            </summary>
            <param name="category">The category.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.IPerformanceCounters.IncrementCounter(System.String,System.String,System.Int64)">
            <summary>
            Increments the counter.
            </summary>
            <param name="category">The category.</param>
            <param name="name">The name.</param>
            <param name="amount">The amount.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.DefaultPerformanceCounters.EnsureCategoryExists(System.String,System.String,System.Diagnostics.CounterCreationData[])">
            <summary>
            Ensures the category exists.
            </summary>
            <param name="category">The category.</param>
            <param name="description">The description.</param>
            <param name="counters">The counters.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.DefaultPerformanceCounters.IncrementCounter(System.String,System.String)">
            <summary>
            Increments the counter.
            </summary>
            <param name="category">The category.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.DefaultPerformanceCounters.IncrementCounter(System.String,System.String,System.Int64)">
            <summary>
            Increments the counter.
            </summary>
            <param name="category">The category.</param>
            <param name="name">The name.</param>
            <param name="amount">The amount.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.DefaultPerformanceCounters.RetrieveCounter(System.String,System.String)">
            <summary>
            Retrieves the counter.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Util.DefaultWebFunctions">
            <summary>
            Default implementation of the web functions.
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Util.IWebFunctions">
            <summary>
            Some common web functionality.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.IWebFunctions.PingUrl(System.String)">
            <summary>
            Pings a URL.
            </summary>
            <param name="address">The address.</param>
            <returns>
            <c>true</c> if the URL responds; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.IWebFunctions.PingAndValidateHeaderValue(System.String,System.String,System.String)">
            <summary>
            Pings a URL and validates a header value.
            </summary>
            <param name="address">The address.</param>
            <param name="header">The header.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if the header value matches; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.DefaultWebFunctions.PingUrl(System.String)">
            <summary>
            Pings a URL.
            </summary>
            <param name="address">The address.</param>
            <returns>
            <c>true</c> if the URL responds; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.DefaultWebFunctions.PingAndValidateHeaderValue(System.String,System.String,System.String)">
            <summary>
            Pings a URL and validates a header value.
            </summary>
            <param name="address">The address.</param>
            <param name="header">The header.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if the header value matches; <c>false</c> otherwise.</returns>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Util.ICompressionService">
            <summary>
            Provides an interface for performing compression.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.ICompressionService.CompressString(System.String)">
            <summary>
            Compresses a string.
            </summary>
            <param name="value">The string to compress.</param>
            <returns>The compressed string.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.ICompressionService.ExpandString(System.String)">
            <summary>
            Expands (de-compresses) a string.
            </summary>
            <param name="value">The string to expanded.</param>
            <returns>The expanded string.</returns>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Util.IPrivateData">
            <summary>
            Defines a data item as having both "public" and "private" modes.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.IPrivateData.ToString(ThoughtWorks.CruiseControl.Core.Util.SecureDataMode)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance in the specified data mode.
            </summary>
            <param name="dataMode">The data mode to use.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Util.PrivateArguments">
            <summary>
            Handles the generation of arguments for an external process, including handling private data.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.PrivateArguments.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Util.PrivateArguments"/> class with some arguments.
            </summary>
            <param name="args">The args.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.PrivateArguments.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
            <remarks>
            This will return the data in public (hidden) mode.
            </remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.PrivateArguments.ToString(ThoughtWorks.CruiseControl.Core.Util.SecureDataMode)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance in the specified data mode.
            </summary>
            <param name="dataMode">The data mode to use.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.PrivateArguments.Add(System.Object)">
            <summary>
            Adds a new argument.
            </summary>
            <param name="value">The argument.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.PrivateArguments.Add(System.String,System.Object)">
            <summary>
            Adds a new argument with a prefix.
            </summary>
            <param name="prefix">The prefix.</param>
            <param name="value">The argument.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.PrivateArguments.Add(System.String,System.Object,System.Boolean)">
            <summary>
            Adds a new double-quoted argument with a prefix.
            </summary>
            <param name="prefix">The prefix.</param>
            <param name="value">The argument.</param>
            <param name="doubleQuote">If set to <c>true</c> the argument will be double quoted (if necessary).</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.PrivateArguments.AddIf(System.Boolean,System.Object)">
            <summary>
            Adds a new conditional argument.
            </summary>
            <param name="condition">If set to <c>true</c> the argument will be added.</param>
            <param name="value">The argument.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.PrivateArguments.AddIf(System.Boolean,System.String,System.Object)">
            <summary>
            Adds a new conditional argument with a prefix.
            </summary>
            <param name="condition">If set to <c>true</c> the argument will be added.</param>
            <param name="prefix">The prefix.</param>
            <param name="value">The argument.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.PrivateArguments.AddIf(System.Boolean,System.String,System.Object,System.Boolean)">
            <summary>
            Adds a new conditional double-quoted argument with a prefix.
            </summary>
            <param name="condition">If set to <c>true</c> the argument will be added.</param>
            <param name="prefix">The prefix.</param>
            <param name="value">The argument.</param>
            <param name="doubleQuote">If set to <c>true</c> the argument will be double quoted (if necessary).</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.PrivateArguments.AddQuote(System.Object)">
            <summary>
            Adds a quoted value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.PrivateArguments.AddQuote(System.String,System.Object)">
            <summary>
            Adds a quoted value with a prefix.
            </summary>
            <param name="prefix">The prefix.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.PrivateArguments.op_Implicit(System.String)~ThoughtWorks.CruiseControl.Core.Util.PrivateArguments">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:ThoughtWorks.CruiseControl.Core.Util.PrivateArguments"/>.
            </summary>
            <param name="args">The args.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.PrivateArguments.op_Addition(ThoughtWorks.CruiseControl.Core.Util.PrivateArguments,System.Object)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="args">The args to append to.</param>
            <param name="value">The value.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Util.PrivateArguments.Count">
            <summary>
            Gets the number of arguments.
            </summary>
            <value>The count of arguments.</value>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.PrivateArguments.PrivateArgument.#ctor(System.String,System.Object,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Util.PrivateArguments.PrivateArgument"/> class.
            </summary>
            <param name="prefix">The prefix.</param>
            <param name="value">The value.</param>
            <param name="doubleQuote">if set to <c>true</c> [double quote].</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.PrivateArguments.PrivateArgument.ToString(ThoughtWorks.CruiseControl.Core.Util.SecureDataMode)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance in the specified data mode.
            </summary>
            <param name="dataMode">The data mode to use.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Util.PrivateString">
            <summary>
            Stores a string that can be access either publicly (and is hidden) or privately (accessed normally).
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.PrivateString.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
            <remarks>
            This will return the data in public (hidden) mode.
            </remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.PrivateString.ToString(ThoughtWorks.CruiseControl.Core.Util.SecureDataMode)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance in the specified data mode.
            </summary>
            <param name="dataMode">The data mode to use.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.PrivateString.op_Implicit(System.String)~ThoughtWorks.CruiseControl.Core.Util.PrivateString">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:ThoughtWorks.CruiseControl.Core.Util.PrivateString"/>.
            </summary>
            <param name="args">The args.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Util.PrivateString.PrivateValue">
            <summary>
            Gets or sets the private value.
            </summary>
            <value>The private (actual) value.</value>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Util.PrivateString.PublicValue">
            <summary>
            Gets the public value.
            </summary>
            <value>The public value.</value>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Util.PrivateStringSerialiser">
            <summary>
            Serialiser for working with private strings.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.PrivateStringSerialiser.#ctor(Exortech.NetReflector.Util.ReflectorMember,Exortech.NetReflector.ReflectorPropertyAttribute)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Util.UriSerializer"/> class.
            </summary>
            <param name="member">The member.</param>
            <param name="attribute">The attribute.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.PrivateStringSerialiser.Read(System.Xml.XmlNode,Exortech.NetReflector.NetReflectorTypeTable)">
            <summary>
            Reads a URI.
            </summary>
            <param name="node">The node containing the URI.</param>
            <param name="table">The serialiser table.</param>
            <returns>A new instance of a <see cref="T:System.Uri"/> if the node is valid; null otherwise.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.PrivateStringSerialiser.Write(System.Xml.XmlWriter,System.Object)">
            <summary>
            Writes to the specified writer.
            </summary>
            <param name="writer">The writer to use.</param>
            <param name="target">The URI to write.</param>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Util.PrivateStringSerialiserFactory">
            <summary>
            Factory class for <see cref="T:ThoughtWorks.CruiseControl.Core.Util.PrivateStringSerialiser"/>.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.PrivateStringSerialiserFactory.Create(Exortech.NetReflector.Util.ReflectorMember,Exortech.NetReflector.ReflectorPropertyAttribute)">
            <summary>
            Creates the specified serialiser.
            </summary>
            <param name="memberInfo">The member info.</param>
            <param name="attribute">The attribute defining the serialiser.</param>
            <returns>A new instance of <see cref="T:ThoughtWorks.CruiseControl.Core.Util.UriSerializer"/>.</returns>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Util.PrivateStringTypeConverter">
            <summary>
            Converts <see cref="T:ThoughtWorks.CruiseControl.Core.Util.PrivateString"/> instances.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.PrivateStringTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type"/> that represents the type you want to convert from.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.PrivateStringTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Util.RemoteServerUri">
            <summary>
            Helper methods for checking remote server URIs.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.RemoteServerUri.IsLocal(System.String)">
            <summary>
            Determines whether the URI points to the local machine.
            </summary>
            <param name="remoteServerUri">The remote server URI.</param>
            <returns>
            <c>true</c> if the specified remote server URI is local; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Util.SecureDataMode">
            <summary>
            Defines the mode for accesing secure data
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Util.SecureDataMode.Private">
            <summary>
            The data is being accessed in private mode.
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Util.SecureDataMode.Public">
            <summary>
            The data is being accessed in public mode.
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Util.UriSerializer">
            <summary>
            A serialiser for working with URIs.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.UriSerializer.#ctor(Exortech.NetReflector.Util.ReflectorMember,Exortech.NetReflector.ReflectorPropertyAttribute)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Util.UriSerializer"/> class.
            </summary>
            <param name="member">The member.</param>
            <param name="attribute">The attribute.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.UriSerializer.Read(System.Xml.XmlNode,Exortech.NetReflector.NetReflectorTypeTable)">
            <summary>
            Reads a URI.
            </summary>
            <param name="node">The node containing the URI.</param>
            <param name="table">The serialiser table.</param>
            <returns>A new instance of a <see cref="T:System.Uri"/> if the node is valid; null otherwise.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.UriSerializer.Write(System.Xml.XmlWriter,System.Object)">
            <summary>
            Writes to the specified writer.
            </summary>
            <param name="writer">The writer to use.</param>
            <param name="target">The URI to write.</param>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Util.UriSerializerFactory">
            <summary>
            Factory class for generating a <see cref="T:ThoughtWorks.CruiseControl.Core.Util.UriSerializer"/>.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.UriSerializerFactory.Create(Exortech.NetReflector.Util.ReflectorMember,Exortech.NetReflector.ReflectorPropertyAttribute)">
            <summary>
            Creates the specified serialiser.
            </summary>
            <param name="memberInfo">The member info.</param>
            <param name="attribute">The attribute defining the serialiser.</param>
            <returns>A new instance of <see cref="T:ThoughtWorks.CruiseControl.Core.Util.UriSerializer"/>.</returns>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Util.NetworkCredentialSerializerFactory">
            <summary>
            Factory class for generating a <see cref="T:ThoughtWorks.CruiseControl.Core.Util.NetworkCredentialsSerializer"/>.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.NetworkCredentialSerializerFactory.Create(Exortech.NetReflector.Util.ReflectorMember,Exortech.NetReflector.ReflectorPropertyAttribute)">
            <summary>
            Creates the specified serialiser.
            </summary>
            <param name="memberInfo">The member info.</param>
            <param name="attribute">The attribute defining the serialiser.</param>
            <returns>A new instance of <see cref="T:ThoughtWorks.CruiseControl.Core.Util.NetworkCredentialsSerializer"/>.</returns>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Util.NetworkCredentialsSerializer">
            <summary>
            Serialises/deserialises network credentials.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.NetworkCredentialsSerializer.#ctor(Exortech.NetReflector.Util.ReflectorMember,Exortech.NetReflector.ReflectorPropertyAttribute)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Util.NetworkCredentialsSerializer"/> class.
            </summary>
            <param name="member">The member to use.</param>
            <param name="attribute">The attribute defining the serialiser.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.NetworkCredentialsSerializer.Read(System.Xml.XmlNode,Exortech.NetReflector.NetReflectorTypeTable)">
            <summary>
            Reads the specified node.
            </summary>
            <param name="node">The node to read.</param>
            <param name="table">The underlying serialiser table.</param>
            <returns>The deserialised network credentials.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.NetworkCredentialsSerializer.Write(System.Xml.XmlWriter,System.Object)">
            <summary>
            Writes to the specified writer.
            </summary>
            <param name="writer">The writer to use.</param>
            <param name="target">The target to write.</param>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Tasks.NullTask">
            <summary>
            <para>
            The Null Task is a task that doesn't do anything - it simply returns successfully. This is useful for
            projects that simply monitor the source control system for changes but don't need to do anything.
            </para>
            </summary>
            <title>Null Task</title>
            <version>1.0</version>
            <example>
            <code title="Minimalist example">
            &lt;nullTask /&gt;
            </code>
            <code title="Full example">
            &lt;nullTask simulateFailure="true" /&gt;
            </code>
            </example>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.NullTask.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Tasks.NullTask"/> class.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.NullTask.Execute(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Executes the specified result.	
            </summary>
            <param name="result">The result.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.NullTask.SimulateFailure">
            <summary>
            Defines whether to fail the task or not.
            </summary>
            <version>1.3</version>
            <default>false</default>
            <remarks>
            This can be useful in testing scenarios - but is probably most useful for people developing for
            CruiseControl.NET.
            </remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.NullTask.SimulateFailureMessage">
            <summary>
            The message for the exception. Makes it easier to spot differences between different errors.
            </summary>
            <version>1.5</version>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Tasks.NUnitArgument">
            <summary>
            	
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.NUnitArgument.assemblies">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.NUnitArgument.IncludedCategories">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.NUnitArgument.ExcludedCategories">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.NUnitArgument.#ctor(System.String[],System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Tasks.NUnitArgument"/> class.	
            </summary>
            <param name="assemblies">The assemblies.</param>
            <param name="outputfile">The outputfile.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.NUnitArgument.ToString">
            <summary>
            Toes the string.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.NUnitArgument.AppendCategoriesArg(ThoughtWorks.CruiseControl.Core.Util.ProcessArgumentBuilder)">
            <summary>
            Appends the categories, with value not an empty string nor a whitespace,
            to the excluded or included categories lists.
            </summary>
            <param name="argsBuilder">The args builder.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.NUnitArgument.IsNotWhitespace(System.String)">
            <summary>
            Determines whether the specified input is not white space.
            </summary>
            <param name="input">The input string.</param>
            <returns>
            	<c>true</c> if the specified input is not white space; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Tasks.NUnitTask">
            <summary>
            <para type="tip">
             See <link>Using CruiseControl.NET with NUnit</link> for more details.
            </para>
            <para>
             This task enables you to instruct CCNet to run the unit tests contained within a collection of assemblies. The results of the unit
             tests will be automatically included in the CCNet build results. This can be useful if you have some unit tests that you want to
             run as part of the integration process, but you don't need as part of your developer build process. For example, if you have a set
             of integration tests that you want to run in a separate build process, it is easy to set up a project to use this task.
            </para>
            <para>
             If you are using the <link>Visual Studio Task</link> and you want to run unit tests then you probably want to use this task.
             Alternatively you can run NUnit using post-build tasks in your Visual Studio project properties.
            </para>
            <para type="warning">
             We recommend not using this task, and using your builder to run your tests if possible. This way if the tests fail and you don't
             know why, it is a lot easier to try and replicate the problem on another machine.
            </para>
            <para type="warning">
             When using this task,do NOT merge an xml file from bin folder of your app with the merge task, or the results will be save twice in
             the buildlog file.
            </para>
            </summary>
            <title>NUnit Task</title>
            <version>1.0</version>
            <example>
            <code>
            &lt;nunit&gt;
            &lt;path&gt;D:\dev\ccnet\ccnet\tools\nunit\nunit-console.exe&lt;/path&gt;
            &lt;assemblies&gt;
            &lt;assembly&gt;D:\dev\Refactoring\bin\Debug\Refactoring.exe&lt;/assembly&gt;
            &lt;assembly&gt;D:\dev\Refactoring\bin\Debug\Refactoring.Core.dll&lt;/assembly&gt;
            &lt;/assemblies&gt;
            &lt;excludedCategories&gt;
            &lt;excludedCategory&gt;LongRunning&lt;/excludedCategory&gt;
            &lt;/excludedCategories&gt;
            &lt;/nunit&gt;
            </code>
            </example>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.NUnitTask.DefaultPath">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.NUnitTask.DefaultTimeout">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.NUnitTask.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Tasks.NUnitTask"/> class.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.NUnitTask.#ctor(ThoughtWorks.CruiseControl.Core.Util.ProcessExecutor)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Tasks.NUnitTask"/> class.	
            </summary>
            <param name="exec">The exec.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.NUnitTask.Execute(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Executes the specified result.	
            </summary>
            <param name="result">The result.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.NUnitTask.Assemblies">
            <summary>
            List of the paths to the assemblies containing the NUnit tests to be run.
            </summary>
            <version>1.0</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.NUnitTask.NUnitPath">
            <summary>
            Path of <b>nunit-console.exe</b> application. 
            </summary>
            <version>1.0</version>
            <default>nunit-console</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.NUnitTask.OutputFile">
            <summary>
            The file that NUnit will write the test results to.
            </summary>
            <version>1.0</version>
            <default>nunit-results.xml</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.NUnitTask.Timeout">
            <summary>
            The number of seconds that the nunit process will run before timing out.
            </summary>
            <version>1.0</version>
            <default>600</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.NUnitTask.Priority">
            <summary>
            The priority class of the spawned process.
            </summary>
            <version>1.5</version>
            <default>Normal</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.NUnitTask.ExcludedCategories">
            <summary>
            List of the test categories to be excluded from the NUnit run. The tests need to have the CategoryAttribute set. 
            </summary>
            <version>1.0</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.NUnitTask.IncludedCategories">
            <summary>
            List of the test categories to be included in the NUnit run. The tests need to have the CategoryAttribute set. 
            </summary>
            <version>1.0</version>
            <default>None</default>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Tasks.ParallelTask">
            <summary>
            <para>
            Runs a set of child tasks in parallel. Each task will run at the same time as the other tasks.
            </para>
            <para>
            To run a set of tasks in sequential order within this task, use the <link>Sequential Task</link>.
            </para>
            </summary>
            <title>Parallel Task</title>
            <version>1.5</version>
            <example>
            <code>
            &lt;parallel&gt;
            &lt;tasks&gt;
            &lt;!-- Tasks defined here --&gt;
            &lt;/tasks&gt;
            &lt;/parallel&gt;
            </code>
            </example>
            <remarks>
            <para>
            The following is an example of how to combine this task together to the <link>Sequential Task</link> to
            run multiple 'streams' of tasks in parallel:
            </para>
            <code>
            &lt;parallel&gt;
            &lt;tasks&gt;
            &lt;sequential&gt;
            &lt;description&gt;First parallel stream.&lt;/description&gt;
            &lt;tasks&gt;
            &lt;!-- First sequence of tasks--&gt;
            &lt;/tasks&gt;
            &lt;/sequential&gt;
            &lt;sequential&gt;
            &lt;description&gt;First parallel stream.&lt;/description&gt;
            &lt;tasks&gt;
            &lt;!-- Second sequence of tasks--&gt;
            &lt;/tasks&gt;
            &lt;/sequential&gt;
            &lt;/tasks&gt;
            &lt;/parallel&gt;
            </code>
            </remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.ParallelTask.Validate(ThoughtWorks.CruiseControl.Core.IConfiguration,ThoughtWorks.CruiseControl.Core.Config.ConfigurationTrace,ThoughtWorks.CruiseControl.Core.Config.IConfigurationErrorProcesser)">
            <summary>
            Validates this task.
            </summary>
            <param name="configuration"></param>
            <param name="parent"></param>
            <param name="errorProcesser"></param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.ParallelTask.Execute(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Runs the task, given the specified <see cref="T:ThoughtWorks.CruiseControl.Core.IIntegrationResult"/>, in the specified <see cref="T:ThoughtWorks.CruiseControl.Core.IProject"/>.
            </summary>
            <param name="result"></param>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.ParallelTask.Tasks">
            <summary>
            The tasks to run in parallel.
            </summary>
            <default>n/a</default>
            <version>1.5</version>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.ParallelTask.Logger">
            <summary>
            The logger to use.
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Tasks.PowerShellTask">
            <summary>
            <para>
            Runs a PowerShell script.
            </para>
            </summary>
            <title>  PowerShell Task </title>
            <version>1.5</version>
            <example>
            <code title="Minimalist example">
            &lt;powershell&gt;
            &lt;script&gt;dosomething.ps&lt;/script&gt;
            &lt;/powershell&gt;
            </code>
            <code title="Full example">
            &lt;powershell&gt;
            &lt;script&gt;dosomething.ps&lt;/script&gt;
            &lt;executable&gt;C:\program Files\PowerShell\PowerShell.exe&lt;/executable&gt;
            &lt;scriptsDirectory&gt;C:\Scripts&lt;/scriptsDirectory&gt;
            &lt;buildArgs&gt;-level=1&lt;/buildArgs&gt;
            &lt;environment&gt;
            &lt;variable name="EnvVar1" value="Some data" /&gt;
            &lt;/environment&gt;
            &lt;successExitCodes&gt;1,2,3&lt;/successExitCodes&gt;
            &lt;buildTimeoutSeconds&gt;10&lt;/buildTimeoutSeconds&gt;
            &lt;description&gt;Example of how to run a PowerShell script.&lt;/description&gt;
            &lt;/powershell&gt;
            </code>
            </example>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.PowerShellTask.DefaultBuildTimeOut">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.PowerShellTask.PowerShellExe">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.PowerShellTask.regkeypowershell1">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.PowerShellTask.regkeypowershell2">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.PowerShellTask.regkeyholder">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.PowerShellTask.DefaultScriptsDirectory">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.PowerShellTask.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Tasks.PowerShellTask"/> class.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.PowerShellTask.#ctor(ThoughtWorks.CruiseControl.Core.Util.IRegistry,ThoughtWorks.CruiseControl.Core.Util.ProcessExecutor)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Tasks.PowerShellTask"/> class.	
            </summary>
            <param name="registry">The registry.</param>
            <param name="executor">The executor.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.PowerShellTask.Execute(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Run the specified PowerShell and add its output to the build results.
            </summary>
            <param name="result">the IIntegrationResult object for the build</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.PowerShellTask.AttemptToExecute(ThoughtWorks.CruiseControl.Core.Util.ProcessInfo)">
            <summary>
            Attempts to execute.	
            </summary>
            <param name="info">The info.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.PowerShellTask.ToString">
            <summary>
            Toes the string.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.PowerShellTask.MakeBuildResult(System.String,System.String)">
            <summary>
            Convert a stream of text lines separated with newline sequences into an XML build result.
            </summary>
            <param name="input">the text stream</param>
            <param name="msgLevel">the message level, if any.  Values are "Error" and "Warning".</param>
            <returns>the build result string</returns>
            <remarks>If there are any non-blank lines in the input, they are each wrapped in a
            <code>&lt;message&gt;</code> element and the entire set is wrapped in a
            <code>&lt;buildresults&gt;</code> element and returned.  Each line of the input is encoded
            as XML CDATA rules require.  If the input is empty or contains only whitspace, an 
            empty string is returned.
            Note: If we can't manage to understand the input, we just return it unchanged.
            </remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.PowerShellTask.SetConfiguredEnvironmentVariables(System.Collections.Specialized.StringDictionary,ThoughtWorks.CruiseControl.Core.Util.EnvironmentVariable[])">
            <summary>
            Pass the project's environment variables to the process.
            </summary>
            <param name="variablePool">The collection of environment variables to be updated.</param>
            <param name="varsToSet">An array of environment variables to set.</param>
            <remarks>
            Any variable without a value will be set to an empty string.
            </remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.PowerShellTask.ReadPowerShellFromRegistry">
            <summary>
            Get the name of the PowerShell executable for the highest version installed on this machine.
            </summary>
            <returns>The fully-qualified pathname of the executable.</returns>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.PowerShellTask.Registry">
            <summary>
            Expose the registry so the unit tests can change it if necessary.
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.PowerShellTask.Script">
            <summary>
            The PowerShell script to run.
            </summary>
            <version>1.5</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.PowerShellTask.Executable">
            <summary>
            The PowerShell executable.
            </summary>
            <version>1.5</version>
            <default>PowerShell.exe</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.PowerShellTask.Priority">
            <summary>
            The priority class of the spawned process.
            </summary>
            <version>1.5</version>
            <default>Normal</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.PowerShellTask.ConfiguredScriptsDirectory">
            <summary>
            The directory that the PowerShell scripts are stored in. 
            </summary>
            <version>1.5</version>
            <default>%Documents%\WindowsPowerShell</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.PowerShellTask.BuildArgs">
            <summary>
            Any arguments to pass into the script. 
            </summary>
            <version>1.5</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.PowerShellTask.EnvironmentVariables">
            <summary>
            Any environment variables to pass into the script. 
            </summary>
            <version>1.5</version>
            <default>None</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.PowerShellTask.SuccessExitCodes">
            <summary>
            The exit codes that mark the script as being successful. 
            </summary>
            <version>1.5</version>
            <default>0</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.PowerShellTask.BuildTimeoutSeconds">
            <summary>
            The maximum number of seconds the build can take. If the build process takes longer than
            this period, it will be killed.  Specify this value as zero to disable process timeouts.
            </summary>
            <version>1.5</version>
            <default>600</default>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Tasks.RakeTask">
            <summary>
            <para>
            Executes Rake.
            </para>
            </summary>
            <title> Rake Task </title>
            <version>1.4</version>
            <example>
            <code title="Minimalist example">
            &lt;rake /&gt;
            </code>
            <code title="Full example">
            &lt;rake&gt;
            &lt;executable&gt;c:\ruby\bin\rake.bat&lt;/executable&gt;
            &lt;baseDirectory&gt;c:\fromcvs\myrepo\myproject&lt;/baseDirectory&gt;
            &lt;buildArgs&gt;additional-argument&lt;/buildArgs&gt;
            &lt;rakefile&gt;Rakefile&lt;/rakefile&gt;
            &lt;targetList&gt;
            &lt;target&gt;build&lt;/target&gt;
            &lt;/targetList&gt;
            &lt;buildTimeoutSeconds&gt;1200&lt;/buildTimeoutSeconds&gt;
            &lt;quiet&gt;false&lt;/quiet&gt;
            &lt;silent&gt;false&lt;/silent&gt;
            &lt;trace&gt;true&lt;/trace&gt;
            &lt;/rake&gt;
            </code>
            </example>
            <remarks>
            <heading>Accessing CruiseControl.NET build labels in Rake</heading>
            <para>
            CCNet will pass the current build label to Rake via the environment variable CCNetLabel. This means that you can access this 
            variable too. For example, archive the build results in a folder with the same name as the build label (this is what we do on
            CCNetLive  using NAnt. Here's some example Rakefile demonstrating how to do this:
            </para>
            <code type="none">
            #!ruby
            require 'rake'
            
            task :default =&gt; [:deploy]
            
            task :deploy do
            	publishdir="C:/download-area/CCNet-Builds/#{ENV['CCNetLabel']}"
            	mkdir_p publishdir
            	FileList['dist/*'].each do |file|
            		cp file, publishdir
            	end
            end
            </code>
            <para>
            See <link>Integration Properties</link> for the values that are passed to the task.
            </para>
            </remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.RakeTask.DefaultBuildTimeout">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.RakeTask.DefaultExecutable">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.RakeTask.DefaultPriority">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.RakeTask.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Tasks.RakeTask"/> class.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.RakeTask.#ctor(ThoughtWorks.CruiseControl.Core.Util.ProcessExecutor)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Tasks.RakeTask"/> class.
            </summary>
            <param name="executor">The executor.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.RakeTask.Execute(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Executes the specified result.	
            </summary>
            <param name="result">The result.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.RakeTask.GetProcessArguments(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Gets the process arguments.	
            </summary>
            <param name="result">The result.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.RakeTask.GetProcessBaseDirectory(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Gets the process base directory.	
            </summary>
            <param name="result">The result.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.RakeTask.GetProcessTimeout">
            <summary>
            Gets the process timeout.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.RakeTask.GetProcessFilename">
            <summary>
            Gets the process filename.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.RakeTask.GetProcessPriorityClass">
            <summary>
            Gets the process priority class.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.RakeTask.BuildArgs">
            <summary>
            Any arguments to pass through to Rake (e.g to specify build properties).
            </summary>
            <default>None</default>
            <version>1.4</version>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.RakeTask.BaseDirectory">
            <summary>
            The directory to run the Rake process in. If relative, is a subdirectory of the Project Working Directory.
            </summary>
            <default>Project Working Directory</default>
            <version>1.4</version>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.RakeTask.BuildTimeoutSeconds">
            <summary>
            Number of seconds to wait before assuming that the process has hung and should be killed. 
            </summary>
            <default>600</default>
            <version>1.4</version>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.RakeTask.Quiet">
            <summary>
            Do not log messages to standard output.
            </summary>
            <default>false</default>
            <version>1.4</version>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.RakeTask.Executable">
            <summary>
            The path of the version of Rake you want to run. If this is relative, then must be relative to either (a) the base directory, 
            (b) the CCNet Server application, or (c) if the path doesn't contain any directory details then can be available in the system 
            or application's 'path' environment variable.
            </summary>
            <default>c:\ruby\bin\rake.bat</default>
            <version>1.4</version>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.RakeTask.Priority">
            <summary>
            The priority class of the spawned process.
            </summary>
            <version>1.5</version>
            <default>Normal</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.RakeTask.Rakefile">
            <summary>
            The name of the Rakefile to run, relative to the baseDirectory. 
            </summary>
            <default>None</default>
            <version>1.4</version>
            <remarks>
            If no rake file is specified Rake will use the default build file in the working directory.
            </remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.RakeTask.Silent">
            <summary>
            Like quiet but also suppresses the 'in directory' announcement. 
            </summary>
            <default>false</default>
            <version>1.4</version>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.RakeTask.Targets">
            <summary>
            A list of targets to be called. CruiseControl.NET does not call Rake once for each target, it uses the Rake feature of
            being able to specify multiple targets. 
            </summary>
            <remarks>
            If no targets are defined Rake will use the default target.
            </remarks>
            <default>None</default>
            <version>1.4</version>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.RakeTask.Trace">
            <summary>
            Turns on invoke/execute tracing and enables full backtrace.
            </summary>
            <default>false</default>
            <version>1.4</version>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.RakeTask.TargetsForPresentation">
            <summary>
            Gets or sets the targets for presentation.	
            </summary>
            <value>The targets for presentation.</value>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Tasks.ReplacementDynamicValue">
            <title>Replacement Dynamic Value</title>
            <version>1.5</version>
            <summary>
            <para>
            This will replace any number of parameters into a format string. The format string can also include formats for each parameter.
            </para>
            </summary>
            <example>
            <code title="Basic example">
            &lt;nant&gt;
            &lt;!-- Omitted for brevity --&gt;
            &lt;buildArgs&gt;-t:Help&lt;/buildArgs&gt;
            &lt;dynamicValues&gt;
            &lt;replacementValue property="buildArgs"&gt;
            &lt;format&gt;-t:{0}&lt;/format&gt;
            &lt;parameters&gt;
            &lt;namedValue name="CommandToRun" value="Help"/&gt;
            &lt;/parameters&gt;
            &lt;/replacementValue&gt;
            &lt;/dynamicValues&gt;
            &lt;/nant&gt;
            </code>
            <code title="Shorthand example">
            &lt;nant&gt;
            &lt;!-- Omitted for brevity --&gt;
            &lt;buildArgs&gt;-t:$[CommandToRun|Help]&lt;/buildArgs&gt;
            &lt;/nant&gt;
            </code>
            <code title="Example in context">
            &lt;project name="Test Project"&gt;
            &lt;sourcecontrol type="svn"&gt;
            &lt;!-- Omitted for brevity --&gt;
            &lt;/sourcecontrol&gt;
            &lt;triggers&gt;
            &lt;intervalTrigger /&gt;
            &lt;/triggers&gt;
            &lt;tasks&gt;
            &lt;nant&gt;
            &lt;!-- Omitted for brevity --&gt;
            &lt;buildArgs&gt;-t:Help&lt;/buildArgs&gt;
            &lt;dynamicValues&gt;
            &lt;replacementValue property="buildArgs"&gt;
            &lt;format&gt;-t:{0}&lt;/format&gt;
            &lt;parameters&gt;
            &lt;namedValue name="CommandToRun" value="Help"/&gt;
            &lt;/parameters&gt;
            &lt;/replacementValue&gt;
            &lt;/dynamicValues&gt;
            &lt;/nant&gt;
            &lt;!-- Omitted for brevity --&gt;
            &lt;/tasks&gt;
            &lt;publishers&gt;
            &lt;!-- Omitted for brevity --&gt;
            &lt;/publishers&gt;
            &lt;parameters&gt;
            &lt;!-- Omitted for brevity --&gt;
            &lt;/parameters&gt;
            &lt;/project&gt;
            </code>
            </example>
            <remarks>
            <para>
            The format string is any standard .NET format string that can be used with string.Format(). The parameters will be replaced in
            the order that they are defined in the parameters property.
            </para>
            </remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.ReplacementDynamicValue.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Tasks.ReplacementDynamicValue"/> class.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.ReplacementDynamicValue.#ctor(System.String,System.String,ThoughtWorks.CruiseControl.Remote.NameValuePair[])">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Tasks.ReplacementDynamicValue"/> class.	
            </summary>
            <param name="format">The format.</param>
            <param name="property">The property.</param>
            <param name="parameters">The parameters.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.ReplacementDynamicValue.ApplyTo(System.Object,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.IEnumerable{ThoughtWorks.CruiseControl.Remote.Parameters.ParameterBase})">
            <summary>
            Applies a dynamc value to an object.
            </summary>
            <param name="value">The object to apply the value to.</param>
            <param name="parameters">The parameters to apply.</param>
            <param name="parameterDefinitions">The original parameter definitions.</param>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.ReplacementDynamicValue.PropertyName">
            <summary>
            The name of the property to set.
            </summary>
            <version>1.5</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.ReplacementDynamicValue.Parameters">
            <summary>
            The parameters to use.
            </summary>
            <version>1.5</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.ReplacementDynamicValue.FormatValue">
            <summary>
            The default value to use if nothing is set in the parameters.
            </summary>
            <version>1.5</version>
            <default>n/a</default>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Tasks.SequentialTask">
            <summary>
            <para>
            Runs a set of child tasks in order.
            This task is primarily designed for scenarios where execution can take more than more path (e.g. <link>Parallel Task</link>). This
            is normally not required for tasks directly under the prebuild, tasks or publishers element in a project.
            </para>
            </summary>
            <title> Sequential Task </title>
            <version>1.5</version>
            <example>
            <code title="Minimalist example">
            &lt;sequential&gt;
            &lt;tasks&gt;
            &lt;!-- Tasks defined here --&gt;
            &lt;/tasks&gt;
            &lt;/sequential&gt;
            </code>
            <code title="Full example">
            &lt;sequential continueOnFailure="true"&gt;
            &lt;description&gt;Example of how to run multiple tasks in sequence.&lt;/description&gt;
            &lt;tasks&gt;
            &lt;!-- Tasks defined here --&gt;
            &lt;/tasks&gt;
            &lt;/sequential&gt;
            </code>
            </example>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.SequentialTask.Execute(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Runs the task, given the specified <see cref="T:ThoughtWorks.CruiseControl.Core.IIntegrationResult"/>, in the specified <see cref="T:ThoughtWorks.CruiseControl.Core.IProject"/>.
            </summary>
            <param name="result"></param>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.SequentialTask.Tasks">
            <summary>
            The tasks to run in sequence.
            </summary>
            <version>1.5</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.SequentialTask.ContinueOnFailure">
            <summary>
            Should the tasks continue to run, even if there is a failure?
            </summary>
            <version>1.5</version>
            <default>false</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.SequentialTask.Logger">
            <summary>
            The logger to use.
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Tasks.SynchronisationTask">
            <summary>
            <para>
            A sychronisation context across multiple tasks or projects.
            </para>
            <para>
            Only one task can be in a synchronisation context at any time. This provides a mechanism for locking, either within a project or
            inbetween projects.
            </para>
            </summary>
            <title> Synchronisation Context Task </title>
            <version>1.5</version>
            <example>
            <code title="Minimalist example">
            &lt;sequential&gt;
            &lt;tasks&gt;
            &lt;!-- Tasks defined here --&gt;
            &lt;/tasks&gt;
            &lt;/sequential&gt;
            </code>
            <code title="Full example">
            &lt;sequential continueOnFailure="true" context="thereCanBeOnlyOne" timeout="1200"&gt;
            &lt;description&gt;Example of how to run multiple tasks in a synchronisation context.&lt;/description&gt;
            &lt;tasks&gt;
            &lt;!-- Tasks defined here --&gt;
            &lt;/tasks&gt;
            &lt;/sequential&gt;
            </code>
            </example>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.SynchronisationTask.contexts">
            <summary>
            The synchronisation contexts.
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Tasks.SynchronisationTask.lockObject">
            <summary>
            The lock object for accessing the synchronisation contexts.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Tasks.SynchronisationTask.Execute(ThoughtWorks.CruiseControl.Core.IIntegrationResult)">
            <summary>
            Execute the actual task functionality.
            </summary>
            <param name="result">The result to use.</param>
            <returns>
            True if the task was successful, false otherwise.
            </returns>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.SynchronisationTask.Tasks">
            <summary>
            The tasks to run within the synchronisation context. These tasks will be run in the order they are defined.
            </summary>
            <version>1.5</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.SynchronisationTask.ContinueOnFailure">
            <summary>
            Should the tasks continue to run, even if there is a failure?
            </summary>
            <version>1.5</version>
            <default>false</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.SynchronisationTask.Logger">
            <summary>
            Gets or sets the logger.
            </summary>
            <value>The logger.</value>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.SynchronisationTask.ContextName">
            <summary>
            The name of the synchronisation context. This is only needed if multiple synchronisation contexts are desired.
            </summary>
            <version>1.5</version>
            <default>DefaultSynchronisationContext</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Tasks.SynchronisationTask.TimeoutPeriod">
            <summary>
            The timeout period (in seconds).
            </summary>
            <remarks>
            The time-out is only used for attempting to aquire the context. If the task cannot acquire the context within this period, it
            will time out and throw an error. Once the context has been acquired, there is no time limit on how long it can be held.
            </remarks>
            <version>1.5</version>
            <default>300</default>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Triggers.FilterTrigger">
            <summary>
            <para>
            The Filter Trigger allows you to prevent builds from occurring at certain times or on certain days (such as when your source control
            repository is undergoing backup). It is used to decorate an existing trigger. For example, if you have set up a <link>Interval 
            Trigger</link> to cause a new build every 5 minutes, you can use the Filter Trigger to create a window during which the build will
            not run.
            The filter will exclude modifications that occur between the start time and the end time on the days specified. If the start time is
            greater than the end time then the filtered time will span across midnight. For example, if the start time is 23:00 and the end time
            is 3:00 then builds will be suppressed from 23:00-23:59 and 0:00-3:00 on the days specified.
            </para>
            <para type="info">
            Like all triggers, the scheduleTrigger must be enclosed within a triggers element in the appropriate <link>Project Configuration
            Block</link>.
            </para>
            <para type="warning">
            <title>Nested trigger syntax is different</title>
            As shown below, the configuration of the nested trigger is not the same as when using that trigger outside a filter trigger. When
            using the &lt;filterTrigger&gt; element, the inner trigger must be specified with the &lt;trigger&gt; element. You could not use the
            &lt;intervalTrigger&gt; trigger element in this example.
            </para>
            </summary>
            <title>Filter Trigger</title>
            <version>1.0</version>
            <remarks>
            <para type="info">
            Times should be specified in hh:mm or hh:mm:ss 24 hour format (i.e., ranging from 00:00:00 to 23:59:59).
            </para>
            <heading>Nested Filter Triggers</heading>
            <para>
            Sometimes you would like to suppress builds that occur either between certain times or on certain days or in multiple combinations
            of dates and times. To acheive this, you can nest multiple filter triggers. For example, the following xml configures a trigger to
            filter builds between 7pm and 7am on weekdays and at any time on Saturdays and Sundays.
            </para>
            <code>
            &lt;filterTrigger startTime="19:00" endTime="07:00"&gt;
            &lt;trigger type="filterTrigger" startTime="0:00" endTime="23:59:59"&gt;
            &lt;trigger type="intervalTrigger" name="continuous" seconds="900" buildCondition="ForceBuild"/&gt;
            &lt;weekDays&gt;
            &lt;weekDay&gt;Saturday&lt;/weekDay&gt;
            &lt;weekDay&gt;Sunday&lt;/weekDay&gt;
            &lt;/weekDays&gt;
            &lt;/trigger&gt;
            &lt;/filterTrigger&gt;
            </code>
            </remarks>
            <example>
            <code>
            &lt;filterTrigger startTime="23:30" endTime="23:45"&gt;
            &lt;trigger type="intervalTrigger" seconds="60" /&gt;
            &lt;weekDays&gt;
            &lt;weekDay&gt;Sunday&lt;/weekDay&gt;
            &lt;/weekDays&gt;
            &lt;/filterTrigger&gt;
            </code>
            </example>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Triggers.FilterTrigger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Triggers.FilterTrigger"/> class.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Triggers.FilterTrigger.#ctor(ThoughtWorks.CruiseControl.Core.Util.DateTimeProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Triggers.FilterTrigger"/> class.	
            </summary>
            <param name="dtProvider">The dt provider.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Triggers.FilterTrigger.IntegrationCompleted">
            <summary>
            Integrations the completed.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Triggers.FilterTrigger.Fire">
            <summary>
            Fires this instance.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Triggers.FilterTrigger.InnerTrigger">
            <summary>
            The inner trigger to filter.
            </summary>
            <version>1.0</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Triggers.FilterTrigger.StartTime">
            <summary>
            The start of the filter window. Builds will not occur after this time and before the end time. 
            </summary>
            <version>1.0</version>
            <default>00:00:00</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Triggers.FilterTrigger.EndTime">
            <summary>
            The end of the filter window. Builds will not occur before this time and after the start time.
            </summary>
            <version>1.0</version>
            <default>23:59:59</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Triggers.FilterTrigger.BuildCondition">
            <summary>
            The condition that will be returned if a build is requested during the filter window. The default value is <b>NoBuild</b>
            indicating that no build will be performed
            </summary>
            <default>NoBuild</default>
            <version>1.0</version>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Triggers.FilterTrigger.NextBuild">
            <summary>
            Gets the next build.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Triggers.FilterTrigger.WeekDays">
            <summary>
            The week days on which the filter should be applied (eg. Monday, Tuesday). By default, all days of the week are set. The filter
            will have no effect on other days.
            </summary>
            <version>1.0</version>
            <default>Monday-Sunday</default>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Triggers.IntervalTrigger">
            <summary>
            <para>
            The Interval Trigger is used to specify that an integration should be run periodically, after a certain amount of time. By default, an integration
            will only be triggered if modifications have been detected since the last integration. The trigger can also be configured to force a build even if
            no changes have occurred to source control. The items to watch for modifications are specified with <link>Source Control Blocks</link>.
            </para>
            <para type="info">
            Like all triggers, the intervalTrigger must be enclosed within a triggers element in the appropriate <link>Project Configuration Block</link>.
            </para>
            </summary>
            <title>Interval Trigger</title>
            <version>1.0</version>
            <remarks>
            <para type="warning">
            This trigger replaces the <b>PollingIntervalTrigger</b> and the <b>ForceBuildIntervalTrigger</b>.
            </para>
            </remarks>
            <example>
            <code title="Minimalist example">
            &lt;intervalTrigger /&gt;
            </code>
            <code title="Full example">
            &lt;intervalTrigger name="continuous" seconds="30" buildCondition="ForceBuild" initialSeconds="30" /&gt;
            </code>
            </example>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Triggers.IntervalTrigger.DefaultIntervalSeconds">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Triggers.IntervalTrigger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Triggers.IntervalTrigger"/> class.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Triggers.IntervalTrigger.#ctor(ThoughtWorks.CruiseControl.Core.Util.DateTimeProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Triggers.IntervalTrigger"/> class.
            </summary>
            <param name="dtProvider">The dt provider.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Triggers.IntervalTrigger.IntegrationCompleted">
            <summary>
            Integrations the completed.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Triggers.IntervalTrigger.IncrementNextBuildTime">
            <summary>
            Increments the next build time.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Triggers.IntervalTrigger.Fire">
            <summary>
            Fires this instance.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Triggers.IntervalTrigger.Name">
            <summary>
            The name of the trigger. This name is passed to external tools as a means to identify the trigger that requested the build.
            </summary>
            <version>1.1</version>
            <default>IntervalTrigger</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Triggers.IntervalTrigger.IntervalSeconds">
            <summary>
            The number of seconds after an integration cycle completes before triggering the next integration cycle.
            </summary>
            <version>1.0</version>
            <default>60</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Triggers.IntervalTrigger.InitialIntervalSeconds">
            <summary>
            The delay (in seconds) from CCNet startup to the first check for modifications.
            </summary>
            <version>1.4</version>
            <default>Defaults to the IntervalSettings value.</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Triggers.IntervalTrigger.BuildCondition">
            <summary>
            The condition that should be used to launch the integration. By default, this value is <b>IfModificationExists</b>, meaning that an integration will
            only be triggered if modifications have been detected. Set this attribute to <b>ForceBuild</b> in order to ensure that a build should be launched 
            regardless of whether new modifications are detected. 
            </summary>
            <version>1.0</version>
            <default>IfModificationExists</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Triggers.IntervalTrigger.NextBuild">
            <summary>
            Gets the next build.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Triggers.MultipleTrigger">
            <summary>
            <para>
            The Multiple Trigger is used to support the execution of multiple nested triggers. Each trigger will be executed sequentially in the order specified
            in the configuration file. By default, if any of the triggers specify that a build should occur then a build will be triggered. The build condition
            will be ForceBuild if any trigger returns a ForceBuild condition. Otherwise, the build condition will be IfModificationsExist if any trigger returns
            that condition. Multiple Triggers can contain nested multiple triggers.
            </para>
            <para>
            It is possible to change the logical operator applied to assessing the build conditions. If the Multiple Trigger's operator property is set to "And"
            then if any trigger says that a build should not happen, then the build will not happen. This is particularly useful when using multiple <link>Filter
            Trigger</link>s.
            </para>
            <para type="info">
            Like all triggers, the multiTrigger must be enclosed within a triggers element in the appropriate <link>Project Configuration Block</link>.
            </para>
            </summary>
            <title>Multiple Trigger</title>
            <version>1.0</version>
            <example>
            <code title="Minimalist example">
            &lt;multiTrigger /&gt;
            </code>
            <code title="Full example">
            &lt;multiTrigger operator="And"&gt;
            &lt;triggers&gt;
            &lt;urlTrigger url="http://server/page.html" seconds="30" buildCondition="ForceBuild"/&gt;
            &lt;filterTrigger startTime="23:30" endTime="23:45"&gt;
            &lt;trigger type="intervalTrigger" seconds="60" /&gt;
            &lt;weekDays&gt;
            &lt;weekDay&gt;Sunday&lt;/weekDay&gt;
            &lt;/weekDays&gt;
            &lt;/filterTrigger&gt;
            &lt;/triggers&gt;
            &lt;/multiTrigger&gt;    
            </code>
            </example>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Triggers.MultipleTrigger.#ctor(ThoughtWorks.CruiseControl.Remote.ITrigger[])">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Triggers.MultipleTrigger"/> class.
            </summary>
            <param name="triggers">The triggers.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Triggers.MultipleTrigger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Triggers.MultipleTrigger"/> class.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Triggers.MultipleTrigger.IntegrationCompleted">
            <summary>
            Integrations the completed.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Triggers.MultipleTrigger.Fire">
            <summary>
            Fires this instance.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Triggers.MultipleTrigger.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies to.	
            </summary>
            <param name="array">The array.</param>
            <param name="index">The index.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Triggers.MultipleTrigger.Add(System.Object)">
            <summary>
            Adds the specified value.	
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Triggers.MultipleTrigger.Contains(System.Object)">
            <summary>
            Determines whether [contains] [the specified value].	
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Triggers.MultipleTrigger.Clear">
            <summary>
            Clears this instance.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Triggers.MultipleTrigger.IndexOf(System.Object)">
            <summary>
            Indexes the of.	
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Triggers.MultipleTrigger.Insert(System.Int32,System.Object)">
            <summary>
            Inserts the specified index.	
            </summary>
            <param name="index">The index.</param>
            <param name="value">The value.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Triggers.MultipleTrigger.Remove(System.Object)">
            <summary>
            Removes the specified value.	
            </summary>
            <param name="value">The value.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Triggers.MultipleTrigger.RemoveAt(System.Int32)">
            <summary>
            Removes at.	
            </summary>
            <param name="index">The index.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Triggers.MultipleTrigger.GetEnumerator">
            <summary>
            Gets the enumerator.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Triggers.MultipleTrigger.Operator">
            <summary>
            The logical operator to apply to the results of the nested triggers (And or Or).
            </summary>
            <default>Or</default>
            <version>1.1</version>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Triggers.MultipleTrigger.Triggers">
            <summary>
            The nested triggers.
            </summary>
            <version>1.0</version>
            <default>n/a/</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Triggers.MultipleTrigger.NextBuild">
            <summary>
            Gets the next build.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Triggers.MultipleTrigger.Count">
            <summary>
            Gets the count.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Triggers.MultipleTrigger.SyncRoot">
            <summary>
            Gets the sync root.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Triggers.MultipleTrigger.IsReadOnly">
            <summary>
            Gets the is read only.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Triggers.MultipleTrigger.IsFixedSize">
            <summary>
            Gets the size of the is fixed.	
            </summary>
            <value>The size of the is fixed.</value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Triggers.MultipleTrigger.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:System.Object"/> at the specified index.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Triggers.MultipleTrigger.IsSynchronized">
            <summary>
            Gets the is synchronized.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Triggers.Operator">
            <summary>
            	
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Triggers.Operator.Or">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Triggers.Operator.And">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Triggers.ParameterTrigger">
            <summary>
            <para>
            Trigger to add build parameters to an integration request.
            </para>
            <para type="info">
            Like all triggers, the parameterTrigger must be enclosed within a triggers element in the appropriate <link>Project Configuration
            Block</link>. 
            </para>
            <para type="warning">
            <title>Nested trigger syntax is different</title>
            As shown below, the configuration of the nested trigger is not the same as when using that trigger outside a filter trigger. When
            using the &lt;parameterTrigger&gt; element, the inner trigger must be specified with the &lt;trigger&gt; element. You could not use the
            &lt;intervalTrigger&gt; trigger element in this example.
            </para>
            </summary>
            <title>Parameter Trigger</title>
            <version>1.5</version>
            <example>
            <code>
            &lt;parameterTrigger&gt;
            &lt;trigger type="intervalTrigger" seconds="60" /&gt;
            &lt;parameters&gt;
            &lt;!-- Parameters here--&gt;
            &lt;/parameters&gt;
            &lt;/parameterTrigger&gt;
            </code>
            </example>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Triggers.ParameterTrigger.#ctor">
            <summary>
            Initialise a new blank instance of <see cref="T:ThoughtWorks.CruiseControl.Core.Triggers.ParameterTrigger"/>.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Triggers.ParameterTrigger.IntegrationCompleted">
            <summary>
            An integration has completed, the trigger can now be reactivated.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Triggers.ParameterTrigger.Fire">
            <summary>
            Checks if the trigger needs to actually fire.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Triggers.ParameterTrigger.InnerTrigger">
            <summary>
            The inner trigger to filter. 
            </summary>
            <version>1.5</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Triggers.ParameterTrigger.Parameters">
            <summary>
            The parameters to pass onto the inner trigger.
            </summary>
            <version>1.5</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Triggers.ParameterTrigger.NextBuild">
            <summary>
            The date and time of the next build.
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Triggers.ProjectTrigger">
            <summary>
            <para>
            The Project Trigger is used to trigger a build when the specified dependent project has completed its build. This trigger can help you split your 
            build process across projects and servers. For example, you could have a CCNet project that will trigger the regression test suite once the main 
            development build has completed successfully. This dependent build could be running on either a local or a remote CCNet server.
            </para>
            <para>
            The Project Trigger works by using .NET remoting to poll the status of the dependent project. Whenever it detects that the dependent project has 
            completed a build, the Project Trigger will fire. The Project Trigger can be configured to fire when the dependent project build succeeded, failed 
            or threw an exception. In order to avoid hammering the remote project through polling, the Project Trigger is composed of an <link>Interval Trigger
            </link>that will set a polling interval to 5 seconds. This inner trigger can be adjusted through changing the configuration.
            </para>
            <para type="info">
            Like all triggers, the projectTrigger must be enclosed within a triggers element in the appropriate <link>Project Configuration Block</link>.
            </para>
            </summary>
            <title>Project Trigger</title>
            <version>1.0</version>
            <remarks>
            <para type="warning">
            There is currently a limitation in the Project Trigger in that it will always trigger a build when the inner trigger fires (at the end of the first 
            interval for an Interval Trigger). This is because the Project Trigger has no way to save its state from a previous server run. So the last time that 
            the build was triggered is not retrievable when the server restarts.
            </para>
            </remarks>
            <example>
            <code title="Minimalist example">
            &lt;projectTrigger project="Core" /&gt;
            </code>
            <code title="Full example">
            &lt;projectTrigger serverUri="tcp://server:21234/CruiseManager.rem" project="Server"&gt;
            &lt;triggerStatus&gt;Success&lt;/triggerStatus&gt;
            &lt;innerTrigger type="intervalTrigger" seconds="30" buildCondition="ForceBuild"/&gt;
            &lt;/projectTrigger&gt;
            </code>
            </example>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Triggers.ProjectTrigger.DefaultServerUri">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Triggers.ProjectTrigger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Triggers.ProjectTrigger"/> class.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Triggers.ProjectTrigger.#ctor(ThoughtWorks.CruiseControl.Remote.ICruiseServerClientFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Triggers.ProjectTrigger"/> class.
            </summary>
            <param name="factory">The factory.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Triggers.ProjectTrigger.IntegrationCompleted">
            <summary>
            Integrations the completed.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Triggers.ProjectTrigger.Fire">
            <summary>
            Fires this instance.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Triggers.ProjectTrigger.Project">
            <summary>
            The name of the dependent project to trigger a build from.
            </summary>
            <version>1.0</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Triggers.ProjectTrigger.ServerUri">
            <summary>
            The URI for the CCNet server containing the dependent project.
            </summary>
            <version>1.0</version>
            <default>tcp://localhost:21234/CruiseManager.rem</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Triggers.ProjectTrigger.TriggerStatus">
            <summary>
            The status of the dependent project that will be used to trigger the build. For example, if this value is set to Success then a build will 
            be triggered when the dependent project completes a successful build.
            </summary>
            <version>1.0</version>
            <default>Success</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Triggers.ProjectTrigger.InnerTrigger">
            <summary>
            The trigger used to modulate the polling interval for the ProjectTrigger. By default, this is set to a ForceBuild IntervalTrigger that will cause 
            the trigger to check the status of the dependent project every 5 seconds.
            </summary>
            <version>1.0</version>
            <default>5 second ForceBuild intervalTrigger</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Triggers.ProjectTrigger.TriggerFirstTime">
            <summary>
            Whether to trigger on the first time or not.
            </summary>
            <version>1.0</version>
            <default>false</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Triggers.ProjectTrigger.SecurityCredentials">
            <summary>
            The security credentials to pass through to the remote server.
            </summary>
            <version>1.6</version>
            <default>None</default>
            <remarks>
            These are only needed if the remote project has security applied. If credentials are passed to the remote
            server, then the enforcerName will be ignored.
            Valid security tokens are: "username" and "password" (this list may be expanded in future).
            </remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Triggers.ProjectTrigger.NextBuild">
            <summary>
            Gets the next build.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Triggers.ScheduleTrigger">
            <summary>
            <para>
            The Schedule Trigger is used to specify that an integration should be run at a certain time on certain days. By default, an integration will only
            be triggered if modifications have been detected since the last integration. The trigger can be configured to force a build even if have occurred
            to source control. The items to watch for modifications are specified with <link>Source Control Blocks</link>.
            </para>
            <para type="info">
            Like all triggers, the scheduleTrigger must be enclosed within a triggers element in the appropriate <link>Project Configuration Block</link>.
            </para>
            </summary>
            <title>Schedule Trigger</title>
            <version>1.0</version>
            <remarks>
            <para>
            Use the <b>buildCondition</b> property if you want to run a scheduled forced build.
            </para>
            <para type="warning">
            this class replaces the <b>PollingScheduleTrigger</b> and the <b>ForceBuildScheduleTrigger</b>.
            </para>
            </remarks>
            <example>
            <code>
            &lt;scheduleTrigger time="23:30" buildCondition="ForceBuild" name="Scheduled"&gt;
            &lt;weekDays&gt;
            &lt;weekDay&gt;Monday&lt;/weekDay&gt;
            &lt;/weekDays&gt;
            &lt;/scheduleTrigger&gt;
            </code>
            </example>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Triggers.ScheduleTrigger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Triggers.ScheduleTrigger"/> class.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Triggers.ScheduleTrigger.#ctor(ThoughtWorks.CruiseControl.Core.Util.DateTimeProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Triggers.ScheduleTrigger"/> class.
            </summary>
            <param name="dtProvider">The dt provider.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Triggers.ScheduleTrigger.IntegrationCompleted">
            <summary>
            Integrations the completed.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Triggers.ScheduleTrigger.Fire">
            <summary>
            Fires this instance.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Triggers.ScheduleTrigger.Time">
            <summary>
            The time of day that the build should run at. The time should be specified in a locale-specific format (ie. H:mm am/pm is acceptable for US locales.)
            </summary>
            <version>1.0</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Triggers.ScheduleTrigger.RandomOffSetInMinutesFromTime">
            <summary>
            Adds a random amount of minutes between 0 and set value to the time. This is mainly meant for spreading the load of actions to a central server. 
            Value must be between 0 and 59.
            </summary>
            <version>1.4</version>
            <default>0</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Triggers.ScheduleTrigger.Name">
            <summary>
            The name of the trigger. This name is passed to external tools as a means to identify the trigger that requested the build.
            </summary>
            <version>1.1</version>
            <default>ScheduleTrigger</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Triggers.ScheduleTrigger.BuildCondition">
            <summary>
            The condition that should be used to launch the integration. By default, this value is <b>IfModificationExists</b>, meaning that an integration will
            only be triggered if modifications have been detected. Set this attribute to <b>ForceBuild</b> in order to ensure that a build should be launched 
            regardless of whether new modifications are detected. 
            </summary>
            <version>1.0</version>
            <default>IfModificationExists</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Triggers.ScheduleTrigger.WeekDays">
            <summary>
            The week days on which the build should be run (eg. Monday, Tuesday). By default, all days of the week are set.
            </summary>
            <version>1.0</version>
            <default>Monday-Sunday</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Triggers.ScheduleTrigger.NextBuild">
            <summary>
            Gets the next build.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Triggers.UrlTrigger">
            <summary>
            <para>
            The Url Trigger is used to trigger a CCNet build when the page at a particular url changes. The Url Trigger will poll the specified url according 
            to a configured polling interval to detect if the last modified date of the page has changed since the last integration.
            </para>
            <para>
            This trigger is especially useful in reducing the load on your source control system caused by the polling for modifications performed by an Interval
            Trigger. If your source control system supports trigger scripts (such as the use of commitinfo scripts in CVS), you can use create a trigger to touch
            the page that is being monitored by CCNet to start a new integration.
            </para>
            <para type="info">
            Like all triggers, the urlTrigger must be enclosed within a triggers element in the appropriate <link>Project Configuration Block</link>.
            </para>
            </summary>
            <title>URL Trigger</title>
            <version>1.0</version>
            <remarks>
            <para type="warning">
            There is currently a limitation in this trigger such that it will not persist the url's last modified date when the server restarts. This means
            that the trigger will always attempt to start a new integration when the first interval expires after the server starts up.
            </para>
            <para type="warning">
            The UrlTrigger will only work with pages that return a reliable LastModified date HTTP Header, such as static html pages or well-behaved dynamic
            pages. Using static html pages is the most reliable way to use this trigger.
            </para>
            <para>
            This trigger has been contributed by Steve Norman.
            </para>
            </remarks>
            <example>
            <code title="Minimalist example">
            &lt;urlTrigger url="http://server/page.html"  /&gt;
            </code>
            <code title="Full example">
            &lt;urlTrigger url="http://server/page.html" seconds="30" buildCondition="ForceBuild" /&gt;
            </code>
            </example>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Triggers.UrlTrigger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Triggers.UrlTrigger"/> class.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Triggers.UrlTrigger.#ctor(ThoughtWorks.CruiseControl.Core.Util.DateTimeProvider,ThoughtWorks.CruiseControl.Core.Util.HttpWrapper)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Triggers.UrlTrigger"/> class.
            </summary>
            <param name="dtProvider">The dt provider.</param>
            <param name="httpWrapper">The HTTP wrapper.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Triggers.UrlTrigger.Fire">
            <summary>
            Fires the trigger.
            </summary>
            <returns>
            A new <see cref="T:ThoughtWorks.CruiseControl.Core.IntegrationResult"/> if the trigger has been fired; <c>null</c> otherwise.
            </returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Triggers.UrlTrigger.HasUrlChanged">
            <summary>
            Determines whether the URL has changed.
            </summary>
            <returns>
            <c>true</c> if the URL has changed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Triggers.UrlTrigger.Url">
            <summary>
            The url to poll for changes.
            </summary>
            <version>1.0</version>
            <default>n/a</default>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Util.AccurateTimer">
            <summary>
             This timer class is useful for diagnosing timing issues.  Just create an instance in a using statement
            to trace out how long things take:
            
            using (new AccurateTimer("Some activity"))
            {
            	// stuff to be timed
            }
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.AccurateTimer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Util.AccurateTimer"/> class.	
            </summary>
            <param name="activityName">Name of the activity.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.AccurateTimer.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources	
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Util.AssemblyMatch">
            <summary>
            A class to represent an assembly.
            </summary>
            <title>Assembly Match</title>
            <version>1.4.3</version>
            <example>
            <code>
            &lt;assemblyMatch expr='*.dll' /&gt;
            </code>
            </example>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.AssemblyMatch.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Util.AssemblyMatch"/> class.
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Util.AssemblyMatch.Expression">
            <summary>
            The name expression of the assembly, e.g. "*.dll". Masks (? and *) are allowed.
            </summary>
            <version>1.4.3</version>
            <default>n/a</default>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Util.BuildProgressInformation">
            <summary>
            	
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.BuildProgressInformation.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Util.BuildProgressInformation"/> class.	
            </summary>
            <param name="artifactDirectory">The artifact directory.</param>
            <param name="projectName">Name of the project.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.BuildProgressInformation.SignalStartRunTask(System.String)">
            <summary>
            Signals the start of a new task, so initialise all needed actions for monitoring this tasks progress
            </summary>
            <param name="information"></param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.BuildProgressInformation.AddTaskInformation(System.String)">
            <summary>
            Adds the task information.	
            </summary>
            <param name="information">The information.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.BuildProgressInformation.GetBuildProgressInformation">
            <summary>
            Gets the build progress information.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.BuildProgressInformation.RemoveListenerFile">
            <summary>
            Deletes the listenerfile
            </summary>        
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Util.BuildProgressInformation.ListenerFile">
            <summary>
            Returns the location of the listenerfile to be used by external programs
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Util.ConsoleTraceListener">
            <summary>
            	
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.ConsoleTraceListener.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Util.ConsoleTraceListener"/> class.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Util.DateTimeProvider">
            <summary>
            	
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.DateTimeProvider.Sleep(System.Int32)">
            <summary>
            Sleeps the specified milliseconds.	
            </summary>
            <param name="milliseconds">The milliseconds.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.DateTimeProvider.Sleep(System.TimeSpan)">
            <summary>
            Sleeps the specified duration.	
            </summary>
            <param name="duration">The duration.</param>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Util.DateTimeProvider.Now">
            <summary>
            Gets the now.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Util.DateTimeProvider.Today">
            <summary>
            Gets the today.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Util.DateUtil">
            <summary>
            Helper class for dates
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Util.DateUtil.DateOutputFormat">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.DateUtil.FormatDate(System.DateTime)">
            <summary>
            formats the date to ISO 8601 format
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.DateUtil.FormatDate(System.DateTime,System.IFormatProvider)">
            <summary>
            formats the date to ISO 8601 format, using the specified formatter
            </summary>
            <param name="date"></param>
            <param name="formatter"></param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.DateUtil.MaxDate(System.DateTime,System.DateTime)">
            <summary>
            Returns the largest of the 2 passed dates
            </summary>
            <param name="dateOne"></param>
            <param name="dateTwo"></param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.DateUtil.ConvertFromUnixTimestamp(System.Double)">
            <summary>
            Convert a Unix timestamp into a DateTime object with local time.
            </summary>
            <param name="timestamp">The unix timestamp to convert.</param>
            <returns>A DateTime object in local time.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.DateUtil.ConvertToUnixTimestamp(System.DateTime)">
            <summary>
            Convert a DateTime object into a unix timestamp.
            </summary>
            <param name="dateTime">The DateTime object to convert.</param>
            <returns>The unix timestamp in UTC time.</returns>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Util.DefaultLogger">
            <summary>
            Logs messages using the default logger.
            </summary>
            <remarks>
            Current this class just hands the messages onto <see cref="T:ThoughtWorks.CruiseControl.Core.Util.Log"/>. This should be
            modified to log messages directly.
            </remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Util.ILogger">
            <summary>
            Log status messages.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.ILogger.Debug(System.String,System.Object[])">
            <summary>
            Log a debug message.
            </summary>
            <param name="message">The message to log.</param>
            <param name="values">Any optional parameters.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.ILogger.Info(System.String,System.Object[])">
            <summary>
            Log a informational message.
            </summary>
            <param name="message">The message to log.</param>
            <param name="values">Any optional parameters.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.ILogger.Warning(System.String,System.Object[])">
            <summary>
            Log a warning message.
            </summary>
            <param name="message">The message to log.</param>
            <param name="values">Any optional parameters.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.ILogger.Warning(System.Exception)">
            <summary>
            Log an exception as a warning.
            </summary>
            <param name="error">The exception details</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.ILogger.Error(System.String,System.Object[])">
            <summary>
            Log an error message.
            </summary>
            <param name="message">The message to log.</param>
            <param name="values">Any optional parameters.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.ILogger.Error(System.Exception)">
            <summary>
            Log an exception as an error.
            </summary>
            <param name="error">The exception details</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.DefaultLogger.Debug(System.String,System.Object[])">
            <summary>
            Log a debug message.
            </summary>
            <param name="message">The message to log.</param>
            <param name="values">Any optional parameters.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.DefaultLogger.Info(System.String,System.Object[])">
            <summary>
            Log a informational message.
            </summary>
            <param name="message">The message to log.</param>
            <param name="values">Any optional parameters.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.DefaultLogger.Warning(System.String,System.Object[])">
            <summary>
            Log a warning message.
            </summary>
            <param name="message">The message to log.</param>
            <param name="values">Any optional parameters.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.DefaultLogger.Warning(System.Exception)">
            <summary>
            Log an exception as a warning.
            </summary>
            <param name="error">The exception details</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.DefaultLogger.Error(System.String,System.Object[])">
            <summary>
            Log an error message.
            </summary>
            <param name="message">The message to log.</param>
            <param name="values">Any optional parameters.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.DefaultLogger.Error(System.Exception)">
            <summary>
            Log an exception as an error.
            </summary>
            <param name="error">The exception details</param>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Util.DefaultShadowCopier">
            <summary>
            A default instance of the shadow copier.
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Util.IShadowCopier">
            <summary>
            Handles the shadow copying of files.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.IShadowCopier.RetrieveFilePath(System.String)">
            <summary>
            Retrieves the path to a file that has been shadow copied.
            </summary>
            <param name="fileName">The name of the file.</param>
            <returns>The full path to the shadow copied file, if it exists, null otherwise.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.DefaultShadowCopier.RetrieveFilePath(System.String)">
            <summary>
            Retrieves the path to a file that has been shadow copied.
            </summary>
            <param name="fileName">The name of the file.</param>
            <returns>The full path to the shadow copied file, if it exists, null otherwise.</returns>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Util.DefaultShadowCopier.ShadowStore">
            <summary>
            A bacing store for shadow-copied files.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.DefaultShadowCopier.ShadowStore.CopyFile(System.String)">
            <summary>
            Checks if a file already exists, if not, it attempts to copy it over.
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.DefaultShadowCopier.ShadowStore.Dispose">
            <summary>
            Delete any copied files.
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Util.EnvironmentVariable">
            <summary>
            An environment variable.
            </summary>
            <title>Environment Variable</title>
            <version>1.0</version>
            <example>
            <code>
            &lt;variable name="TestVar" value="TextValue" /&gt;
            </code>
            </example>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Util.EnvironmentVariable.name">
            <summary>
            The name of the environment variable.
            </summary>
            <version>1.0</version>
            <default>n/a</default>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Util.EnvironmentVariable.value">
            <summary>
            The value of the environment variable.
            </summary>
            <version>1.0</version>
            <default>None</default>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Util.ExecutionEnvironment">
            <summary>
            	
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Util.IExecutionEnvironment">
            <summary>
            	
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.IExecutionEnvironment.GetDefaultProgramDataFolder(ThoughtWorks.CruiseControl.Core.Util.ApplicationType)">
            <summary>
            Gets the default program data folder.	
            </summary>
            <param name="application">The application.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.IExecutionEnvironment.EnsurePathIsRooted(System.String)">
            <summary>
            Ensures the path is rooted.	
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Util.IExecutionEnvironment.DirectorySeparator">
            <summary>
            Gets the directory separator.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Util.IExecutionEnvironment.IsRunningOnWindows">
            <summary>
            Gets the is running on windows.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Util.IExecutionEnvironment.RuntimeDirectory">
            <summary>
            Gets the runtime directory.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.ExecutionEnvironment.GetDefaultProgramDataFolder(ThoughtWorks.CruiseControl.Core.Util.ApplicationType)">
            <summary>
            Get the directory for the default location of the CruiseControl.NET data files.
            </summary>
            <param name="application">Type of the application. E.g. Server or WebDashboard.</param>
            <returns>The location of the CruiseControl.NET data files.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.ExecutionEnvironment.EnsurePathIsRooted(System.String)">
            <summary>
            Enstures the path is rooted.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Util.ExecutionEnvironment.DirectorySeparator">
            <summary>
            Gets the directory separator.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Util.ExecutionEnvironment.IsRunningOnWindows">
            <summary>
            Returns true if CruiseControl is running on a windows platform
            </summary>
            <remarks>
            If this method returns false, expect any DllImport not to work!
            </remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Util.ExecutionEnvironment.RuntimeDirectory">
            <summary>
            Gets the directory where the common language runtime is installed. 
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Util.ApplicationType">
            <summary>
            	
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Util.ApplicationType.Unknown">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Util.ApplicationType.Server">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Util.ApplicationType.WebDashboard">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Util.FileChangedWatcher">
            <summary>
            	
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Util.IFileWatcher">
            <summary>
            	
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.IFileWatcher.AddWatcher(System.String)">
            <summary>
            Adds the watcher.	
            </summary>
            <param name="filename">The filename.</param>
            <remarks></remarks>
        </member>
        <member name="E:ThoughtWorks.CruiseControl.Core.Util.IFileWatcher.OnFileChanged">
            <summary>
            Occurs when [on file changed].	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Util.FileChangedWatcher.firstArgs">
            <summary>
             Event args of first event to fire (filesystem watcher reports
            multiple events on a single save)
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.FileChangedWatcher.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Util.FileChangedWatcher"/> class.	
            </summary>
            <param name="filenames">The filenames.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.FileChangedWatcher.AddWatcher(System.String)">
            <summary>
            Adds the watcher.	
            </summary>
            <param name="filename">The filename.</param>
            <remarks></remarks>
        </member>
        <member name="E:ThoughtWorks.CruiseControl.Core.Util.FileChangedWatcher.OnFileChanged">
            <summary>
            Occurs when [on file changed].	
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Util.FtpLib">
            <summary>
            Wrapper class around the EnterpriseDT Ftp library
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.IFtpLib.LogIn(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Logs into the specified server, with the userName and password
            If activeConnectionMode is set to true, active connection is used,
            otherwise passive connection.  
            </summary>
            <param name="serverName"></param>
            <param name="userName"></param>
            <param name="password"></param>
            <param name="activeConnectionMode"></param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.IFtpLib.DisConnect">
            <summary>
            Disconnects from the server
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.IFtpLib.IsConnected">
            <summary>
            returns true if connected
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.IFtpLib.CurrentWorkingFolder">
            <summary>
            returns the current path of the server
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.IFtpLib.DownloadFolder(System.String,System.String,System.Boolean)">
            <summary>
            downloads the remoter folder to the local folder, recursive if wanted
            </summary>
            <param name="localFolder"></param>
            <param name="remoteFolder"></param>
            <param name="recursive"></param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.IFtpLib.UploadFolder(System.String,System.String,System.Boolean)">
            <summary>
            Uploads a local folder to the specified remotefolder, recursive if wanted
            </summary>
            <param name="remoteFolder"></param>
            <param name="localFolder"></param>
            <param name="recursive"></param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.IFtpLib.ListNewOrUpdatedFilesAtFtpSite(System.String,System.String,System.Boolean)">
            <summary>
            Returns a list of new or updated files at the ftp site, compared to a local folder
            </summary>
            <param name="localFolder"></param>
            <param name="remoteFolder"></param>
            <param name="recursive"></param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.FtpLib.#ctor(ThoughtWorks.CruiseControl.Core.Tasks.TaskBase,ThoughtWorks.CruiseControl.Core.Util.BuildProgressInformation)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Util.FtpLib"/> class.	
            </summary>
            <param name="callingTask">The calling task.</param>
            <param name="buildProgressInformation">The build progress information.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.FtpLib.#ctor(ThoughtWorks.CruiseControl.Core.Util.BuildProgressInformation)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Util.FtpLib"/> class.	
            </summary>
            <param name="buildProgressInformation">The build progress information.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.FtpLib.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Util.FtpLib"/> class.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.FtpLib.LogIn(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Logs the in.	
            </summary>
            <param name="serverName">Name of the server.</param>
            <param name="userName">Name of the user.</param>
            <param name="password">The password.</param>
            <param name="activeConnectionMode">The active connection mode.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.FtpLib.DownloadFolder(System.String,System.String,System.Boolean)">
            <summary>
            Downloads the folder.	
            </summary>
            <param name="localFolder">The local folder.</param>
            <param name="remoteFolder">The remote folder.</param>
            <param name="recursive">The recursive.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.FtpLib.UploadFolder(System.String,System.String,System.Boolean)">
            <summary>
            Uploads the folder.	
            </summary>
            <param name="remoteFolder">The remote folder.</param>
            <param name="localFolder">The local folder.</param>
            <param name="recursive">The recursive.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.FtpLib.DisConnect">
            <summary>
            Dises the connect.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.FtpLib.IsConnected">
            <summary>
            Determines whether this instance is connected.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.FtpLib.CurrentWorkingFolder">
            <summary>
            Currents the working folder.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.FtpLib.ListNewOrUpdatedFilesAtFtpSite(System.String,System.String,System.Boolean)">
            <summary>
            Lists the new or updated files at FTP site.	
            </summary>
            <param name="localFolder">The local folder.</param>
            <param name="remoteFolder">The remote folder.</param>
            <param name="recursive">The recursive.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Util.FtpLib.TimeDifference">
            <summary>
            Gets or sets the time difference.	
            </summary>
            <value>The time difference.</value>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Util.HtmlAwareMultiTransformer">
            <summary>
            	
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Util.IMultiTransformer">
            <summary>
            	
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.IMultiTransformer.Transform(System.String,System.String[],System.Collections.Hashtable)">
            <summary>
            Transforms the specified input.	
            </summary>
            <param name="input">The input.</param>
            <param name="transformerFileNames">The transformer file names.</param>
            <param name="xsltArgs">The XSLT args.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.HtmlAwareMultiTransformer.#ctor(ThoughtWorks.CruiseControl.Core.Util.ITransformer)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Util.HtmlAwareMultiTransformer"/> class.	
            </summary>
            <param name="delegateTransformer">The delegate transformer.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.HtmlAwareMultiTransformer.Transform(System.String,System.String[],System.Collections.Hashtable)">
            <summary>
            Transforms the specified input.	
            </summary>
            <param name="input">The input.</param>
            <param name="transformerFileNames">The transformer file names.</param>
            <param name="xsltArgs">The XSLT args.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Util.HtmlExceptionFormatter">
            <summary>
            Formats the Exception into HTML. Need to see if this can be moved to CCException class.
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Util.IStringFormatter">
            <summary>
            Summary description for IStringFormatter.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.IStringFormatter.ToString">
            <summary>
            Toes the string.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.HtmlExceptionFormatter.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Util.HtmlExceptionFormatter"/> class.	
            </summary>
            <param name="exception">The exception.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.HtmlExceptionFormatter.ToString">
            <summary>
            Toes the string.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Util.HttpWrapper">
            <summary>
            Used to wrap calls to HttpWebRequest.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.HttpWrapper.GetLastModifiedTimeFor(System.Uri,System.DateTime)">
            <summary>
            Gets the last modified time for.	
            </summary>
            <param name="url">The URL.</param>
            <param name="previousModifiedTime">The previous modified time.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Util.IFileDirectoryDeleter">
            <summary>
            	
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.IFileDirectoryDeleter.DeleteIncludingReadOnlyObjects(System.String)">
            <summary>
            Deletes any file or directory called path.
            If path is a directory, deletes recursively
            All readonly objects encountered are also deleted
            </summary>
            <param name="path"></param>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Util.IFileSystem">
            <summary>
            	
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.IFileSystem.Copy(System.String,System.String)">
            <summary>
            Copies the specified source path.	
            </summary>
            <param name="sourcePath">The source path.</param>
            <param name="destPath">The dest path.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.IFileSystem.Save(System.String,System.String)">
            <summary>
            Saves the specified file.	
            </summary>
            <param name="file">The file.</param>
            <param name="content">The content.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.IFileSystem.AtomicSave(System.String,System.String)">
            <summary>
            Atomics the save.	
            </summary>
            <param name="file">The file.</param>
            <param name="content">The content.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.IFileSystem.AtomicSave(System.String,System.String,System.Text.Encoding)">
            <summary>
            Atomics the save.	
            </summary>
            <param name="file">The file.</param>
            <param name="content">The content.</param>
            <param name="encoding">The encoding.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.IFileSystem.Load(System.String)">
            <summary>
            Loads the specified file.	
            </summary>
            <param name="file">The file.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.IFileSystem.FileExists(System.String)">
            <summary>
            Files the exists.	
            </summary>
            <param name="file">The file.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.IFileSystem.DirectoryExists(System.String)">
            <summary>
            Directories the exists.	
            </summary>
            <param name="folder">The folder.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.IFileSystem.EnsureFolderExists(System.String)">
            <summary>
            Ensures that the folder for the specified file exists.
            </summary>
            <param name="fileName">The name of the file, including the folder path.</param>
            <returns>The fileName.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.IFileSystem.EnsureFileExists(System.String)">
            <summary>
            Ensures that the specified file exists.
            </summary>
            <param name="fileName">The name of the file.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.IFileSystem.GetFreeDiskSpace(System.String)">
            <summary>
            Retrieves the free disk space for a drive.
            </summary>
            <param name="driveName">The name of the drive (e.g. c:).</param>
            <returns>The amount of free space in bytes.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.IFileSystem.GetFilesInDirectory(System.String)">
            <summary>
            Lists all the files within a directory.
            </summary>
            <param name="directory"></param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.IFileSystem.GetFilesInDirectory(System.String,System.Boolean)">
            <summary>
            Lists all the files within a directory.
            </summary>
            <param name="directory">The directory.</param>
            <param name="includeSubDirectories">
            If set to <c>true</c> then files in sub directories will be included.
            </param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.IFileSystem.GetLastWriteTime(System.String)">
            <summary>
            Retrieves the last write time of a file.
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.IFileSystem.GenerateTaskResultFromFile(System.String)">
            <summary>
            Generates a task result from a file.
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.IFileSystem.GenerateTaskResultFromFile(System.String,System.Boolean)">
            <summary>
            Generates a task result from a file.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="deleteAfterMerge">If set to <c>true</c> the file will be deleted after a merge.</param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.IFileSystem.OpenOutputStream(System.String)">
            <summary>
            Opens an output stream for saving data.
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.IFileSystem.OpenInputStream(System.String)">
            <summary>
            Opens an input stream for loading data.
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.IFileSystem.CreateDirectory(System.String)">
            <summary>
            Creates a directory.
            </summary>
            <param name="folder">The name of the folder to create.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.IFileSystem.DeleteFile(System.String)">
            <summary>
            Deletes a file.
            </summary>
            <param name="path">The path of the file to delete.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.IFileSystem.DeleteDirectory(System.String)">
            <summary>
            Deletes a directory.
            </summary>
            <param name="folder">The name of the folder to delete.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.IFileSystem.DeleteDirectory(System.String,System.Boolean)">
            <summary>
            Deletes a directory, optionally deleting all sub-directories.
            </summary>
            <param name="folder">The name of the folder to delete.</param>
            <param name="recursive">If set to <c>true</c> recursively delete folders.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.IFileSystem.GetFileLength(System.String)">
            <summary>
            Gets the length of the file.
            </summary>
            <param name="fullName">The full name.</param>
            <returns>The length of the file in bytes.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.IFileSystem.GetFilesInDirectory(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Gets the files in directory.
            </summary>
            <param name="path">The path.</param>
            <param name="pattern">The pattern.</param>
            <param name="searchOption">The search option.</param>
            <returns>The files in the directory that match the pattern.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.IFileSystem.GetFileVersion(System.String)">
            <summary>
            Gets the version of a file.
            </summary>
            <param name="filePath">The full path to the file.</param>
            <returns>The version number of the file it it exists; <c>null</c> otherwise.</returns>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Util.IFileTransformer">
            <summary>
            	
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.IFileTransformer.Transform(System.String,System.String)">
            <summary>
            Transforms the specified input file name.	
            </summary>
            <param name="inputFileName">Name of the input file.</param>
            <param name="transformerFileName">Name of the transformer file.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Util.ILdapService">
            <summary>
            Mapped functionality for an LDAP service
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.ILdapService.RetrieveUserInformation(System.String)">
            <summary>
            Retrieves the information of the specified user
            </summary>
            <param name="userNameToRetrieveFrom"></param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.ILdapService.Authenticate(System.String,System.String,System.String)">
            <summary>
            Tries to authenticate the user to the specified LDAP service (domain)
            </summary>
            <param name="userName"></param>
            <param name="password"></param>
            <param name="domainName"></param>
            <returns></returns>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Util.ILdapService.DomainName">
            <summary>
            Gets or sets the name of the domain.	
            </summary>
            <value>The name of the domain.</value>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Util.Impersonation">
            <summary>
            Facilitates impersonation of a Windows User.
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Util.Impersonation.tokenHandle">
            <summary>
            Windows Token.
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Util.Impersonation.impersonatedUser">
            <summary>
            The impersonated User.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.Impersonation.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the Impersonation class.
            </summary>
            <param name="domainName">Domain name of the impersonated user.</param>
            <param name="userName">Name of the impersonated user.</param>
            <param name="password">Password of the impersonated user.</param>
            <remarks>
            Uses the unmanaged LogonUser function to get the user token for
            the specified user, domain, and password.
            </remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.Impersonation.Impersonate">
            <summary>
            Starts the impersonation.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.Impersonation.Revert">
            <summary>
            Stops the impersonation and releases security token.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.Impersonation.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources	
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Util.IoService">
            <summary>
            	
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.IoService.DeleteIncludingReadOnlyObjects(System.String)">
            <summary>
            Deletes the including read only objects.	
            </summary>
            <param name="path">The path.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.IoService.DeleteDirectoryWithLongPath(System.String)">
            <summary>
            Deletes a directory on Windows with a commandline call.
            
            Reason:
            .NET only supports filenames up to 260 characters long for backwards compability
            read more at: http://blogs.msdn.com/bclteam/archive/2007/02/13/long-paths-in-net-part-1-of-3-kim-hamilton.aspx
            this is a Windows only limitation
            </summary>
            <param name="path">Path to delete.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.IoService.SetReadOnlyRecursive(System.IO.DirectoryInfo)">
            <summary>
            Sets directory and file attributes to "normal" recursive
            </summary>
            <param name="path">Root path to start from.</param>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Util.IRegistry">
            <summary>
            	
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.IRegistry.GetLocalMachineSubKeyValue(System.String,System.String)">
            <summary>
            Gets the local machine sub key value.	
            </summary>
            <param name="path">The path.</param>
            <param name="name">The name.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.IRegistry.GetExpectedLocalMachineSubKeyValue(System.String,System.String)">
            <summary>
            Gets the expected local machine sub key value.	
            </summary>
            <param name="path">The path.</param>
            <param name="name">The name.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Util.ITransformer">
            <summary>
            	
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.ITransformer.Transform(System.String,System.String,System.Collections.Hashtable)">
            <summary>
            Transforms the specified input.	
            </summary>
            <param name="input">The input.</param>
            <param name="transformerFileName">Name of the transformer file.</param>
            <param name="xsltArgs">The XSLT args.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Util.KillUtil.WIN2K_SUPPORT_TOOLS_DIR">
            <summary>
            Default installation directory for the "Windows 2000 Service Pack 4 Support Tools" package.
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Util.LdapHelper">
            <summary>
            	
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.LdapHelper.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.LdapHelper.#ctor(System.String)">
            <summary>
            Extented constructor
            </summary>
            <param name="domainName"></param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.LdapHelper.#ctor(System.String,System.String,System.String)">
            <summary>
            Extended constructor
            </summary>
            <param name="domainName"></param>
            <param name="logonUser"></param>
            <param name="logOnPassword"></param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.LdapHelper.RetrieveUserInformation(System.String)">
            <summary>
            Retrieves the user information.	
            </summary>
            <param name="userNameToRetrieveFrom">The user name to retrieve from.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.LdapHelper.Authenticate(System.String,System.String,System.String)">
            <summary>
            Attempts to authenticate the supplied user credentials using DirectoryServices.
            </summary>
            <param name="userName">The user name to be authenticated.</param>
            <param name="password">Password, if needed, for the given user name.</param>
            <param name="domainName">Domain name (path) of the domain providing the directory service.</param>
            <returns>True if the supplied credentials are valid on the given domain, false otherwise.</returns>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Util.LdapHelper.DomainName">
            <summary>
            The domain to use, get the information from, authenticate users
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Util.LdapHelper.LdapLogonUserName">
            <summary>
            the username to use for logging into the ldap service
            this is NOT the username to retrieve information from
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Util.LdapHelper.LdapLogonPassword">
            <summary>
            the password of the LdapLogonUser
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Util.LdapHelper.LdapFieldMailAddress">
            <summary>
            A simple SMTP address
            Default value : mail
            <example>
            mail = John.Wayne@texas.com
            </example>
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Util.LdapHelper.LdapFieldSurName">
            <summary>
            This would be referred to as last name or surname.
            Default value : sn
            </summary>
            <example>
            SN = Thomas
            </example>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Util.LdapHelper.LdapFieldName">
            <summary>
            Exactly the same as CN
            Default value : name
            <example>
            name = Guy Thomas
            </example>
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Util.LdapHelper.LdapFieldCommonName">
            <summary>
            This LDAP attribute is made up from givenName joined to SN.
            Default value : CN
            <example>
            CN=Guy Thomas
            </example>
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Util.LdapHelper.LdapFieldGivenName">
            <summary>
            Firstname also called Christian name
            Default value : GivenName
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Util.LdapHelper.LdapFieldDisplayName">
            <summary>
            If you script this property, be sure you understand which field you are configuring.
            DisplayName can be confused with CN or description.
            Default Value : displayname
            <example>
            displayName = Guy Thomas.
            </example>
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Util.LdapHelper.LdapFieldMailNickName">
            <summary>
            Normally this is the same value as the sAMAccountName, but could be different if you wished. Needed for mail enabled contacts.
            Default value : MailNickName
            <example>
            MailNickName = Johny
            </example>
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Util.LdapUserInfo">
            <summary>
            Information retrieved about a user from the LDAP service
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Util.LdapUserInfo.MailAddress">
            <summary>
             Contents of LdapFieldMailAddress
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Util.LdapUserInfo.Name">
            <summary>
            Contents of LdapFieldName
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Util.LdapUserInfo.SurName">
            <summary>
            LdapFieldSurName
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Util.LdapUserInfo.CommonName">
            <summary>
            LdapFieldCommonName
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Util.LdapUserInfo.GivenName">
            <summary>
            LdapFieldGivenName
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Util.LdapUserInfo.DisplayName">
            <summary>
            LdapFieldDisplayName
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Util.LdapUserInfo.MailNickName">
            <summary>
            LdapFieldMailNickName
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Util.Log4NetTrace.ITraceLog">
            <summary>
            	
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.Log4NetTrace.ITraceLog.Trace(System.Object)">
            <summary>
            Traces the specified message.	
            </summary>
            <param name="message">The message.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.Log4NetTrace.ITraceLog.Trace(System.Object,System.Exception)">
            <summary>
            Traces the specified message.	
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.Log4NetTrace.ITraceLog.TraceFormat(System.String,System.Object[])">
            <summary>
            Traces the format.	
            </summary>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Util.Log4NetTrace.ITraceLog.IsTraceEnabled">
            <summary>
            Gets the is trace enabled.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Util.Log4NetTrace.TraceLogImpl">
            <summary>
            	
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Util.Log4NetTrace.TraceLogImpl.ThisDeclaringType">
            <summary>
            The fully qualified name of this declaring type not the type of any subclass.
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Util.Log4NetTrace.TraceLogImpl.s_defaultLevelTrace">
            <summary>
            The default value for the TRACE level
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Util.Log4NetTrace.TraceLogImpl.m_levelTrace">
            <summary>
            The current value for the TRACE level
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.Log4NetTrace.TraceLogImpl.#ctor(log4net.Core.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Util.Log4NetTrace.TraceLogImpl"/> class.	
            </summary>
            <param name="logger">The logger.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.Log4NetTrace.TraceLogImpl.ReloadLevels(log4net.Repository.ILoggerRepository)">
            <summary>
            Lookup the current value of the TRACE level
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.Log4NetTrace.TraceLogImpl.Trace(System.Object)">
            <summary>
            Traces the specified message.	
            </summary>
            <param name="message">The message.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.Log4NetTrace.TraceLogImpl.Trace(System.Object,System.Exception)">
            <summary>
            Traces the specified message.	
            </summary>
            <param name="message">The message.</param>
            <param name="exception">The exception.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.Log4NetTrace.TraceLogImpl.TraceFormat(System.String,System.Object[])">
            <summary>
            Traces the format.	
            </summary>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.Log4NetTrace.TraceLogImpl.TraceFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Traces the format.	
            </summary>
            <param name="provider">The provider.</param>
            <param name="format">The format.</param>
            <param name="args">The args.</param>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Util.Log4NetTrace.TraceLogImpl.IsTraceEnabled">
            <summary>
            Gets the is trace enabled.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Util.Log4NetTrace.TraceLogManager">
            <summary>
            	
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Util.Log4NetTrace.TraceLogManager.s_wrapperMap">
            <summary>
            The wrapper map to use to hold the <see cref="T:ThoughtWorks.CruiseControl.Core.Util.Log4NetTrace.TraceLogImpl"/> objects
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.Log4NetTrace.TraceLogManager.#ctor">
            <summary>
            Private constructor to prevent object creation
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.Log4NetTrace.TraceLogManager.Exists(System.String)">
            <summary>
            Returns the named logger if it exists
            </summary>
            <remarks>
            <para>If the named logger exists (in the default hierarchy) then it
            returns a reference to the logger, otherwise it returns
            <c>null</c>.</para>
            </remarks>
            <param name="name">The fully qualified logger name to look for</param>
            <returns>The logger found, or null</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.Log4NetTrace.TraceLogManager.Exists(System.String,System.String)">
            <summary>
            Returns the named logger if it exists
            </summary>
            <remarks>
            <para>If the named logger exists (in the specified domain) then it
            returns a reference to the logger, otherwise it returns
            <c>null</c>.</para>
            </remarks>
            <param name="domain">the domain to lookup in</param>
            <param name="name">The fully qualified logger name to look for</param>
            <returns>The logger found, or null</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.Log4NetTrace.TraceLogManager.Exists(System.Reflection.Assembly,System.String)">
            <summary>
            Returns the named logger if it exists
            </summary>
            <remarks>
            <para>If the named logger exists (in the specified assembly's domain) then it
            returns a reference to the logger, otherwise it returns
            <c>null</c>.</para>
            </remarks>
            <param name="assembly">the assembly to use to lookup the domain</param>
            <param name="name">The fully qualified logger name to look for</param>
            <returns>The logger found, or null</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.Log4NetTrace.TraceLogManager.GetCurrentLoggers">
            <summary>
            Returns all the currently defined loggers in the default domain.
            </summary>
            <remarks>
            <para>The root logger is <b>not</b> included in the returned array.</para>
            </remarks>
            <returns>All the defined loggers</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.Log4NetTrace.TraceLogManager.GetCurrentLoggers(System.String)">
            <summary>
            Returns all the currently defined loggers in the specified domain.
            </summary>
            <param name="domain">the domain to lookup in</param>
            <remarks>
            The root logger is <b>not</b> included in the returned array.
            </remarks>
            <returns>All the defined loggers</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.Log4NetTrace.TraceLogManager.GetCurrentLoggers(System.Reflection.Assembly)">
            <summary>
            Returns all the currently defined loggers in the specified assembly's domain.
            </summary>
            <param name="assembly">the assembly to use to lookup the domain</param>
            <remarks>
            The root logger is <b>not</b> included in the returned array.
            </remarks>
            <returns>All the defined loggers</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.Log4NetTrace.TraceLogManager.GetLogger(System.String)">
            <summary>
            Retrieve or create a named logger.
            </summary>
            <remarks>
            <para>Retrieve a logger named as the <paramref name="name"/>
            parameter. If the named logger already exists, then the
            existing instance will be returned. Otherwise, a new instance is
            created.</para>
            
            <para>By default, loggers do not have a set level but inherit
            it from the hierarchy. This is one of the central features of
            log4net.</para>
            </remarks>
            <param name="name">The name of the logger to retrieve.</param>
            <returns>the logger with the name specified</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.Log4NetTrace.TraceLogManager.GetLogger(System.String,System.String)">
            <summary>
            Retrieve or create a named logger.
            </summary>
            <remarks>
            <para>Retrieve a logger named as the <paramref name="name"/>
            parameter. If the named logger already exists, then the
            existing instance will be returned. Otherwise, a new instance is
            created.</para>
            
            <para>By default, loggers do not have a set level but inherit
            it from the hierarchy. This is one of the central features of
            log4net.</para>
            </remarks>
            <param name="domain">the domain to lookup in</param>
            <param name="name">The name of the logger to retrieve.</param>
            <returns>the logger with the name specified</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.Log4NetTrace.TraceLogManager.GetLogger(System.Reflection.Assembly,System.String)">
            <summary>
            Retrieve or create a named logger.
            </summary>
            <remarks>
            <para>Retrieve a logger named as the <paramref name="name"/>
            parameter. If the named logger already exists, then the
            existing instance will be returned. Otherwise, a new instance is
            created.</para>
            
            <para>By default, loggers do not have a set level but inherit
            it from the hierarchy. This is one of the central features of
            log4net.</para>
            </remarks>
            <param name="assembly">the assembly to use to lookup the domain</param>
            <param name="name">The name of the logger to retrieve.</param>
            <returns>the logger with the name specified</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.Log4NetTrace.TraceLogManager.GetLogger(System.Type)">
            <summary>
            Shorthand for <see cref="M:log4net.LogManager.GetLogger(System.String)"/>.
            </summary>
            <remarks>
            Get the logger for the fully qualified name of the type specified.
            </remarks>
            <param name="type">The full name of <paramref name="type"/> will 
            be used as the name of the logger to retrieve.</param>
            <returns>the logger with the name specified</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.Log4NetTrace.TraceLogManager.GetLogger(System.String,System.Type)">
            <summary>
            Shorthand for <see cref="M:log4net.LogManager.GetLogger(System.String)"/>.
            </summary>
            <remarks>
            Get the logger for the fully qualified name of the type specified.
            </remarks>
            <param name="domain">the domain to lookup in</param>
            <param name="type">The full name of <paramref name="type"/> will 
            be used as the name of the logger to retrieve.</param>
            <returns>the logger with the name specified</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.Log4NetTrace.TraceLogManager.GetLogger(System.Reflection.Assembly,System.Type)">
            <summary>
            Shorthand for <see cref="M:log4net.LogManager.GetLogger(System.String)"/>.
            </summary>
            <remarks>
            Get the logger for the fully qualified name of the type specified.
            </remarks>
            <param name="assembly">the assembly to use to lookup the domain</param>
            <param name="type">The full name of <paramref name="type"/> will 
            be used as the name of the logger to retrieve.</param>
            <returns>the logger with the name specified</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.Log4NetTrace.TraceLogManager.WrapLogger(log4net.Core.ILogger)">
            <summary>
            Lookup the wrapper object for the logger specified
            </summary>
            <param name="logger">the logger to get the wrapper for</param>
            <returns>the wrapper for the logger specified</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.Log4NetTrace.TraceLogManager.WrapLoggers(log4net.Core.ILogger[])">
            <summary>
            Lookup the wrapper objects for the loggers specified
            </summary>
            <param name="loggers">the loggers to get the wrappers for</param>
            <returns>Lookup the wrapper objects for the loggers specified</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.Log4NetTrace.TraceLogManager.WrapperCreationHandler(log4net.Core.ILogger)">
            <summary>
            Method to create the <see cref="T:log4net.Core.ILoggerWrapper"/> objects used by
            this manager.
            </summary>
            <param name="logger">The logger to wrap</param>
            <returns>The wrapper for the logger specified</returns>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Util.LogFileTraceListener">
            <summary>
            	
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.LogFileTraceListener.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Util.LogFileTraceListener"/> class.	
            </summary>
            <param name="logfile">The logfile.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.LogFileTraceListener.Write(System.String)">
            <summary>
            Writes the specified message.	
            </summary>
            <param name="message">The message.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.LogFileTraceListener.Write(System.Object)">
            <summary>
            Writes the specified obj.	
            </summary>
            <param name="obj">The obj.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.LogFileTraceListener.Write(System.String,System.String)">
            <summary>
            Writes the specified message.	
            </summary>
            <param name="message">The message.</param>
            <param name="category">The category.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.LogFileTraceListener.Write(System.Object,System.String)">
            <summary>
            Writes the specified obj.	
            </summary>
            <param name="obj">The obj.</param>
            <param name="category">The category.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.LogFileTraceListener.WriteLine(System.String)">
            <summary>
            Writes the line.	
            </summary>
            <param name="message">The message.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.LogFileTraceListener.WriteLine(System.Object)">
            <summary>
            Writes the line.	
            </summary>
            <param name="obj">The obj.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.LogFileTraceListener.WriteLine(System.String,System.String)">
            <summary>
            Writes the line.	
            </summary>
            <param name="message">The message.</param>
            <param name="category">The category.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.LogFileTraceListener.WriteLine(System.Object,System.String)">
            <summary>
            Writes the line.	
            </summary>
            <param name="obj">The obj.</param>
            <param name="category">The category.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.LogFileTraceListener.Flush">
            <summary>
            Flushes this instance.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.LogFileTraceListener.Close">
            <summary>
            Closes this instance.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.LogFileTraceListener.Dispose(System.Boolean)">
            <summary>
            Disposes the specified disposing.	
            </summary>
            <param name="disposing">The disposing.</param>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Util.Log">
            <summary>
            	
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.Log.DisableLogging">
            <summary>
            Disables logging
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.Log.EnableLogging">
            <summary>
            Enables logging
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.Log.Info(System.String,System.Object[])">
            <summary>
            Logs at information level
            </summary>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.Log.Info(System.String)">
            <summary>
            Logs at information level
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.Log.Debug(System.String)">
            <summary>
            Logs at debug level
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.Log.Debug(System.String,System.Object[])">
            <summary>
            Logs at debug level
            </summary>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.Log.Warning(System.String)">
            <summary>
            Logs at warning level
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.Log.Warning(System.String,System.Object[])">
            <summary>
            Logs at warning level
            </summary>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.Log.Warning(System.Exception)">
            <summary>
            Logs at warning level
            </summary>
            <param name="ex"></param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.Log.Error(System.String)">
            <summary>
            Logs at Error level
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.Log.Error(System.String,System.Object[])">
            <summary>
            Logs at error level
            </summary>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.Log.Error(System.Exception)">
            <summary>
            Logs at errorlevel
            </summary>
            <param name="ex"></param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.Log.Trace">
            <summary>
            Logs at trace level
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.Log.Trace(System.String)">
            <summary>
            Logs at trace level
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.Log.Trace(System.String,System.Object[])">
            <summary>
            Logs at trace level
            </summary>
            <param name="message"></param>
            <param name="args"></param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.Log.StartTrace">
            <summary>
            Starts the trace.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.Log.StartTrace(System.String,System.Object[])">
            <summary>
            Starts the trace.	
            </summary>
            <param name="message">The message.</param>
            <param name="args">The args.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Util.Log.TraceBlock">
            <summary>
            A class for putting a trace call in a block.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.Log.TraceBlock.#ctor(ThoughtWorks.CruiseControl.Core.Util.Log4NetTrace.ITraceLog,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Util.Log.TraceBlock"/> class.
            </summary>
            <param name="logger">The underlying logger to use.</param>
            <param name="methodName">The name of the method that is being traced;</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.Log.TraceBlock.#ctor(ThoughtWorks.CruiseControl.Core.Util.Log4NetTrace.ITraceLog,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Util.Log.TraceBlock"/> class.
            </summary>
            <param name="logger">The underlying logger to use.</param>
            <param name="methodName">The name of the method that is being traced;</param>
            <param name="message"></param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.Log.TraceBlock.Dispose">
            <summary>
            Disposes of the trace block.
            </summary>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Util.NotifierDelegate">
            <summary>
            	
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Util.NotifierList">
            <summary>
            	
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.NotifierList.AddDelegateForAddEvent(ThoughtWorks.CruiseControl.Core.Util.NotifierDelegate)">
            <summary>
            Adds the delegate for add event.	
            </summary>
            <param name="handler">The handler.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.NotifierList.AddDelegateForRemoveEvent(ThoughtWorks.CruiseControl.Core.Util.NotifierDelegate)">
            <summary>
            Adds the delegate for remove event.	
            </summary>
            <param name="handler">The handler.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.NotifierList.Add(System.Object)">
            <summary>
            Adds the specified value.	
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.NotifierList.Remove(System.Object)">
            <summary>
            Removes the specified value.	
            </summary>
            <param name="value">The value.</param>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Util.PathUtils">
            <summary>
             This is a utility class containing static methods that match file patterns
             against file paths. This utility is uses the Ant project tools as a basis.
             
             It supports the following wild cards.
             
             ** for any directory matching
             *  for zero or more of any character
             ?  for one of any character
             
             The patterns may be combined.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.PathUtils.Match(System.String,System.String,System.Boolean)">
            <summary>
            Tests wheter or not a string matches against a pattern. The
            pattern can contain two special characters: <br/>
            '*' means zero or more of any characters<br/>
            '?' means one and only one of any character<br />
            All other characters are matched exactly.
            </summary>
            <param name="pattern">The pattern to match against.</param>
            <param name="str">the string that must match the pattern.</param>
            <param name="isCaseSensitive">Whether or not the match is
            case sensitive.</param>
            <returns><c>true</c> if the string matches the pattern.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.PathUtils.MatchPath(System.String,System.String,System.Boolean)">
            <summary>
            Tests whether or not a given path matches a given pattern. The
            special sequence '**' means zero or more directories.
            </summary>
            <param name="pattern">the pattern to match against.</param>
            <param name="str">The path to match.</param>
            <param name="isCaseSensitive">Wheter or not match should be performed
            case sisitively.</param>
            <returns><c>true</c>if the pattern matches.</returns>
            <remarks>If <paramref name="str"/> is null or an empty string, the match always fails.</remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.PathUtils.SplitPath(System.String)">
            <summary>
            Breaks up a target path based on know seperators such as
            / or \. This method also includes the platform seperator.
            </summary>
            <param name="target">This is the path to split.</param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.PathUtils.IsSeperator(System.Char)">
            <summary>
            Determine if a character is a commonly used seperator, or the
            platform seperator.
            </summary>
            <param name="c">Character to examine.</param>
            <returns></returns>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Util.PathUtils.ConfigFileLocation">
            <summary>
            Gets or sets the location of the config file.
            </summary>
            <value>
            The config file location.
            </value>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Util.ProcessArgumentBuilder">
            <summary>
            	
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.ProcessArgumentBuilder.AppendArgument(System.String,System.String)">
            <summary>
            Add the specified argument to the end of the argument list, separating it from the rest of the list
            with a space, formatting the value with the specified format string <i>a la</i>
            <see cref="M:System.Text.StringBuilder.AppendFormat(System.String,System.Object[])"/>.
            </summary>
            <param name="format">The format string.</param>
            <param name="value">The argument value.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.ProcessArgumentBuilder.AppendArgument(System.String)">
            <summary>
            Add the specified argument to the end of the argument list, separating it from the rest of the list
            with a space.
            </summary>
            <param name="value">The argument value.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.ProcessArgumentBuilder.AppendSpaceIfNotEmpty">
            <summary>
            Add a space to the end of the argument list if it is not empty.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.ProcessArgumentBuilder.AppendIf(System.Boolean,System.String)">
            <summary>
            Add the specified argument to the end of the argument list if the specified condition is true, separating
            it from the rest of the list with a space.
            </summary>
            <param name="condition">True if the method should append, false otherwise.</param>
            <param name="value">The argument value.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.ProcessArgumentBuilder.AppendIf(System.Boolean,System.String,System.String)">
            <summary>
            Add the specified argument to the end of the argument list if the specified condition is true, separating 
            it from the rest of the list with a space, formatting the value with the specified format string <i>a la</i>
            <see cref="M:System.Text.StringBuilder.AppendFormat(System.String,System.Object[])"/>.
            </summary>
            <param name="condition">True if the method should append, false otherwise.</param>
            <param name="format">The format string.</param>
            <param name="argument">The argument value.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.ProcessArgumentBuilder.Append(System.String)">
            <summary>
            Add the specified text to the end of the argument list exactly as it is.
            </summary>
            <param name="text">The text to add.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.ProcessArgumentBuilder.AddArgument(System.String,System.String)">
            <summary>
            Add the specified argument to the end of the argument list, separating it from the rest of the list
            with a space, separating the name and value with a space, and enquoting the value if the value contains 
            any spaces.  If the value is an empty string or null, nothing is appended. 
            </summary>
            <param name="arg">The name of the argument to add.</param>
            <param name="value">The value of the argument to add.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.ProcessArgumentBuilder.AddArgument(System.String,System.String,System.String)">
            <summary>
            Add the specified argument to the end of the argument list, separating it from the rest of the list
            with a space, separating the name and value with the specified separator, and enquoting the value 
            if the value contains any spaces.  If the value is an empty string or null, nothing is appended. 
            </summary>
            <param name="arg">The name of the argument to add.</param>
            <param name="separator">The separator to place between the name and value.</param>
            <param name="value">The value of the argument to add.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.ProcessArgumentBuilder.AddArgument(System.String)">
            <summary>
            Add the specified argument to the end of the argument list, separating it from the rest of the list
            with a space, and enquoting it if it contains any spaces.  If the argument is an empty string or null,
            nothing is appended. 
            </summary>
            <param name="value">The argument to add.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.ProcessArgumentBuilder.ToString">
            <summary>
            Return the argument list, converted to a string.
            </summary>
            <returns>The argument list, converted to a string.</returns>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Util.ProcessInfo">
            <summary>
            	
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Util.ProcessInfo.DefaultTimeout">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Util.ProcessInfo.InfiniteTimeout">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Util.ProcessInfo.DEFAULT_PRIORITY">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Util.ProcessInfo.Priority">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.ProcessInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Util.ProcessInfo"/> class.	
            </summary>
            <param name="filename">The filename.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.ProcessInfo.#ctor(System.String,ThoughtWorks.CruiseControl.Core.Util.PrivateArguments)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Util.ProcessInfo"/> class.	
            </summary>
            <param name="filename">The filename.</param>
            <param name="arguments">The arguments.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.ProcessInfo.#ctor(System.String,ThoughtWorks.CruiseControl.Core.Util.PrivateArguments,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Util.ProcessInfo"/> class.	
            </summary>
            <param name="filename">The filename.</param>
            <param name="arguments">The arguments.</param>
            <param name="workingDirectory">The working directory.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.ProcessInfo.#ctor(System.String,ThoughtWorks.CruiseControl.Core.Util.PrivateArguments,System.String,System.Diagnostics.ProcessPriorityClass)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Util.ProcessInfo"/> class.	
            </summary>
            <param name="filename">The filename.</param>
            <param name="arguments">The arguments.</param>
            <param name="workingDirectory">The working directory.</param>
            <param name="priority">The priority.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.ProcessInfo.#ctor(System.String,ThoughtWorks.CruiseControl.Core.Util.PrivateArguments,System.String,System.Diagnostics.ProcessPriorityClass,System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Util.ProcessInfo"/> class.	
            </summary>
            <param name="filename">The filename.</param>
            <param name="arguments">The arguments.</param>
            <param name="workingDirectory">The working directory.</param>
            <param name="priority">The priority.</param>
            <param name="successExitCodes">The success exit codes.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.ProcessInfo.ProcessSuccessful(System.Int32)">
            <summary>
            Processes the successful.	
            </summary>
            <param name="exitCode">The exit code.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.ProcessInfo.CreateProcess">
            <summary>
            Creates the process.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.ProcessInfo.Equals(System.Object)">
            <summary>
            Equalses the specified obj.	
            </summary>
            <param name="obj">The obj.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.ProcessInfo.GetHashCode">
            <summary>
            Gets the hash code.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.ProcessInfo.ToString">
            <summary>
            Toes the string.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Util.ProcessInfo.EnvironmentVariables">
            <summary>
            Gets the environment variables.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Util.ProcessInfo.FileName">
            <summary>
            Gets the name of the file.	
            </summary>
            <value>The name of the file.</value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Util.ProcessInfo.Arguments">
            <summary>
            Gets the arguments.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Util.ProcessInfo.PublicArguments">
            <summary>
            Gets the public arguments.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Util.ProcessInfo.WorkingDirectory">
            <summary>
            Gets or sets the working directory.	
            </summary>
            <value>The working directory.</value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Util.ProcessInfo.StandardInputContent">
            <summary>
            Gets or sets the content of the standard input.	
            </summary>
            <value>The content of the standard input.</value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Util.ProcessInfo.TimeOut">
            <summary>
            Gets or sets the time out.	
            </summary>
            <value>The time out.</value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Util.ProcessInfo.StreamEncoding">
            <summary>
            Gets or sets the stream encoding.	
            </summary>
            <value>The stream encoding.</value>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Util.ProcessOutputEventArgs">
            <summary>
            	
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.ProcessOutputEventArgs.#ctor(ThoughtWorks.CruiseControl.Core.Util.ProcessOutputType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Util.ProcessOutputEventArgs"/> class.	
            </summary>
            <param name="outputType">Type of the output.</param>
            <param name="data">The data.</param>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Util.ProcessOutputEventArgs.OutputType">
            <summary>
            Gets or sets the type of the output.	
            </summary>
            <value>The type of the output.</value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Util.ProcessOutputEventArgs.Data">
            <summary>
            Gets or sets the data.	
            </summary>
            <value>The data.</value>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Util.ProcessOutputType">
            <summary>
            	
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Util.ProcessOutputType.Unknown">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Util.ProcessOutputType.StandardOutput">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Util.ProcessOutputType.ErrorOutput">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Util.ProcessResult">
            <summary>
            ProcessResult holds the results of a Process' execution.  This class is returned from the ProcessExecutor
            once the Process has finished executing (teriminating either normally or abnormally).  
            ProcessResult indicates if the process executed successfully or if it timed out.
            It also indicates what the process wrote to its standard output and error streams.
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Util.ProcessResult.SUCCESSFUL_EXIT_CODE">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Util.ProcessResult.TIMED_OUT_EXIT_CODE">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.ProcessResult.#ctor(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Util.ProcessResult"/> class.	
            </summary>
            <param name="standardOutput">The standard output.</param>
            <param name="standardError">The standard error.</param>
            <param name="errorCode">The error code.</param>
            <param name="timedOut">The timed out.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.ProcessResult.#ctor(System.String,System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Util.ProcessResult"/> class.	
            </summary>
            <param name="standardOutput">The standard output.</param>
            <param name="standardError">The standard error.</param>
            <param name="errorCode">The error code.</param>
            <param name="timedOut">The timed out.</param>
            <param name="failed">The failed.</param>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Util.ProcessResult.StandardOutput">
            <summary>
            Gets the standard output.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Util.ProcessResult.StandardError">
            <summary>
            Gets the standard error.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Util.ProcessResult.ExitCode">
            <summary>
            Gets the exit code.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Util.ProcessResult.TimedOut">
            <summary>
            Gets the timed out.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Util.ProcessResult.Failed">
            <summary>
            Gets the failed.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Util.ProcessResult.Succeeded">
            <summary>
            Returns true if the task completed without failing or timing out.
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Util.ProcessResult.HasErrorOutput">
            <summary>
            Gets the has error output.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Util.ReflectionUtil">
            <summary>
            	
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.ReflectionUtil.#ctor">
            <summary>
            Utility class is not intended for instantiation.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.ReflectionUtil.ReflectionEquals(System.Object,System.Object)">
            <summary>
            Gets a value indicating whether the types, fields and properties of the
            specified objects are equal.
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.ReflectionUtil.ReflectionToString(System.Object)">
            <summary>
            Uses reflection to compile a string representation of an object, by
            querying its type, field names/values, and property names/values.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Util.Registry">
            <summary>
            	
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.Registry.GetLocalMachineSubKeyValue(System.String,System.String)">
            <summary>
            Gets the local machine sub key value.	
            </summary>
            <param name="path">The path.</param>
            <param name="name">The name.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.Registry.GetExpectedLocalMachineSubKeyValue(System.String,System.String)">
            <summary>
            Gets the expected local machine sub key value.	
            </summary>
            <param name="path">The path.</param>
            <param name="name">The name.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Util.StringUtil">
            <summary>
            Class with handy stirng routines
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Util.StringUtil.DEFAULT_DELIMITER">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.StringUtil.EqualsIgnoreCase(System.String,System.String)">
            <summary>
            Checks if the 2 strings are equal, ignoring casing
            </summary>
            <param name="stringOne"></param>
            <param name="stringTwo"></param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.StringUtil.GenerateHashCode(System.String[])">
            <summary>
            generates a hashcode for the string array
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.StringUtil.LastWord(System.String)">
            <summary>
            returns the last word of the string, using separators space ,;!?:
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.StringUtil.LastWord(System.String,System.String)">
            <summary>
            returns the last word of the string, using the specified separators 
            </summary>
            <param name="input"></param>
            <param name="separators"></param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.StringUtil.IsWhitespace(System.String)">
            <summary>
            checks if a string is null or empty or is made only of spaces 
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.StringUtil.Strip(System.String,System.String[])">
            <summary>
            removes the specified strings in the string array from the input string
            </summary>
            <param name="input"></param>
            <param name="removals"></param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.StringUtil.Join(System.String,System.String[])">
            <summary>
            joins the strings with the speficied separator.
            </summary>
            <param name="separator"></param>
            <param name="strings"></param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.StringUtil.RemoveNulls(System.String)">
            <summary>
            Removes the nulls.	
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.StringUtil.StripQuotes(System.String)">
            <summary>
            Removes leading and trailing quotes " 
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.StringUtil.RemoveInvalidCharactersFromFileName(System.String)">
            <summary>
            removes invalid charactes from filenames, like the slash and backslash
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.StringUtil.AutoDoubleQuoteString(System.String)">
            <summary>
            Add leading and trailing double quotes to the provided string if required.
            If the string contains a trailing backslash, that escape the added double quote,
            escape it also with another backslash.
            </summary>
            <param name="value">The string to double quote.</param>
            <returns>A double quoted string.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.StringUtil.RemoveTrailingPathDelimeter(System.String)">
            <summary>
            Removes the trailing path delimeter.	
            </summary>
            <param name="directory">The directory.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.StringUtil.IntegrationPropertyToString(System.Object)">
            <summary>
            Integrations the property to string.	
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.StringUtil.IntegrationPropertyToString(System.Object,System.String)">
            <summary>
            Integrations the property to string.	
            </summary>
            <param name="value">The value.</param>
            <param name="delimiter">The delimiter.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.StringUtil.MakeBuildResult(System.String,System.String)">
            <summary>
            Convert a stream of text lines separated with newline sequences into an XML build result.
            </summary>
            <param name="input">the text stream</param>
            <param name="msgLevel">the message level, if any.  Values are "Error" and "Warning".</param>
            <returns>the build result string</returns>
            <remarks>If there are any non-blank lines in the input, they are each wrapped in a
            <code>&lt;message&gt;</code> element and the entire set is wrapped in a
            <code>&lt;buildresults&gt;</code> element and returned.  Each line of the input is encoded
            as XML CDATA rules require.  If the input is empty or contains only whitspace, an 
            empty string is returned.
            Note: If we can't manage to understand the input, we just return it unchanged.
            </remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.StringUtil.ArrayToNewLineSeparatedString(System.String[])">
            <summary>
            Arrays to new line separated string.	
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.StringUtil.NewLineSeparatedStringToArray(System.String)">
            <summary>
            News the line separated string to array.	
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.StringUtil.GetArrayContents(System.Array)">
            <summary>
            returns the elements of the array as a string, delimited with the default delimitor
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.StringUtil.UrlEncodeName(System.String)">
            <summary>
            Correctly encode a name for a URL.
            </summary>
            <param name="name">The name to encode.</param>
            <returns>The encoded name.</returns>
            <remarks>
            <para>
            HttpUtility.UrlEncode does not correctly encode for a URL, spaces get converted into 
            pluses, which can cause security errors.
            </para>
            <para>
            This method will encode characters according to RFC 3986. This means only the following 
            characters are allowed un-encoded:
            </para>
            <para>
            A B C D E F G H I J K L M N O P Q R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s 
            t u v w x y z 0 1 2 3 4 5 6 7 8 9 - _ . ~
            </para>
            <para>
            However, since the encoding only uses two-hex digits, it is not possible to encode non-ASCII
            characters using this approach. Therefore we are using the RFC 3986 recommendation and assuming
            the string will be using UTF-8 encoding and leaving the characters as they are.
            </para>
            </remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Util.LoadDataHandler">
            <summary>
            A delegate for loading data.
            </summary>
            <returns>The data that has been loaded.</returns>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Util.SynchronisedData">
            <summary>
            A data item that is only loaded once.
            </summary>
            <remarks>
            The caller that initialises an instance of this class is responsible for loading the data
            (using the <see cref="M:ThoughtWorks.CruiseControl.Core.Util.SynchronisedData.LoadData(ThoughtWorks.CruiseControl.Core.Util.LoadDataHandler)"/>() method). Any other caller that accesses an instance of
            this class should call <see cref="M:ThoughtWorks.CruiseControl.Core.Util.SynchronisedData.WaitForLoad(System.Int32)"/>() before attempting to access the data.
            </remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Util.SynchronisedData.manualEvent">
            <summary>
            The <see cref="T:System.Threading.ManualResetEvent"/> for handling synchronisation.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.SynchronisedData.WaitForLoad(System.Int32)">
            <summary>
            Waits for the data to be loaded.
            </summary>
            <param name="milliseconds">The milliseconds.</param>
            <returns>True if the data has been loaded, false otherwise.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.SynchronisedData.LoadData(ThoughtWorks.CruiseControl.Core.Util.LoadDataHandler)">
            <summary>
            Loads the data and marks this instance as loaded.
            </summary>
            <param name="handler">The handler for loading the data.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.SynchronisedData.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Util.SynchronisedData.Data">
            <summary>
            Gets the synchronised data.
            </summary>
            <value>The data that is being synchronised.</value>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Util.SystemIoFileSystem">
            <summary>
            	
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.SystemIoFileSystem.Copy(System.String,System.String)">
            <summary>
            Copies the specified source path.	
            </summary>
            <param name="sourcePath">The source path.</param>
            <param name="destPath">The dest path.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.SystemIoFileSystem.Save(System.String,System.String)">
            <summary>
            Saves the specified file.	
            </summary>
            <param name="file">The file.</param>
            <param name="content">The content.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.SystemIoFileSystem.AtomicSave(System.String,System.String)">
            <summary>
            Write the specified data in UTF8 encoding to the specified file in an atomic fashion, such
            that the file is either completely replaced on disk or not altered at all.
            </summary>
            <param name="file">The pathname of the file to write to.</param>
            <param name="content">The content to write to the file.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.SystemIoFileSystem.AtomicSave(System.String,System.String,System.Text.Encoding)">
            <summary>
            Write the specified data in the specified encoding to the specified file in an atomic fashion,
            such that the file is either completely replaced on disk or not altered at all.
            </summary>
            <param name="file">The pathname of the file to write to.</param>
            <param name="content">The content to write to the file.</param>
            <param name="encoding">The encoding of the data.</param>
            <remarks>
            Not all file systems provide an atomic-file-replace operation, therefore we implement this 
            ourselves.
            <ol>
            <li>Write to a new file on disk.</li>
            <li>Flush all the writes to disk.</li>
            <li>Rename the existing target file to the "old" file name.</li>
            <li>Rename the new file to the target file.</li>
            <li>Delete the old target file.</li>
            </ol>
            </remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.SystemIoFileSystem.Load(System.String)">
            <summary>
            Loads the specified file.	
            </summary>
            <param name="file">The file.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.SystemIoFileSystem.FileExists(System.String)">
            <summary>
            Files the exists.	
            </summary>
            <param name="file">The file.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.SystemIoFileSystem.DirectoryExists(System.String)">
            <summary>
            Directories the exists.	
            </summary>
            <param name="folder">The folder.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.SystemIoFileSystem.DeleteFile(System.String)">
            <summary>
            Delete a file if it exists.
            </summary>
            <param name="filePath">The filepath to delete.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.SystemIoFileSystem.EnsureFolderExists(System.String)">
            <summary>
            Ensures that the folder for the specified file exists.
            </summary>
            <param name="fileName">The name of the file, including the folder path.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.SystemIoFileSystem.EnsureFileExists(System.String)">
            <summary>
            Ensures that the specified file exists.
            </summary>
            <param name="fileName">The name of the file.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.SystemIoFileSystem.GetFreeDiskSpace(System.String)">
            <summary>
            Retrieves the free disk space for a drive.
            </summary>
            <param name="driveName">The name of the drive (e.g. c:).</param>
            <returns>The amount of free space in bytes.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.SystemIoFileSystem.GetFilesInDirectory(System.String)">
            <summary>
            Lists all the files within a directory.
            </summary>
            <param name="directory"></param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.SystemIoFileSystem.GetFilesInDirectory(System.String,System.Boolean)">
            <summary>
            Lists all the files within a directory.
            </summary>
            <param name="directory">The directory.</param>
            <param name="includeSubDirectories">
            If set to <c>true</c> then files in sub directories will be included.
            </param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.SystemIoFileSystem.GetLastWriteTime(System.String)">
            <summary>
            Retrieves the last write time of a file.
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.SystemIoFileSystem.GenerateTaskResultFromFile(System.String)">
            <summary>
            Generates a task result from a file.
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.SystemIoFileSystem.GenerateTaskResultFromFile(System.String,System.Boolean)">
            <summary>
            Generates a task result from a file.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="deleteAfterMerge">If set to <c>true</c> the file will be deleted after a merge.</param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.SystemIoFileSystem.OpenOutputStream(System.String)">
            <summary>
            Opens an output stream for saving data.
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.SystemIoFileSystem.OpenInputStream(System.String)">
            <summary>
            Opens an input stream for loading data.
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.SystemIoFileSystem.CreateDirectory(System.String)">
            <summary>
            Creates a directory.
            </summary>
            <param name="folder">The name of the folder to create.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.SystemIoFileSystem.DeleteDirectory(System.String)">
            <summary>
            Deletes a directory.
            </summary>
            <param name="folder">The name of the folder to delete.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.SystemIoFileSystem.DeleteDirectory(System.String,System.Boolean)">
            <summary>
            Deletes a directory, optionally deleting all sub-directories.
            </summary>
            <param name="folder">The name of the folder to delete.</param>
            <param name="recursive">If set to <c>true</c> recursively delete folders.</param>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.SystemIoFileSystem.GetFileLength(System.String)">
            <summary>
            Gets the length of the file.
            </summary>
            <param name="fullName">The full name.</param>
            <returns>The length of the file in bytes.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.SystemIoFileSystem.GetFilesInDirectory(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Gets the files in directory.
            </summary>
            <param name="path">The path.</param>
            <param name="pattern">The pattern.</param>
            <param name="searchOption">The search option.</param>
            <returns>The files in the directory that match the pattern.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.SystemIoFileSystem.GetFileVersion(System.String)">
            <summary>
            Gets the version of a file.
            </summary>
            <param name="filePath">The full path to the file.</param>
            <returns>The version number of the file it it exists; <c>null</c> otherwise.</returns>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Util.SystemPath">
            <summary>
            	
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Util.SystemPath.Temp">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.SystemPath.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Util.SystemPath"/> class.	
            </summary>
            <param name="path">The path.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.SystemPath.#ctor(System.String,ThoughtWorks.CruiseControl.Core.Util.IExecutionEnvironment)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Util.SystemPath"/> class.	
            </summary>
            <param name="path">The path.</param>
            <param name="environment">The environment.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.SystemPath.Combine(System.String)">
            <summary>
            Combines the specified subpath.	
            </summary>
            <param name="subpath">The subpath.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.SystemPath.Exists">
            <summary>
            Existses this instance.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.SystemPath.ToString">
            <summary>
            Toes the string.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.SystemPath.CreateDirectory">
            <summary>
            Creates the directory.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.SystemPath.DeleteDirectory">
            <summary>
            Deletes the directory.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.SystemPath.DeleteFile">
            <summary>
            Deletes the file.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.SystemPath.UniqueTempPath">
            <summary>
            Uniques the temp path.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.SystemPath.PathIsInvalid(System.String)">
            <summary>
            Pathes the is invalid.	
            </summary>
            <param name="path">The path.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.SystemPath.CreateSubDirectory(System.String)">
            <summary>
            Creates the sub directory.	
            </summary>
            <param name="dir">The dir.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.SystemPath.CreateEmptyFile(System.String)">
            <summary>
            Creates the empty file.	
            </summary>
            <param name="file">The file.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.SystemPath.CreateEmptyFile">
            <summary>
            Creates the empty file.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.SystemPath.ReadTextFile">
            <summary>
            Reads the text file.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.SystemPath.CreateTextFile(System.String,System.String)">
            <summary>
            Creates the text file.	
            </summary>
            <param name="filename">The filename.</param>
            <param name="content">The content.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Util.TempDirectory">
            <summary>
            	
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.TempDirectory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Util.TempDirectory"/> class.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Util.TempFileUtil">
            <summary>
            Utility class for managing temp files and folders.
            Uses your system's temp folder.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.TempFileUtil.CreateTempDir(System.Object)">
            <summary>
            Creates the temp dir.	
            </summary>
            <param name="obj">The obj.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.TempFileUtil.CreateTempDir(System.String)">
            <summary>
            Creates the temp dir.	
            </summary>
            <param name="dirname">The dirname.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.TempFileUtil.CreateTempDir(System.String,System.Boolean)">
            <summary>
            Creates the temp dir.	
            </summary>
            <param name="dirname">The dirname.</param>
            <param name="overwrite">The overwrite.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.TempFileUtil.GetTempPath(System.String)">
            <summary>
            Gets the temp path.	
            </summary>
            <param name="dirname">The dirname.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.TempFileUtil.GetTempPath(System.Object)">
            <summary>
            Gets the temp path.	
            </summary>
            <param name="obj">The obj.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.TempFileUtil.GetTempFilePath(System.String,System.String)">
            <summary>
            Gets the temp file path.	
            </summary>
            <param name="dirname">The dirname.</param>
            <param name="filename">The filename.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.TempFileUtil.DeleteTempDir(System.String)">
            <summary>
            Deletes the temp dir.	
            </summary>
            <param name="dirname">The dirname.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.TempFileUtil.DeleteTempDir(System.Object)">
            <summary>
            Deletes the temp dir.	
            </summary>
            <param name="obj">The obj.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.TempFileUtil.TempFileExists(System.String,System.String)">
            <summary>
            Temps the file exists.	
            </summary>
            <param name="dirname">The dirname.</param>
            <param name="filename">The filename.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.TempFileUtil.CreateTempXmlFile(System.String,System.String,System.String)">
            <summary>
            Creates the temp XML file.	
            </summary>
            <param name="dirname">The dirname.</param>
            <param name="filename">The filename.</param>
            <param name="contents">The contents.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.TempFileUtil.CreateTempXmlFile(System.String,System.String)">
            <summary>
            Creates the temp XML file.	
            </summary>
            <param name="path">The path.</param>
            <param name="contents">The contents.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.TempFileUtil.CreateTempFile(System.String,System.String)">
            <summary>
            Creates the temp file.	
            </summary>
            <param name="tempDir">The temp dir.</param>
            <param name="filename">The filename.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.TempFileUtil.CreateTempFile(System.String,System.String,System.String)">
            <summary>
            Creates the temp file.	
            </summary>
            <param name="tempDir">The temp dir.</param>
            <param name="filename">The filename.</param>
            <param name="content">The content.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.TempFileUtil.CreateTempFiles(System.String,System.String[])">
            <summary>
            Creates the temp files.	
            </summary>
            <param name="tempDir">The temp dir.</param>
            <param name="filenames">The filenames.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.TempFileUtil.UpdateTempFile(System.String,System.String)">
            <summary>
            Updates the temp file.	
            </summary>
            <param name="filename">The filename.</param>
            <param name="text">The text.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.TempFileUtil.DeleteTempFile(System.String)">
            <summary>
            Deletes the temp file.	
            </summary>
            <param name="path">The path.</param>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Util.TestTraceListener">
            <summary>
            	
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.TestTraceListener.Write(System.String)">
            <summary>
            Writes the specified trace.	
            </summary>
            <param name="trace">The trace.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.TestTraceListener.WriteLine(System.String)">
            <summary>
            Writes the line.	
            </summary>
            <param name="trace">The trace.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.TestTraceListener.ToString">
            <summary>
            Toes the string.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Util.TestTraceListener.Traces">
            <summary>
            Gets the traces.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Util.Timeout">
            <summary>
            Timeout configuration.
            </summary>
            <title>Timeout Configuration</title>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Util.Timeout.DefaultTimeout">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.Timeout.Normalize">
            <summary>
            Normalizes this instance.	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.Timeout.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Util.Timeout"/> class.	
            </summary>
            <param name="periodInMillis">The period in millis.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.Timeout.#ctor(System.Int32,ThoughtWorks.CruiseControl.Core.Util.TimeUnits)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Util.Timeout"/> class.	
            </summary>
            <param name="period">The period.</param>
            <param name="unit">The unit.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.Timeout.Equals(System.Object)">
            <summary>
            Equalses the specified obj.	
            </summary>
            <param name="obj">The obj.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.Timeout.GetHashCode">
            <summary>
            Gets the hash code.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.Timeout.Write(System.Xml.XmlWriter)">
            <summary>
            Writes the specified writer.	
            </summary>
            <param name="writer">The writer.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.Timeout.ToString">
            <summary>
            Toes the string.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Util.Timeout.TimeUnits">
            <summary>
            Gets the time units.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Util.Timeout.Millis">
            <summary>
            Gets the millis.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Util.TimeoutSerializer">
            <summary>
            	
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.TimeoutSerializer.#ctor(Exortech.NetReflector.Util.ReflectorMember,Exortech.NetReflector.ReflectorPropertyAttribute)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Util.TimeoutSerializer"/> class.	
            </summary>
            <param name="info">The info.</param>
            <param name="attribute">The attribute.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.TimeoutSerializer.Write(System.Xml.XmlWriter,System.Object)">
            <summary>
            Writes the specified writer.	
            </summary>
            <param name="writer">The writer.</param>
            <param name="target">The target.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.TimeoutSerializer.Read(System.Xml.XmlNode,Exortech.NetReflector.NetReflectorTypeTable)">
            <summary>
            Reads the specified node.	
            </summary>
            <param name="node">The node.</param>
            <param name="types">The types.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Util.TimeoutSerializerFactory">
            <summary>
            	
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.TimeoutSerializerFactory.Create(Exortech.NetReflector.Util.ReflectorMember,Exortech.NetReflector.ReflectorPropertyAttribute)">
            <summary>
            Creates the specified member info.	
            </summary>
            <param name="memberInfo">The member info.</param>
            <param name="attribute">The attribute.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Util.TimeUnits">
            <summary>
            	
            </summary>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Util.TimeUnits.MILLIS">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Util.TimeUnits.SECONDS">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Util.TimeUnits.MINUTES">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="F:ThoughtWorks.CruiseControl.Core.Util.TimeUnits.HOURS">
            <summary>
            	
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.TimeUnits.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Util.TimeUnits"/> class.	
            </summary>
            <param name="name">The name.</param>
            <param name="numberOfMillis">The number of millis.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.TimeUnits.ToMillis(System.Int32)">
            <summary>
            Toes the millis.	
            </summary>
            <param name="timeout">The timeout.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.TimeUnits.ToString">
            <summary>
            Toes the string.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.TimeUnits.Parse(System.String)">
            <summary>
            Parses the specified input.	
            </summary>
            <param name="input">The input.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.TimeUnits.CompareTo(System.Object)">
            <summary>
            Compares to.	
            </summary>
            <param name="obj">The obj.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Util.Utf8StringWriter">
            <summary>
            	
            </summary>
        </member>
        <member name="P:ThoughtWorks.CruiseControl.Core.Util.Utf8StringWriter.Encoding">
            <summary>
            Gets the encoding.	
            </summary>
            <value></value>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Util.WildCardPath">
            <summary>
            	
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.WildCardPath.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Util.WildCardPath"/> class.	
            </summary>
            <param name="pathPattern">The path pattern.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.WildCardPath.GetFiles">
            <summary>
            Gets the files.	
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Util.XmlFragmentWriter">
            <summary>
            XmlFragmentWriter buffers xml written using the WriteNode method so that 
            It swallows any requests to write processing instructions.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.XmlFragmentWriter.#ctor(System.IO.TextWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:ThoughtWorks.CruiseControl.Core.Util.XmlFragmentWriter"/> class.	
            </summary>
            <param name="writer">The writer.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.XmlFragmentWriter.WriteNode(System.String)">
            <summary>
            Writes the node.	
            </summary>
            <param name="xml">The XML.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.XmlFragmentWriter.CreateXmlReader(System.String)">
            <summary>
            Use XmlValidatingReader in order to bypass root-level rules for document validation.  In other words,
            accept xml that is not single rooted (contains text or multiple root elements).
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.XmlFragmentWriter.WriteNode(System.Xml.XmlReader,System.Boolean)">
            <summary>
            Writes the node.	
            </summary>
            <param name="reader">The reader.</param>
            <param name="defattr">The defattr.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.XmlFragmentWriter.WriteProcessingInstruction(System.String,System.String)">
            <summary>
            Writes the processing instruction.	
            </summary>
            <param name="name">The name.</param>
            <param name="text">The text.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.XmlFragmentWriter.WriteCData(System.String)">
            <summary>
            Writes the C data.	
            </summary>
            <param name="text">The text.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.XmlFragmentWriter.StripIllegalCharacters(System.String)">
            <summary>
            Character values in the range 0x-0x1F (excluding white space characters 0x9, 0xA, and 0xD) are illegal in xml documents.
            This method removes all occurrences of these characters from the document.
            </summary>
            <param name="xml">The xml string to preprocess.</param>
            <returns></returns>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Util.XmlUtil">
            <summary>
            Handy XMl routines
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.XmlUtil.CreateDocument(System.String)">
            <summary>
            Creates the document.	
            </summary>
            <param name="xml">The XML.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.XmlUtil.CreateDocumentElement(System.String)">
            <summary>
            Creates the document element.	
            </summary>
            <param name="xml">The XML.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.XmlUtil.GetFirstElement(System.Xml.XmlDocument,System.String)">
            <summary>
            Gets the first element.	
            </summary>
            <param name="doc">The doc.</param>
            <param name="name">The name.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.XmlUtil.GetSingleElement(System.Xml.XmlDocument,System.String)">
            <summary>
            Gets the single element.	
            </summary>
            <param name="doc">The doc.</param>
            <param name="name">The name.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.XmlUtil.GetSingleElementValue(System.Xml.XmlDocument,System.String)">
            <summary>
            Gets the single element value.	
            </summary>
            <param name="doc">The doc.</param>
            <param name="name">The name.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.XmlUtil.GetSingleElementValue(System.Xml.XmlDocument,System.String,System.String)">
            <summary>
            Gets the single element value.	
            </summary>
            <param name="doc">The doc.</param>
            <param name="name">The name.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.XmlUtil.GenerateOuterXml(System.String)">
            <summary>
            Generates the outer XML.	
            </summary>
            <param name="xmlContent">Content of the XML.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.XmlUtil.GenerateIndentedOuterXml(System.String)">
            <summary>
            Generates the indented outer XML.	
            </summary>
            <param name="xmlContent">Content of the XML.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.XmlUtil.SelectValue(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Selects the value.	
            </summary>
            <param name="node">The node.</param>
            <param name="xpath">The xpath.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.XmlUtil.SelectValue(System.Xml.XmlDocument,System.String,System.String)">
            <summary>
            Selects the value.	
            </summary>
            <param name="document">The document.</param>
            <param name="xpath">The xpath.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.XmlUtil.SelectNode(System.String,System.String)">
            <summary>
            Selects the node.	
            </summary>
            <param name="xml">The XML.</param>
            <param name="xpath">The xpath.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.XmlUtil.SelectRequiredValue(System.Xml.XmlDocument,System.String)">
            <summary>
            Selects the required value.	
            </summary>
            <param name="document">The document.</param>
            <param name="xpath">The xpath.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.XmlUtil.SelectRequiredValue(System.String,System.String)">
            <summary>
            Selects the required value.	
            </summary>
            <param name="xml">The XML.</param>
            <param name="xpath">The xpath.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.XmlUtil.EncodeCDATA(System.String)">
            <summary>
            Encode a string so it is safe to use as XML "character data".
            </summary>
            <param name="text">the text to encode</param>
            <returns>the encoded text</returns>
            <remarks>
            This method damages the resulting string, because the sequence "]]&gt;" is forbidden inside
            a CDATA section and cannot be escaped or encoded.  Since we can't protect it, we insert a
            space between the brackets so it isn't recognized by an XML parser.  C'est la guerre.
            </remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.XmlUtil.StringSerialize(System.Object)">
            <summary>
            Strings the serialize.	
            </summary>
            <param name="obj">The obj.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.XmlUtil.AddChild(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Adds the child.	
            </summary>
            <param name="parent">The parent.</param>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.XmlUtil.AddChild(System.Xml.XmlNode,System.String)">
            <summary>
            Adds the child.	
            </summary>
            <param name="parent">The parent.</param>
            <param name="name">The name.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.XmlUtil.WriteNonNullElementString(System.Xml.XmlWriter,System.String,System.String)">
            <summary>
            Writes the non null element string.	
            </summary>
            <param name="writer">The writer.</param>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.XmlUtil.VerifyXmlIsWellFormed(System.String)">
            <summary>
            Verifies the XML is well formed.	
            </summary>
            <param name="actual">The actual.</param>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.XmlUtil.EncodePCDATA(System.String)">
            <summary>
            Encode a string so it is safe to use as XML "parsed character data".
            </summary>
            <param name="input">the text to encode</param>
            <returns>the encoded text</returns>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Util.XslTransformer">
            <summary>
            	
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.XslTransformer.Transform(System.String,System.String,System.Collections.Hashtable)">
            <summary>
            Transforms the specified input.	
            </summary>
            <param name="input">The input.</param>
            <param name="xslFilename">The XSL filename.</param>
            <param name="xsltArgs">The XSLT args.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.XslTransformer.TransformToXml(System.String,System.Xml.XPath.XPathDocument)">
            <summary>
            Transforms to XML.	
            </summary>
            <param name="xslFilename">The XSL filename.</param>
            <param name="document">The document.</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="T:ThoughtWorks.CruiseControl.Core.Util.ZipCompressionService">
            <summary>
            An <see cref="T:ThoughtWorks.CruiseControl.Core.Util.ICompressionService"/> using ZIP compression.
            </summary>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.ZipCompressionService.CompressString(System.String)">
            <summary>
            Compresses a string.
            </summary>
            <param name="value">The string to compress.</param>
            <returns>The compressed string.</returns>
        </member>
        <member name="M:ThoughtWorks.CruiseControl.Core.Util.ZipCompressionService.ExpandString(System.String)">
            <summary>
            Expands (de-compresses) a string.
            </summary>
            <param name="value">The string to expanded.</param>
            <returns>The expanded string.</returns>
        </member>
    </members>
</doc>
