<?xml version="1.0" encoding="utf-8"?>
<topic id="f6541081-794f-4de1-b0fc-d75aae6fb957" revisionNumber="1">
  <developerWalkthroughDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">
    <!--
    <summary>
      <para>Optional summary abstract</para>
    </summary>
    -->
    <introduction>
      <para>UnityBuild is a compilation technique for C++ language. It is known that boosts compliation speed up dramatically in some cases, and especially most of large-scale projects. This technique can drag impressive performance out if combined with distibuted build tools like <a href="http://www.xoreax.com/">Xoreax <application>Incredibuild</application></a>.</para>
	  
	  <para><application>Earlgrey.UnityBuild</application> provides a convenient way to convert your legacy Visual C++ project to new one with UnityBuild capability. It is simple and easy-to-use.</para>
	  
	  <autoOutline />
    </introduction>
	
	<prerequisites>
		<content>
			<title>Supported environment</title>
		
			<list class="bullet">
			<listItem><para>Visual Studio 2008</para></listItem>
			</list>
		</content>
	</prerequisites>
	
    
	<section address="Usage">
		<title>Usage</title>
		
		<content>
			<para>Execute <command>UnityBuild.ConsoleUi.exe</command>, then you will see usages:</para>
			
			<code lang="none">
<![CDATA[
C:\Workspace\trunk\src\BuildTools\Any CPU-Debug\bin>UnityBuild.ConsoleUi.exe

How to use!
 -i, --input (Required)
   Solution file path.
 -e, --exclude (Not Required)
   Visual C++ project names you want to exclude. Separated by a ';'. For instance, -e"Earlgrey";"Earlgrey.Test"
 -c, --copy (Not Required)
   Copy the solution/projects and use them.
 -o, --optimization (Not Required)
   Possible values are 'Normal' and 'Best'.
 -v, --verbose (Not Required)
   Print details during execution.
 
C:\>
]]>
			</code>
		</content>
	</section>
	
	<section address="Command Switches">
		<title>Command Switches</title>
		
		<content>
			<table>
				<title>Switches</title>
				<tableHeader>
				  <row>
					<entry><para>Switch</para></entry>
					<entry><para>Required or Not?</para></entry>
					<entry><para>Example</para></entry>
					<entry><para>Descriptiop</para></entry>
				  </row>
				</tableHeader>
				<row>
					<entry><para><system>-i</system></para></entry>
					<entry><para>Required</para></entry>
					<entry><para><system>-i"C:\Earlgrey.sln" </system></para></entry>
					<entry><para>The path of the solution file to convert. This will create the copy of the solution and its project files.</para></entry>
				</row>
				<row>
					<entry><para><system>-e</system></para></entry>
					<entry><para>Optional</para></entry>
					<entry><para><system>-e"gtest;Earlgrey.Tests"</system></para></entry>
					<entry><para>The projects you do not want to unity-build. Each project name is separated with ';'.</para></entry>
				</row>
				<row>
					<entry><para><system>-o</system></para></entry>
					<entry><para>Optional</para></entry>
					<entry><para><system>-o"Normal"</system></para></entry>
					<entry>
						<para>Specify optimization level. Possible values are:</para>
						
						<list class="bullet">
						<listItem><para><system>Normal</system></para></listItem>
						<listItem><para><system>Best</system></para></listItem>
						</list>
					
					</entry>
				</row>
				</table>

		</content>
	</section>
	
	<section address="How to build a solution">
		<title>How to build a solution</title>
		
		<sections>
			<section>
				<title>Backup your solution and its project files.</title>
				
				<content>
					<para><command>UnityBuild.ConsoleUi.exe</command> might modify the solution (.sln) file, so we recommend you to have a backup plan to restore everything when things messed up.</para>
					
					<alert class="note">
						<para>Running <command>UnityBuild.ConsoleUi.exe</command> with the switch <system>-c</system> is the better way to build your solution. This switch copies every involved solution/project files and use those to build.  </para>
					</alert>
				</content>
			</section>
			<section>
				<title>Convert your solution and its project files.</title>
				
				<content>
					<para><system>-i</system> is the most important switch for <command>UnityBuild.ConsoleUi.exe</command>. <system>-i</system> is used for specifying the target solution file path:</para>
					
					<code lang="none">
					<![CDATA[
C:\Workspace\trunk\src\BuildTools\Any CPU-Debug\bin>UnityBuild.ConsoleUi.exe -i "..\..\..\Earlgrey.sln"

working ...
done!
 
C:\>
					]]>
					</code>
					
					<para>After running <command>UnityBuild.ConsoleUi.exe</command> with <system>-i</system> switch, you will see the some files are actually changed. For instance, with installed <application>TortoiseSVN</application>,  local copy of trunk folder is going to look like:</para>
					
					<mediaLink>
					<image placement="right" xlink:href="UnityBuild.ConsoleUi.exe_를_사용한_후" />
					</mediaLink>
					
					<para>Red overlay icons mean that some files, actually some .vcproj files were modified by <command>UnityBuild.ConsoleUi.exe</command>. The target solution specified with <system>-i</system> switch has .vcproj and .csproj altogether. But you do not have to worry about that, <command>UnityBuild.ConsoleUi.exe</command> can handle a mixed solution like this. Only .vcproj are affected in the solution converting process.</para>
					
					<para>You can also exclude some of .vcproj from conversion with <system>-e</system> switch. <system>Earlgrey.sln</system> includes some extenal open source projects. For example, <newTerm>gtest</newTerm> (Google Test) and StackWalker_VC9 (StackWalker) are there. Usually not touching the external libraries is the rule of thumbs and <system>-e</system> switch is helpful for cases like this.</para>
					
					<code lang="none">
<![CDATA[					
C:\Workspace\trunk\src\BuildTools\Any CPU-Debug\bin>UnityBuild.ConsoleUi.exe -i "..\..\..\Earlgrey.sln" -e "gtest;StackWalker_VC9"

working ...
done!
 
C:\>
					]]>
					</code>
					
					<para>Now, exclude two projects above from conversion with <system>-e</system> switch. Look at your local copy folders 'vendor' and 'src' after running <command>UnityBuild.ConsoleUi.exe</command>, then you will notice that two projects in 'vendor' folder are not changed at all (see the next screenshot).   </para>
					
					<mediaLink>
					<image placement="right" xlink:href="UnityBuild.ConsoleUi.exe_에_-e_옵션을_준_경우에" />
					</mediaLink>
					
					<para><system>-c</system> switch do a simple thing. With this switch, <command>UnityBuild.ConsoleUi.exe</command> copy <system>Earlgrey.sln</system> and its projects into new ones and build this new solution file. This is very useful when you do not want your original files not to be changed. </para>
					
					<para><system>-o</system> switch describes the optimization level. Details are hidden because the algorithms under the hood can be changed at any time.</para>
				</content>
			</section>
			<section>
				<title>Build your new solution file.</title>
				
				<content>
					<para>Open your new solution file with Visual Studio IDE. Build and enjoy!</para>
				</content>
			</section>
		</sections>
		
		
	
	</section>
	
	<section address="External Resources">
		<title>External Resources</title>
		
		<sections>
			<section>
				<title>The Magic of Unity Builds</title>
				
				<content>
					<markup><a href="http://buffered.io/2007/12/10/the-magic-of-unity-builds/">The Magic of Unity Builds</a></markup> is probably the most famous reference of UnityBuild theory. Most web pages refer to this. Very long, but there is <externalLink>
					<linkText>a tutorial video</linkText>
					<linkUri>http://oj.blackapache.net.s3.amazonaws.com/UnityBuilds.html</linkUri>
					</externalLink> so you can learn easily.
				</content>
			</section>
			
			<section>
				<title>송창규, unity build로 빌드타임 반토막내기, NDC2010</title>
				
				<content>
					<markup><a href="http://www.slideshare.net/devcatpublications/ndc2010-unity-build">송창규, unity build로 빌드타임 반토막내기, NDC2010</a></markup> is the most well known Korean documentation for UnityBuild.
				</content>
			</section>
		</sections>
	</section>
    <!-- <codeExample>Optional code example</codeExample> -->
    <!-- <buildInstructions>Optional instructions for building a
         code example.</buildInstructions> -->
    <!-- <robustProgramming>Optional discussion of error handling and other
         issues related to writing solid code.</robustProgramming> -->
    <!-- <security>Optional discussion of security issues.</security> -->
    <relatedTopics>
		
		
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID">Link text</link>
      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>
      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on CodePlex</linkText>
          <linkAlternateText>Go to CodePlex</linkAlternateText>
          <linkUri>http://shfb.codeplex.com</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerWalkthroughDocument>
</topic>